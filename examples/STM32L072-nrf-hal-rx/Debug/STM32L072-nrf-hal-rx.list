
STM32L072-nrf-hal-rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d94  08005d94  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d94  08005d94  00015d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d9c  08005d9c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d9c  08005d9c  00015d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005da0  08005da0  00015da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000070  08005e14  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08005e14  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe60  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ef  00000000  00000000  0002fef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  000322e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00033138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015db4  00000000  00000000  00033ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102f4  00000000  00000000  00049c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085953  00000000  00000000  00059f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df89b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f0  00000000  00000000  000df8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005c7c 	.word	0x08005c7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005c7c 	.word	0x08005c7c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	b095      	sub	sp, #84	; 0x54
 80004c0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	static uint8_t rx[NRF_MAX_PL] = {};
	int cnt=0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fd69 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f899 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 fa51 	bl	8000974 <MX_GPIO_Init>
  MX_RTC_Init();
 80004d2:	f000 f90f 	bl	80006f4 <MX_RTC_Init>
  MX_SPI1_Init();
 80004d6:	f000 f9ad 	bl	8000834 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004da:	f000 fa1b 	bl	8000914 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80004de:	f000 f9e1 	bl	80008a4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  restart_rx();
 80004e2:	f000 fb59 	bl	8000b98 <restart_rx>
  uint8_t addr[5];
  char rcvd_string[12] = "Received: \"";
 80004e6:	2328      	movs	r3, #40	; 0x28
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	4a3d      	ldr	r2, [pc, #244]	; (80005e0 <main+0x124>)
 80004ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004ee:	c313      	stmia	r3!, {r0, r1, r4}
  char end_rcvd_string[4] = "\"\r\n";
 80004f0:	2324      	movs	r3, #36	; 0x24
 80004f2:	18fb      	adds	r3, r7, r3
 80004f4:	4a3b      	ldr	r2, [pc, #236]	; (80005e4 <main+0x128>)
 80004f6:	601a      	str	r2, [r3, #0]
  char sp_buf[36];

  hal_nrf_get_address(HAL_NRF_PIPE0, addr);
 80004f8:	2434      	movs	r4, #52	; 0x34
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	0019      	movs	r1, r3
 80004fe:	2000      	movs	r0, #0
 8000500:	f004 fe6a 	bl	80051d8 <hal_nrf_get_address>
  sprintf(sp_buf, "P0 addr: %02x:%02x:%02x:%02x:%02x         \r\n", addr[0], addr[1], addr[2], addr[3], addr[4]);
 8000504:	0021      	movs	r1, r4
 8000506:	187b      	adds	r3, r7, r1
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	001d      	movs	r5, r3
 800050c:	187b      	adds	r3, r7, r1
 800050e:	785b      	ldrb	r3, [r3, #1]
 8000510:	001e      	movs	r6, r3
 8000512:	187b      	adds	r3, r7, r1
 8000514:	789b      	ldrb	r3, [r3, #2]
 8000516:	001a      	movs	r2, r3
 8000518:	187b      	adds	r3, r7, r1
 800051a:	78db      	ldrb	r3, [r3, #3]
 800051c:	001c      	movs	r4, r3
 800051e:	187b      	adds	r3, r7, r1
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	4931      	ldr	r1, [pc, #196]	; (80005e8 <main+0x12c>)
 8000524:	0038      	movs	r0, r7
 8000526:	9302      	str	r3, [sp, #8]
 8000528:	9401      	str	r4, [sp, #4]
 800052a:	9200      	str	r2, [sp, #0]
 800052c:	0033      	movs	r3, r6
 800052e:	002a      	movs	r2, r5
 8000530:	f004 ff44 	bl	80053bc <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*) sp_buf, sizeof(sp_buf), HAL_MAX_DELAY);
 8000534:	2301      	movs	r3, #1
 8000536:	425b      	negs	r3, r3
 8000538:	0039      	movs	r1, r7
 800053a:	482c      	ldr	r0, [pc, #176]	; (80005ec <main+0x130>)
 800053c:	2224      	movs	r2, #36	; 0x24
 800053e:	f003 f939 	bl	80037b4 <HAL_UART_Transmit>

  sprintf(sp_buf, "Tuned up, waiting for messages...\r\n");
 8000542:	4a2b      	ldr	r2, [pc, #172]	; (80005f0 <main+0x134>)
 8000544:	003b      	movs	r3, r7
 8000546:	0011      	movs	r1, r2
 8000548:	0018      	movs	r0, r3
 800054a:	f004 ff37 	bl	80053bc <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*) sp_buf, sizeof(sp_buf), HAL_MAX_DELAY);
 800054e:	2301      	movs	r3, #1
 8000550:	425b      	negs	r3, r3
 8000552:	0039      	movs	r1, r7
 8000554:	4825      	ldr	r0, [pc, #148]	; (80005ec <main+0x130>)
 8000556:	2224      	movs	r2, #36	; 0x24
 8000558:	f003 f92c 	bl	80037b4 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t irq_flg;
	  irq_flg = hal_nrf_get_clear_irq_flags();
 800055c:	253b      	movs	r5, #59	; 0x3b
 800055e:	197c      	adds	r4, r7, r5
 8000560:	f004 fe92 	bl	8005288 <hal_nrf_get_clear_irq_flags>
 8000564:	0003      	movs	r3, r0
 8000566:	7023      	strb	r3, [r4, #0]
	  if (irq_flg & (1U<<HAL_NRF_RX_DR))
 8000568:	197b      	adds	r3, r7, r5
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2240      	movs	r2, #64	; 0x40
 800056e:	4013      	ands	r3, r2
 8000570:	d025      	beq.n	80005be <main+0x102>
	  {
		  /* read RX FIFO of received messages */
		  while (!hal_nrf_rx_fifo_empty())
 8000572:	e01e      	b.n	80005b2 <main+0xf6>
		  {
			  hal_nrf_read_rx_payload(rx);
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <main+0x138>)
 8000576:	0018      	movs	r0, r3
 8000578:	f004 fed4 	bl	8005324 <hal_nrf_read_rx_payload>
			  if (rx[0]==0xAB)
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <main+0x138>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2bab      	cmp	r3, #171	; 0xab
 8000582:	d116      	bne.n	80005b2 <main+0xf6>
			  {
				  HAL_UART_Transmit(&huart2,(uint8_t*) rcvd_string, sizeof(rcvd_string), HAL_MAX_DELAY);
 8000584:	2301      	movs	r3, #1
 8000586:	425b      	negs	r3, r3
 8000588:	2228      	movs	r2, #40	; 0x28
 800058a:	18b9      	adds	r1, r7, r2
 800058c:	4817      	ldr	r0, [pc, #92]	; (80005ec <main+0x130>)
 800058e:	220c      	movs	r2, #12
 8000590:	f003 f910 	bl	80037b4 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart2, &rx[1], NRF_MAX_PL-1, HAL_MAX_DELAY);
 8000594:	2301      	movs	r3, #1
 8000596:	425b      	negs	r3, r3
 8000598:	4917      	ldr	r1, [pc, #92]	; (80005f8 <main+0x13c>)
 800059a:	4814      	ldr	r0, [pc, #80]	; (80005ec <main+0x130>)
 800059c:	221f      	movs	r2, #31
 800059e:	f003 f909 	bl	80037b4 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart2,(uint8_t*) end_rcvd_string, sizeof(end_rcvd_string), HAL_MAX_DELAY);
 80005a2:	2301      	movs	r3, #1
 80005a4:	425b      	negs	r3, r3
 80005a6:	2224      	movs	r2, #36	; 0x24
 80005a8:	18b9      	adds	r1, r7, r2
 80005aa:	4810      	ldr	r0, [pc, #64]	; (80005ec <main+0x130>)
 80005ac:	2204      	movs	r2, #4
 80005ae:	f003 f901 	bl	80037b4 <HAL_UART_Transmit>
		  while (!hal_nrf_rx_fifo_empty())
 80005b2:	f004 fea1 	bl	80052f8 <hal_nrf_rx_fifo_empty>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d0dc      	beq.n	8000574 <main+0xb8>
			  }
		  }
		  cnt = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (cnt >= 5000)
 80005be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005c0:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <main+0x140>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	dd04      	ble.n	80005d0 <main+0x114>
	{
		cnt = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		restart_rx();
 80005ca:	f000 fae5 	bl	8000b98 <restart_rx>
 80005ce:	e7c5      	b.n	800055c <main+0xa0>
	}
	else
	{
		HAL_Delay(1);
 80005d0:	2001      	movs	r0, #1
 80005d2:	f000 fd53 	bl	800107c <HAL_Delay>
		cnt++;
 80005d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d8:	3301      	adds	r3, #1
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  {
 80005dc:	e7be      	b.n	800055c <main+0xa0>
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	08005ce8 	.word	0x08005ce8
 80005e4:	000a0d22 	.word	0x000a0d22
 80005e8:	08005c94 	.word	0x08005c94
 80005ec:	20000160 	.word	0x20000160
 80005f0:	08005cc4 	.word	0x08005cc4
 80005f4:	200001e4 	.word	0x200001e4
 80005f8:	200001e5 	.word	0x200001e5
 80005fc:	00001387 	.word	0x00001387

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b09d      	sub	sp, #116	; 0x74
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	2438      	movs	r4, #56	; 0x38
 8000608:	193b      	adds	r3, r7, r4
 800060a:	0018      	movs	r0, r3
 800060c:	2338      	movs	r3, #56	; 0x38
 800060e:	001a      	movs	r2, r3
 8000610:	2100      	movs	r1, #0
 8000612:	f004 feca 	bl	80053aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000616:	2324      	movs	r3, #36	; 0x24
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	0018      	movs	r0, r3
 800061c:	2314      	movs	r3, #20
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f004 fec2 	bl	80053aa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000626:	003b      	movs	r3, r7
 8000628:	0018      	movs	r0, r3
 800062a:	2324      	movs	r3, #36	; 0x24
 800062c:	001a      	movs	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	f004 febb 	bl	80053aa <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <SystemClock_Config+0xec>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a2d      	ldr	r2, [pc, #180]	; (80006f0 <SystemClock_Config+0xf0>)
 800063a:	401a      	ands	r2, r3
 800063c:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <SystemClock_Config+0xec>)
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	0109      	lsls	r1, r1, #4
 8000642:	430a      	orrs	r2, r1
 8000644:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000646:	0021      	movs	r1, r4
 8000648:	187b      	adds	r3, r7, r1
 800064a:	220a      	movs	r2, #10
 800064c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2201      	movs	r2, #1
 8000652:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2210      	movs	r2, #16
 8000658:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2201      	movs	r2, #1
 800065e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2202      	movs	r2, #2
 8000664:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2200      	movs	r2, #0
 800066a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	0312      	lsls	r2, r2, #12
 8000672:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	0412      	lsls	r2, r2, #16
 800067a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	187b      	adds	r3, r7, r1
 800067e:	0018      	movs	r0, r3
 8000680:	f001 f848 	bl	8001714 <HAL_RCC_OscConfig>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000688:	f000 fab6 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	2124      	movs	r1, #36	; 0x24
 800068e:	187b      	adds	r3, r7, r1
 8000690:	220f      	movs	r2, #15
 8000692:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2203      	movs	r2, #3
 8000698:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2101      	movs	r1, #1
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 fc03 	bl	8001ebc <HAL_RCC_ClockConfig>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006ba:	f000 fa9d 	bl	8000bf8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 80006be:	003b      	movs	r3, r7
 80006c0:	2222      	movs	r2, #34	; 0x22
 80006c2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006c4:	003b      	movs	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006ca:	003b      	movs	r3, r7
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	0292      	lsls	r2, r2, #10
 80006d0:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d2:	003b      	movs	r3, r7
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 fe15 	bl	8002304 <HAL_RCCEx_PeriphCLKConfig>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80006de:	f000 fa8b 	bl	8000bf8 <Error_Handler>
  }
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b01d      	add	sp, #116	; 0x74
 80006e8:	bd90      	pop	{r4, r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40007000 	.word	0x40007000
 80006f0:	ffffe7ff 	.word	0xffffe7ff

080006f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b090      	sub	sp, #64	; 0x40
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006fa:	232c      	movs	r3, #44	; 0x2c
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	0018      	movs	r0, r3
 8000700:	2314      	movs	r3, #20
 8000702:	001a      	movs	r2, r3
 8000704:	2100      	movs	r1, #0
 8000706:	f004 fe50 	bl	80053aa <memset>
  RTC_DateTypeDef sDate = {0};
 800070a:	2328      	movs	r3, #40	; 0x28
 800070c:	18fb      	adds	r3, r7, r3
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000712:	003b      	movs	r3, r7
 8000714:	0018      	movs	r0, r3
 8000716:	2328      	movs	r3, #40	; 0x28
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f004 fe45 	bl	80053aa <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000720:	4b41      	ldr	r3, [pc, #260]	; (8000828 <MX_RTC_Init+0x134>)
 8000722:	4a42      	ldr	r2, [pc, #264]	; (800082c <MX_RTC_Init+0x138>)
 8000724:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000726:	4b40      	ldr	r3, [pc, #256]	; (8000828 <MX_RTC_Init+0x134>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 800072c:	4b3e      	ldr	r3, [pc, #248]	; (8000828 <MX_RTC_Init+0x134>)
 800072e:	221f      	movs	r2, #31
 8000730:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 8000732:	4b3d      	ldr	r3, [pc, #244]	; (8000828 <MX_RTC_Init+0x134>)
 8000734:	4a3e      	ldr	r2, [pc, #248]	; (8000830 <MX_RTC_Init+0x13c>)
 8000736:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000738:	4b3b      	ldr	r3, [pc, #236]	; (8000828 <MX_RTC_Init+0x134>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800073e:	4b3a      	ldr	r3, [pc, #232]	; (8000828 <MX_RTC_Init+0x134>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000744:	4b38      	ldr	r3, [pc, #224]	; (8000828 <MX_RTC_Init+0x134>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800074a:	4b37      	ldr	r3, [pc, #220]	; (8000828 <MX_RTC_Init+0x134>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000750:	4b35      	ldr	r3, [pc, #212]	; (8000828 <MX_RTC_Init+0x134>)
 8000752:	0018      	movs	r0, r3
 8000754:	f001 ff2c 	bl	80025b0 <HAL_RTC_Init>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 800075c:	f000 fa4c 	bl	8000bf8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000760:	212c      	movs	r1, #44	; 0x2c
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2200      	movs	r2, #0
 800076c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000780:	1879      	adds	r1, r7, r1
 8000782:	4b29      	ldr	r3, [pc, #164]	; (8000828 <MX_RTC_Init+0x134>)
 8000784:	2200      	movs	r2, #0
 8000786:	0018      	movs	r0, r3
 8000788:	f001 ffb0 	bl	80026ec <HAL_RTC_SetTime>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000790:	f000 fa32 	bl	8000bf8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000794:	2128      	movs	r1, #40	; 0x28
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2201      	movs	r2, #1
 800079a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2201      	movs	r2, #1
 80007a0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2201      	movs	r2, #1
 80007a6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80007ae:	1879      	adds	r1, r7, r1
 80007b0:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_RTC_Init+0x134>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	0018      	movs	r0, r3
 80007b6:	f002 f85d 	bl	8002874 <HAL_RTC_SetDate>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80007be:	f000 fa1b 	bl	8000bf8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80007c2:	003b      	movs	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80007c8:	003b      	movs	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80007ce:	003b      	movs	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80007d4:	003b      	movs	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007da:	003b      	movs	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007e0:	003b      	movs	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007e6:	003b      	movs	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80007ec:	003b      	movs	r3, r7
 80007ee:	22f0      	movs	r2, #240	; 0xf0
 80007f0:	0512      	lsls	r2, r2, #20
 80007f2:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007f4:	003b      	movs	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80007fa:	003b      	movs	r3, r7
 80007fc:	2220      	movs	r2, #32
 80007fe:	2101      	movs	r1, #1
 8000800:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000802:	003b      	movs	r3, r7
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800080a:	0039      	movs	r1, r7
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_RTC_Init+0x134>)
 800080e:	2200      	movs	r2, #0
 8000810:	0018      	movs	r0, r3
 8000812:	f002 f8dd 	bl	80029d0 <HAL_RTC_SetAlarm_IT>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 800081a:	f000 f9ed 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b010      	add	sp, #64	; 0x40
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	2000008c 	.word	0x2000008c
 800082c:	40002800 	.word	0x40002800
 8000830:	000003ff 	.word	0x000003ff

08000834 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_SPI1_Init+0x68>)
 800083a:	4a19      	ldr	r2, [pc, #100]	; (80008a0 <MX_SPI1_Init+0x6c>)
 800083c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_SPI1_Init+0x68>)
 8000840:	2282      	movs	r2, #130	; 0x82
 8000842:	0052      	lsls	r2, r2, #1
 8000844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_SPI1_Init+0x68>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_SPI1_Init+0x68>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_SPI1_Init+0x68>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_SPI1_Init+0x68>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_SPI1_Init+0x68>)
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	0092      	lsls	r2, r2, #2
 8000864:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MX_SPI1_Init+0x68>)
 8000868:	2220      	movs	r2, #32
 800086a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086c:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_SPI1_Init+0x68>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_SPI1_Init+0x68>)
 8000874:	2200      	movs	r2, #0
 8000876:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_SPI1_Init+0x68>)
 800087a:	2200      	movs	r2, #0
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_SPI1_Init+0x68>)
 8000880:	2207      	movs	r2, #7
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <MX_SPI1_Init+0x68>)
 8000886:	0018      	movs	r0, r3
 8000888:	f002 fac6 	bl	8002e18 <HAL_SPI_Init>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000890:	f000 f9b2 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	200000b0 	.word	0x200000b0
 80008a0:	40013000 	.word	0x40013000

080008a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_SPI2_Init+0x68>)
 80008aa:	4a19      	ldr	r2, [pc, #100]	; (8000910 <MX_SPI2_Init+0x6c>)
 80008ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_SPI2_Init+0x68>)
 80008b0:	2282      	movs	r2, #130	; 0x82
 80008b2:	0052      	lsls	r2, r2, #1
 80008b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_SPI2_Init+0x68>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_SPI2_Init+0x68>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_SPI2_Init+0x68>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c8:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_SPI2_Init+0x68>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_SPI2_Init+0x68>)
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	0092      	lsls	r2, r2, #2
 80008d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <MX_SPI2_Init+0x68>)
 80008d8:	2220      	movs	r2, #32
 80008da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_SPI2_Init+0x68>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <MX_SPI2_Init+0x68>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_SPI2_Init+0x68>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <MX_SPI2_Init+0x68>)
 80008f0:	2207      	movs	r2, #7
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <MX_SPI2_Init+0x68>)
 80008f6:	0018      	movs	r0, r3
 80008f8:	f002 fa8e 	bl	8002e18 <HAL_SPI_Init>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d001      	beq.n	8000904 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000900:	f000 f97a 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	20000108 	.word	0x20000108
 8000910:	40003800 	.word	0x40003800

08000914 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USART2_UART_Init+0x58>)
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <MX_USART2_UART_Init+0x5c>)
 800091c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000920:	22e1      	movs	r2, #225	; 0xe1
 8000922:	0252      	lsls	r2, r2, #9
 8000924:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_USART2_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART2_UART_Init+0x58>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART2_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000958:	0018      	movs	r0, r3
 800095a:	f002 fed7 	bl	800370c <HAL_UART_Init>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d001      	beq.n	8000966 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 f949 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000160 	.word	0x20000160
 8000970:	40004400 	.word	0x40004400

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b08b      	sub	sp, #44	; 0x2c
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	2414      	movs	r4, #20
 800097c:	193b      	adds	r3, r7, r4
 800097e:	0018      	movs	r0, r3
 8000980:	2314      	movs	r3, #20
 8000982:	001a      	movs	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	f004 fd10 	bl	80053aa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b65      	ldr	r3, [pc, #404]	; (8000b20 <MX_GPIO_Init+0x1ac>)
 800098c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800098e:	4b64      	ldr	r3, [pc, #400]	; (8000b20 <MX_GPIO_Init+0x1ac>)
 8000990:	2101      	movs	r1, #1
 8000992:	430a      	orrs	r2, r1
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
 8000996:	4b62      	ldr	r3, [pc, #392]	; (8000b20 <MX_GPIO_Init+0x1ac>)
 8000998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099a:	2201      	movs	r2, #1
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b5f      	ldr	r3, [pc, #380]	; (8000b20 <MX_GPIO_Init+0x1ac>)
 80009a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009a6:	4b5e      	ldr	r3, [pc, #376]	; (8000b20 <MX_GPIO_Init+0x1ac>)
 80009a8:	2102      	movs	r1, #2
 80009aa:	430a      	orrs	r2, r1
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ae:	4b5c      	ldr	r3, [pc, #368]	; (8000b20 <MX_GPIO_Init+0x1ac>)
 80009b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b2:	2202      	movs	r2, #2
 80009b4:	4013      	ands	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b59      	ldr	r3, [pc, #356]	; (8000b20 <MX_GPIO_Init+0x1ac>)
 80009bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009be:	4b58      	ldr	r3, [pc, #352]	; (8000b20 <MX_GPIO_Init+0x1ac>)
 80009c0:	2104      	movs	r1, #4
 80009c2:	430a      	orrs	r2, r1
 80009c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80009c6:	4b56      	ldr	r3, [pc, #344]	; (8000b20 <MX_GPIO_Init+0x1ac>)
 80009c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ca:	2204      	movs	r2, #4
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	4b53      	ldr	r3, [pc, #332]	; (8000b20 <MX_GPIO_Init+0x1ac>)
 80009d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009d6:	4b52      	ldr	r3, [pc, #328]	; (8000b20 <MX_GPIO_Init+0x1ac>)
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	430a      	orrs	r2, r1
 80009dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80009de:	4b50      	ldr	r3, [pc, #320]	; (8000b20 <MX_GPIO_Init+0x1ac>)
 80009e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	4013      	ands	r3, r2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin, GPIO_PIN_RESET);
 80009ea:	494e      	ldr	r1, [pc, #312]	; (8000b24 <MX_GPIO_Init+0x1b0>)
 80009ec:	23a0      	movs	r3, #160	; 0xa0
 80009ee:	05db      	lsls	r3, r3, #23
 80009f0:	2200      	movs	r2, #0
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 fe4a 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|SS_Pin|LED2_Pin|CE_Pin, GPIO_PIN_RESET);
 80009f8:	2387      	movs	r3, #135	; 0x87
 80009fa:	015b      	lsls	r3, r3, #5
 80009fc:	484a      	ldr	r0, [pc, #296]	; (8000b28 <MX_GPIO_Init+0x1b4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	0019      	movs	r1, r3
 8000a02:	f000 fe43 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 8000a06:	4b49      	ldr	r3, [pc, #292]	; (8000b2c <MX_GPIO_Init+0x1b8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2107      	movs	r1, #7
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f000 fe3d 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15_RESERVED_Pin PA12_RESERVED_Pin PA1_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin;
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <MX_GPIO_Init+0x1b0>)
 8000a16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2202      	movs	r2, #2
 8000a28:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	193a      	adds	r2, r7, r4
 8000a2c:	23a0      	movs	r3, #160	; 0xa0
 8000a2e:	05db      	lsls	r3, r3, #23
 8000a30:	0011      	movs	r1, r2
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fcac 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin SS_Pin LED2_Pin CE_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|SS_Pin|LED2_Pin|CE_Pin;
 8000a38:	0021      	movs	r1, r4
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2287      	movs	r2, #135	; 0x87
 8000a3e:	0152      	lsls	r2, r2, #5
 8000a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	000c      	movs	r4, r1
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	2201      	movs	r2, #1
 8000a48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	4a33      	ldr	r2, [pc, #204]	; (8000b28 <MX_GPIO_Init+0x1b4>)
 8000a5a:	0019      	movs	r1, r3
 8000a5c:	0010      	movs	r0, r2
 8000a5e:	f000 fc97 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_RESERVED_Pin PB1_RESERVED_Pin PB0_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB4_RESERVED_Pin|PB1_RESERVED_Pin|PB0_RESERVED_Pin;
 8000a62:	0021      	movs	r1, r4
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2213      	movs	r2, #19
 8000a68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2288      	movs	r2, #136	; 0x88
 8000a6e:	0352      	lsls	r2, r2, #13
 8000a70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a78:	000c      	movs	r4, r1
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	4a2a      	ldr	r2, [pc, #168]	; (8000b28 <MX_GPIO_Init+0x1b4>)
 8000a7e:	0019      	movs	r1, r3
 8000a80:	0010      	movs	r0, r2
 8000a82:	f000 fc85 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC13_RESERVED_Pin;
 8000a86:	0021      	movs	r1, r4
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	0192      	lsls	r2, r2, #6
 8000a8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2288      	movs	r2, #136	; 0x88
 8000a94:	0352      	lsls	r2, r2, #13
 8000a96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	000c      	movs	r4, r1
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PC13_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <MX_GPIO_Init+0x1b8>)
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	0010      	movs	r0, r2
 8000aa8:	f000 fc72 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1_RESERVED_Pin PC0_RESERVED_Pin PC2_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	2207      	movs	r2, #7
 8000ab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	4a19      	ldr	r2, [pc, #100]	; (8000b2c <MX_GPIO_Init+0x1b8>)
 8000ac8:	0019      	movs	r1, r3
 8000aca:	0010      	movs	r0, r2
 8000acc:	f000 fc60 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000ad0:	0021      	movs	r1, r4
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	0092      	lsls	r2, r2, #2
 8000ad8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2288      	movs	r2, #136	; 0x88
 8000ade:	0352      	lsls	r2, r2, #13
 8000ae0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	187a      	adds	r2, r7, r1
 8000aea:	23a0      	movs	r3, #160	; 0xa0
 8000aec:	05db      	lsls	r3, r3, #23
 8000aee:	0011      	movs	r1, r2
 8000af0:	0018      	movs	r0, r3
 8000af2:	f000 fc4d 	bl	8001390 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	2005      	movs	r0, #5
 8000afc:	f000 fb8e 	bl	800121c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000b00:	2005      	movs	r0, #5
 8000b02:	f000 fba0 	bl	8001246 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2007      	movs	r0, #7
 8000b0c:	f000 fb86 	bl	800121c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000b10:	2007      	movs	r0, #7
 8000b12:	f000 fb98 	bl	8001246 <HAL_NVIC_EnableIRQ>

}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b00b      	add	sp, #44	; 0x2c
 8000b1c:	bd90      	pop	{r4, r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	40021000 	.word	0x40021000
 8000b24:	00009002 	.word	0x00009002
 8000b28:	50000400 	.word	0x50000400
 8000b2c:	50000800 	.word	0x50000800

08000b30 <init_rx>:

/* USER CODE BEGIN 4 */
void init_rx()
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
    hal_nrf_flush_rx();
 8000b34:	f004 f872 	bl	8004c1c <hal_nrf_flush_rx>
    hal_nrf_flush_tx();
 8000b38:	f004 f894 	bl	8004c64 <hal_nrf_flush_tx>

    // clear all extra features for the purpose of this example
    hal_nrf_enable_dynamic_payload(false);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f004 f8df 	bl	8004d00 <hal_nrf_enable_dynamic_payload>
    hal_nrf_enable_ack_payload(false);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f004 f906 	bl	8004d54 <hal_nrf_enable_ack_payload>
    hal_nrf_enable_dynamic_ack(false);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f004 f92d 	bl	8004da8 <hal_nrf_enable_dynamic_ack>

    hal_nrf_set_rf_channel(CHANNEL);
 8000b4e:	2014      	movs	r0, #20
 8000b50:	f004 f954 	bl	8004dfc <hal_nrf_set_rf_channel>
    hal_nrf_set_datarate(HAL_NRF_1MBPS);
 8000b54:	2000      	movs	r0, #0
 8000b56:	f004 f995 	bl	8004e84 <hal_nrf_set_datarate>
    hal_nrf_set_crc_mode(HAL_NRF_CRC_16BIT);
 8000b5a:	2002      	movs	r0, #2
 8000b5c:	f004 f9d9 	bl	8004f12 <hal_nrf_set_crc_mode>

    // RX setup: use default pipe 0 address
    hal_nrf_set_operation_mode(HAL_NRF_PRX);
 8000b60:	2001      	movs	r0, #1
 8000b62:	f004 f8a3 	bl	8004cac <hal_nrf_set_operation_mode>

    hal_nrf_close_pipe(HAL_NRF_ALL);
 8000b66:	20ff      	movs	r0, #255	; 0xff
 8000b68:	f004 faa2 	bl	80050b0 <hal_nrf_close_pipe>
    hal_nrf_config_rx_pipe(HAL_NRF_PIPE0, NULL, true, NRF_MAX_PL);
 8000b6c:	2320      	movs	r3, #32
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2100      	movs	r1, #0
 8000b72:	2000      	movs	r0, #0
 8000b74:	f004 fb5a 	bl	800522c <hal_nrf_config_rx_pipe>

    // TX output power for auto ack
    hal_nrf_set_output_power(HAL_NRF_0DBM);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f004 f956 	bl	8004e2a <hal_nrf_set_output_power>
    chip_enable();
 8000b7e:	2380      	movs	r3, #128	; 0x80
 8000b80:	015b      	lsls	r3, r3, #5
 8000b82:	4804      	ldr	r0, [pc, #16]	; (8000b94 <init_rx+0x64>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	0019      	movs	r1, r3
 8000b88:	f000 fd80 	bl	800168c <HAL_GPIO_WritePin>
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	50000400 	.word	0x50000400

08000b98 <restart_rx>:

void restart_rx()
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	chip_disable();
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	015b      	lsls	r3, r3, #5
 8000ba0:	4813      	ldr	r0, [pc, #76]	; (8000bf0 <restart_rx+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	f000 fd71 	bl	800168c <HAL_GPIO_WritePin>
	hal_nrf_init(&hspi2, HAL_MAX_DELAY);
 8000baa:	2301      	movs	r3, #1
 8000bac:	425a      	negs	r2, r3
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <restart_rx+0x5c>)
 8000bb0:	0011      	movs	r1, r2
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f003 fea8 	bl	8004908 <hal_nrf_init>

	hal_nrf_set_power_mode(HAL_NRF_PWR_DOWN);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f004 fb73 	bl	80052a4 <hal_nrf_set_power_mode>
	HAL_Delay(1);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f000 fa5c 	bl	800107c <HAL_Delay>

	hal_nrf_set_power_mode(HAL_NRF_PWR_UP);
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f004 fb6d 	bl	80052a4 <hal_nrf_set_power_mode>
	HAL_Delay(2);
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f000 fa56 	bl	800107c <HAL_Delay>

	init_rx();
 8000bd0:	f7ff ffae 	bl	8000b30 <init_rx>

	chip_enable();
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	015b      	lsls	r3, r3, #5
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <restart_rx+0x58>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	0019      	movs	r1, r3
 8000bde:	f000 fd55 	bl	800168c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000be2:	2001      	movs	r0, #1
 8000be4:	f000 fa4a 	bl	800107c <HAL_Delay>
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	50000400 	.word	0x50000400
 8000bf4:	20000108 	.word	0x20000108

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <HAL_MspInit+0x24>)
 8000c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x24>)
 8000c0e:	2101      	movs	r1, #1
 8000c10:	430a      	orrs	r2, r1
 8000c12:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <HAL_MspInit+0x24>)
 8000c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <HAL_MspInit+0x24>)
 8000c1a:	2180      	movs	r1, #128	; 0x80
 8000c1c:	0549      	lsls	r1, r1, #21
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_RTC_MspInit+0x38>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d10e      	bne.n	8000c5c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_RTC_MspInit+0x3c>)
 8000c40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_RTC_MspInit+0x3c>)
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	02c9      	lsls	r1, r1, #11
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2002      	movs	r0, #2
 8000c52:	f000 fae3 	bl	800121c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000c56:	2002      	movs	r0, #2
 8000c58:	f000 faf5 	bl	8001246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b002      	add	sp, #8
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40002800 	.word	0x40002800
 8000c68:	40021000 	.word	0x40021000

08000c6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b08b      	sub	sp, #44	; 0x2c
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	2414      	movs	r4, #20
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	0018      	movs	r0, r3
 8000c7a:	2314      	movs	r3, #20
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	f004 fb93 	bl	80053aa <memset>
  if(hspi->Instance==SPI1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a40      	ldr	r2, [pc, #256]	; (8000d8c <HAL_SPI_MspInit+0x120>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d14b      	bne.n	8000d26 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c8e:	4b40      	ldr	r3, [pc, #256]	; (8000d90 <HAL_SPI_MspInit+0x124>)
 8000c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c92:	4b3f      	ldr	r3, [pc, #252]	; (8000d90 <HAL_SPI_MspInit+0x124>)
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	0149      	lsls	r1, r1, #5
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	4b3c      	ldr	r3, [pc, #240]	; (8000d90 <HAL_SPI_MspInit+0x124>)
 8000c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ca0:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <HAL_SPI_MspInit+0x124>)
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ca8:	4b39      	ldr	r3, [pc, #228]	; (8000d90 <HAL_SPI_MspInit+0x124>)
 8000caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cac:	2202      	movs	r2, #2
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <HAL_SPI_MspInit+0x124>)
 8000cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cb8:	4b35      	ldr	r3, [pc, #212]	; (8000d90 <HAL_SPI_MspInit+0x124>)
 8000cba:	2101      	movs	r1, #1
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cc0:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <HAL_SPI_MspInit+0x124>)
 8000cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = PB3_RESERVED_Pin;
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	2208      	movs	r2, #8
 8000cd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PB3_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	4a29      	ldr	r2, [pc, #164]	; (8000d94 <HAL_SPI_MspInit+0x128>)
 8000cee:	0019      	movs	r1, r3
 8000cf0:	0010      	movs	r0, r2
 8000cf2:	f000 fb4d 	bl	8001390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin;
 8000cf6:	0021      	movs	r1, r4
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	22c0      	movs	r2, #192	; 0xc0
 8000cfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2202      	movs	r2, #2
 8000d02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	187a      	adds	r2, r7, r1
 8000d18:	23a0      	movs	r3, #160	; 0xa0
 8000d1a:	05db      	lsls	r3, r3, #23
 8000d1c:	0011      	movs	r1, r2
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f000 fb36 	bl	8001390 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d24:	e02e      	b.n	8000d84 <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI2)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <HAL_SPI_MspInit+0x12c>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d129      	bne.n	8000d84 <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <HAL_SPI_MspInit+0x124>)
 8000d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_SPI_MspInit+0x124>)
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	01c9      	lsls	r1, r1, #7
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_SPI_MspInit+0x124>)
 8000d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <HAL_SPI_MspInit+0x124>)
 8000d44:	2102      	movs	r1, #2
 8000d46:	430a      	orrs	r2, r1
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_SPI_MspInit+0x124>)
 8000d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4e:	2202      	movs	r2, #2
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13;
 8000d56:	2114      	movs	r1, #20
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	22e0      	movs	r2, #224	; 0xe0
 8000d5c:	0212      	lsls	r2, r2, #8
 8000d5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2202      	movs	r2, #2
 8000d64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_SPI_MspInit+0x128>)
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	0010      	movs	r0, r2
 8000d80:	f000 fb06 	bl	8001390 <HAL_GPIO_Init>
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b00b      	add	sp, #44	; 0x2c
 8000d8a:	bd90      	pop	{r4, r7, pc}
 8000d8c:	40013000 	.word	0x40013000
 8000d90:	40021000 	.word	0x40021000
 8000d94:	50000400 	.word	0x50000400
 8000d98:	40003800 	.word	0x40003800

08000d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	240c      	movs	r4, #12
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	0018      	movs	r0, r3
 8000daa:	2314      	movs	r3, #20
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f004 fafb 	bl	80053aa <memset>
  if(huart->Instance==USART2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a1c      	ldr	r2, [pc, #112]	; (8000e2c <HAL_UART_MspInit+0x90>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d131      	bne.n	8000e22 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <HAL_UART_MspInit+0x94>)
 8000dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_UART_MspInit+0x94>)
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	0289      	lsls	r1, r1, #10
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_UART_MspInit+0x94>)
 8000dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_UART_MspInit+0x94>)
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_UART_MspInit+0x94>)
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4013      	ands	r3, r2
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000de4:	0021      	movs	r1, r4
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	220c      	movs	r2, #12
 8000dea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2202      	movs	r2, #2
 8000df0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2204      	movs	r2, #4
 8000e02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	187a      	adds	r2, r7, r1
 8000e06:	23a0      	movs	r3, #160	; 0xa0
 8000e08:	05db      	lsls	r3, r3, #23
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f000 fabf 	bl	8001390 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	201c      	movs	r0, #28
 8000e18:	f000 fa00 	bl	800121c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e1c:	201c      	movs	r0, #28
 8000e1e:	f000 fa12 	bl	8001246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b009      	add	sp, #36	; 0x24
 8000e28:	bd90      	pop	{r4, r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	40004400 	.word	0x40004400
 8000e30:	40021000 	.word	0x40021000

08000e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <NMI_Handler+0x4>

08000e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <HardFault_Handler+0x4>

08000e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e58:	f000 f8f4 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <RTC_IRQHandler+0x14>)
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f001 fefc 	bl	8002c68 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	2000008c 	.word	0x2000008c

08000e7c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_RESERVED_Pin);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f000 fc21 	bl	80016c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_RESERVED_Pin);
 8000e86:	2002      	movs	r0, #2
 8000e88:	f000 fc1e 	bl	80016c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB4_RESERVED_Pin);
 8000e96:	2010      	movs	r0, #16
 8000e98:	f000 fc16 	bl	80016c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f000 fc11 	bl	80016c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PC13_RESERVED_Pin);
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	019b      	lsls	r3, r3, #6
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 fc0c 	bl	80016c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <USART2_IRQHandler+0x14>)
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f002 fd20 	bl	8003904 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	20000160 	.word	0x20000160

08000ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed8:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <_sbrk+0x5c>)
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <_sbrk+0x60>)
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <_sbrk+0x64>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <_sbrk+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	18d3      	adds	r3, r2, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d207      	bcs.n	8000f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f00:	f004 fa20 	bl	8005344 <__errno>
 8000f04:	0003      	movs	r3, r0
 8000f06:	220c      	movs	r2, #12
 8000f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	425b      	negs	r3, r3
 8000f0e:	e009      	b.n	8000f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	18d2      	adds	r2, r2, r3
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <_sbrk+0x64>)
 8000f20:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	0018      	movs	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b006      	add	sp, #24
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20005000 	.word	0x20005000
 8000f30:	00000400 	.word	0x00000400
 8000f34:	20000204 	.word	0x20000204
 8000f38:	20000228 	.word	0x20000228

08000f3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000f4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4e:	490e      	ldr	r1, [pc, #56]	; (8000f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <LoopForever+0xe>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f64:	4c0b      	ldr	r4, [pc, #44]	; (8000f94 <LoopForever+0x16>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f72:	f7ff ffe3 	bl	8000f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f004 f9eb 	bl	8005350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f7ff fa9f 	bl	80004bc <main>

08000f7e <LoopForever>:

LoopForever:
    b LoopForever
 8000f7e:	e7fe      	b.n	8000f7e <LoopForever>
   ldr   r0, =_estack
 8000f80:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f8c:	08005da4 	.word	0x08005da4
  ldr r2, =_sbss
 8000f90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f94:	20000224 	.word	0x20000224

08000f98 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_COMP_IRQHandler>
	...

08000f9c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x3c>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_Init+0x3c>)
 8000fae:	2140      	movs	r1, #64	; 0x40
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f000 f811 	bl	8000fdc <HAL_InitTick>
 8000fba:	1e03      	subs	r3, r0, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
 8000fc4:	e001      	b.n	8000fca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fc6:	f7ff fe1d 	bl	8000c04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	781b      	ldrb	r3, [r3, #0]
}
 8000fce:	0018      	movs	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	40022000 	.word	0x40022000

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_InitTick+0x5c>)
 8000fe6:	681c      	ldr	r4, [r3, #0]
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_InitTick+0x60>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	0019      	movs	r1, r3
 8000fee:	23fa      	movs	r3, #250	; 0xfa
 8000ff0:	0098      	lsls	r0, r3, #2
 8000ff2:	f7ff f893 	bl	800011c <__udivsi3>
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	0020      	movs	r0, r4
 8000ffc:	f7ff f88e 	bl	800011c <__udivsi3>
 8001000:	0003      	movs	r3, r0
 8001002:	0018      	movs	r0, r3
 8001004:	f000 f92f 	bl	8001266 <HAL_SYSTICK_Config>
 8001008:	1e03      	subs	r3, r0, #0
 800100a:	d001      	beq.n	8001010 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e00f      	b.n	8001030 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b03      	cmp	r3, #3
 8001014:	d80b      	bhi.n	800102e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	2301      	movs	r3, #1
 800101a:	425b      	negs	r3, r3
 800101c:	2200      	movs	r2, #0
 800101e:	0018      	movs	r0, r3
 8001020:	f000 f8fc 	bl	800121c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_InitTick+0x64>)
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b003      	add	sp, #12
 8001036:	bd90      	pop	{r4, r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_IncTick+0x1c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	001a      	movs	r2, r3
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x20>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	18d2      	adds	r2, r2, r3
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_IncTick+0x20>)
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	20000008 	.word	0x20000008
 8001064:	20000208 	.word	0x20000208

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b02      	ldr	r3, [pc, #8]	; (8001078 <HAL_GetTick+0x10>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	0018      	movs	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	20000208 	.word	0x20000208

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff fff0 	bl	8001068 <HAL_GetTick>
 8001088:	0003      	movs	r3, r0
 800108a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_Delay+0x44>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	001a      	movs	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	189b      	adds	r3, r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	f7ff ffe0 	bl	8001068 <HAL_GetTick>
 80010a8:	0002      	movs	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b004      	add	sp, #16
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	20000008 	.word	0x20000008

080010c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	0002      	movs	r2, r0
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b7f      	cmp	r3, #127	; 0x7f
 80010d6:	d809      	bhi.n	80010ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	001a      	movs	r2, r3
 80010de:	231f      	movs	r3, #31
 80010e0:	401a      	ands	r2, r3
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_EnableIRQ+0x30>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	4091      	lsls	r1, r2
 80010e8:	000a      	movs	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]
  }
}
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b002      	add	sp, #8
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	e000e100 	.word	0xe000e100

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	0002      	movs	r2, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b7f      	cmp	r3, #127	; 0x7f
 800110c:	d828      	bhi.n	8001160 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800110e:	4a2f      	ldr	r2, [pc, #188]	; (80011cc <__NVIC_SetPriority+0xd4>)
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b25b      	sxtb	r3, r3
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	33c0      	adds	r3, #192	; 0xc0
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	589b      	ldr	r3, [r3, r2]
 800111e:	1dfa      	adds	r2, r7, #7
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	0011      	movs	r1, r2
 8001124:	2203      	movs	r2, #3
 8001126:	400a      	ands	r2, r1
 8001128:	00d2      	lsls	r2, r2, #3
 800112a:	21ff      	movs	r1, #255	; 0xff
 800112c:	4091      	lsls	r1, r2
 800112e:	000a      	movs	r2, r1
 8001130:	43d2      	mvns	r2, r2
 8001132:	401a      	ands	r2, r3
 8001134:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	019b      	lsls	r3, r3, #6
 800113a:	22ff      	movs	r2, #255	; 0xff
 800113c:	401a      	ands	r2, r3
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	0018      	movs	r0, r3
 8001144:	2303      	movs	r3, #3
 8001146:	4003      	ands	r3, r0
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800114c:	481f      	ldr	r0, [pc, #124]	; (80011cc <__NVIC_SetPriority+0xd4>)
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	b25b      	sxtb	r3, r3
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	430a      	orrs	r2, r1
 8001158:	33c0      	adds	r3, #192	; 0xc0
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800115e:	e031      	b.n	80011c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <__NVIC_SetPriority+0xd8>)
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	0019      	movs	r1, r3
 8001168:	230f      	movs	r3, #15
 800116a:	400b      	ands	r3, r1
 800116c:	3b08      	subs	r3, #8
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3306      	adds	r3, #6
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	18d3      	adds	r3, r2, r3
 8001176:	3304      	adds	r3, #4
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	1dfa      	adds	r2, r7, #7
 800117c:	7812      	ldrb	r2, [r2, #0]
 800117e:	0011      	movs	r1, r2
 8001180:	2203      	movs	r2, #3
 8001182:	400a      	ands	r2, r1
 8001184:	00d2      	lsls	r2, r2, #3
 8001186:	21ff      	movs	r1, #255	; 0xff
 8001188:	4091      	lsls	r1, r2
 800118a:	000a      	movs	r2, r1
 800118c:	43d2      	mvns	r2, r2
 800118e:	401a      	ands	r2, r3
 8001190:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	019b      	lsls	r3, r3, #6
 8001196:	22ff      	movs	r2, #255	; 0xff
 8001198:	401a      	ands	r2, r3
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	0018      	movs	r0, r3
 80011a0:	2303      	movs	r3, #3
 80011a2:	4003      	ands	r3, r0
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a8:	4809      	ldr	r0, [pc, #36]	; (80011d0 <__NVIC_SetPriority+0xd8>)
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	001c      	movs	r4, r3
 80011b0:	230f      	movs	r3, #15
 80011b2:	4023      	ands	r3, r4
 80011b4:	3b08      	subs	r3, #8
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	430a      	orrs	r2, r1
 80011ba:	3306      	adds	r3, #6
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	18c3      	adds	r3, r0, r3
 80011c0:	3304      	adds	r3, #4
 80011c2:	601a      	str	r2, [r3, #0]
}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b003      	add	sp, #12
 80011ca:	bd90      	pop	{r4, r7, pc}
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	1e5a      	subs	r2, r3, #1
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	045b      	lsls	r3, r3, #17
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d301      	bcc.n	80011ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e8:	2301      	movs	r3, #1
 80011ea:	e010      	b.n	800120e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <SysTick_Config+0x44>)
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	3a01      	subs	r2, #1
 80011f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f4:	2301      	movs	r3, #1
 80011f6:	425b      	negs	r3, r3
 80011f8:	2103      	movs	r1, #3
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff ff7c 	bl	80010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SysTick_Config+0x44>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x44>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	0018      	movs	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	210f      	movs	r1, #15
 8001228:	187b      	adds	r3, r7, r1
 800122a:	1c02      	adds	r2, r0, #0
 800122c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	187b      	adds	r3, r7, r1
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b25b      	sxtb	r3, r3
 8001236:	0011      	movs	r1, r2
 8001238:	0018      	movs	r0, r3
 800123a:	f7ff ff5d 	bl	80010f8 <__NVIC_SetPriority>
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b004      	add	sp, #16
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	0002      	movs	r2, r0
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b25b      	sxtb	r3, r3
 8001258:	0018      	movs	r0, r3
 800125a:	f7ff ff33 	bl	80010c4 <__NVIC_EnableIRQ>
}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	46bd      	mov	sp, r7
 8001262:	b002      	add	sp, #8
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff ffaf 	bl	80011d4 <SysTick_Config>
 8001276:	0003      	movs	r3, r0
}
 8001278:	0018      	movs	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	b002      	add	sp, #8
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001288:	230f      	movs	r3, #15
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2225      	movs	r2, #37	; 0x25
 8001294:	5c9b      	ldrb	r3, [r3, r2]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d008      	beq.n	80012ae <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2204      	movs	r2, #4
 80012a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2224      	movs	r2, #36	; 0x24
 80012a6:	2100      	movs	r1, #0
 80012a8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e024      	b.n	80012f8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	210e      	movs	r1, #14
 80012ba:	438a      	bics	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2101      	movs	r1, #1
 80012ca:	438a      	bics	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	221c      	movs	r2, #28
 80012d4:	401a      	ands	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	2101      	movs	r1, #1
 80012dc:	4091      	lsls	r1, r2
 80012de:	000a      	movs	r2, r1
 80012e0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2225      	movs	r2, #37	; 0x25
 80012e6:	2101      	movs	r1, #1
 80012e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2224      	movs	r2, #36	; 0x24
 80012ee:	2100      	movs	r1, #0
 80012f0:	5499      	strb	r1, [r3, r2]

    return status;
 80012f2:	230f      	movs	r3, #15
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b004      	add	sp, #16
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001308:	210f      	movs	r1, #15
 800130a:	187b      	adds	r3, r7, r1
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2225      	movs	r2, #37	; 0x25
 8001314:	5c9b      	ldrb	r3, [r3, r2]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d006      	beq.n	800132a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2204      	movs	r2, #4
 8001320:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001322:	187b      	adds	r3, r7, r1
 8001324:	2201      	movs	r2, #1
 8001326:	701a      	strb	r2, [r3, #0]
 8001328:	e02a      	b.n	8001380 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	210e      	movs	r1, #14
 8001336:	438a      	bics	r2, r1
 8001338:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2101      	movs	r1, #1
 8001346:	438a      	bics	r2, r1
 8001348:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	221c      	movs	r2, #28
 8001350:	401a      	ands	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	2101      	movs	r1, #1
 8001358:	4091      	lsls	r1, r2
 800135a:	000a      	movs	r2, r1
 800135c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2225      	movs	r2, #37	; 0x25
 8001362:	2101      	movs	r1, #1
 8001364:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2224      	movs	r2, #36	; 0x24
 800136a:	2100      	movs	r1, #0
 800136c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001372:	2b00      	cmp	r3, #0
 8001374:	d004      	beq.n	8001380 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	0010      	movs	r0, r2
 800137e:	4798      	blx	r3
    }
  }
  return status;
 8001380:	230f      	movs	r3, #15
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	781b      	ldrb	r3, [r3, #0]
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b004      	add	sp, #16
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80013a6:	e155      	b.n	8001654 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2101      	movs	r1, #1
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	4091      	lsls	r1, r2
 80013b2:	000a      	movs	r2, r1
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d100      	bne.n	80013c0 <HAL_GPIO_Init+0x30>
 80013be:	e146      	b.n	800164e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2203      	movs	r2, #3
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d005      	beq.n	80013d8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2203      	movs	r2, #3
 80013d2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d130      	bne.n	800143a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	409a      	lsls	r2, r3
 80013e6:	0013      	movs	r3, r2
 80013e8:	43da      	mvns	r2, r3
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	409a      	lsls	r2, r3
 80013fa:	0013      	movs	r3, r2
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800140e:	2201      	movs	r2, #1
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	43da      	mvns	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	2201      	movs	r2, #1
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
 800142c:	0013      	movs	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2203      	movs	r2, #3
 8001440:	4013      	ands	r3, r2
 8001442:	2b03      	cmp	r3, #3
 8001444:	d017      	beq.n	8001476 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	409a      	lsls	r2, r3
 8001454:	0013      	movs	r3, r2
 8001456:	43da      	mvns	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	409a      	lsls	r2, r3
 8001468:	0013      	movs	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2203      	movs	r2, #3
 800147c:	4013      	ands	r3, r2
 800147e:	2b02      	cmp	r3, #2
 8001480:	d123      	bne.n	80014ca <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	58d3      	ldr	r3, [r2, r3]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	2207      	movs	r2, #7
 8001494:	4013      	ands	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	409a      	lsls	r2, r3
 800149c:	0013      	movs	r3, r2
 800149e:	43da      	mvns	r2, r3
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2107      	movs	r1, #7
 80014ae:	400b      	ands	r3, r1
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	409a      	lsls	r2, r3
 80014b4:	0013      	movs	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	6939      	ldr	r1, [r7, #16]
 80014c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2203      	movs	r2, #3
 80014d6:	409a      	lsls	r2, r3
 80014d8:	0013      	movs	r3, r2
 80014da:	43da      	mvns	r2, r3
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2203      	movs	r2, #3
 80014e8:	401a      	ands	r2, r3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	409a      	lsls	r2, r3
 80014f0:	0013      	movs	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	23c0      	movs	r3, #192	; 0xc0
 8001504:	029b      	lsls	r3, r3, #10
 8001506:	4013      	ands	r3, r2
 8001508:	d100      	bne.n	800150c <HAL_GPIO_Init+0x17c>
 800150a:	e0a0      	b.n	800164e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150c:	4b57      	ldr	r3, [pc, #348]	; (800166c <HAL_GPIO_Init+0x2dc>)
 800150e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001510:	4b56      	ldr	r3, [pc, #344]	; (800166c <HAL_GPIO_Init+0x2dc>)
 8001512:	2101      	movs	r1, #1
 8001514:	430a      	orrs	r2, r1
 8001516:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001518:	4a55      	ldr	r2, [pc, #340]	; (8001670 <HAL_GPIO_Init+0x2e0>)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	089b      	lsrs	r3, r3, #2
 800151e:	3302      	adds	r3, #2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	589b      	ldr	r3, [r3, r2]
 8001524:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2203      	movs	r2, #3
 800152a:	4013      	ands	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	220f      	movs	r2, #15
 8001530:	409a      	lsls	r2, r3
 8001532:	0013      	movs	r3, r2
 8001534:	43da      	mvns	r2, r3
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	23a0      	movs	r3, #160	; 0xa0
 8001540:	05db      	lsls	r3, r3, #23
 8001542:	429a      	cmp	r2, r3
 8001544:	d01f      	beq.n	8001586 <HAL_GPIO_Init+0x1f6>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4a      	ldr	r2, [pc, #296]	; (8001674 <HAL_GPIO_Init+0x2e4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d019      	beq.n	8001582 <HAL_GPIO_Init+0x1f2>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a49      	ldr	r2, [pc, #292]	; (8001678 <HAL_GPIO_Init+0x2e8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0x1ee>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a48      	ldr	r2, [pc, #288]	; (800167c <HAL_GPIO_Init+0x2ec>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00d      	beq.n	800157a <HAL_GPIO_Init+0x1ea>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a47      	ldr	r2, [pc, #284]	; (8001680 <HAL_GPIO_Init+0x2f0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x1e6>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a46      	ldr	r2, [pc, #280]	; (8001684 <HAL_GPIO_Init+0x2f4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_GPIO_Init+0x1e2>
 800156e:	2305      	movs	r3, #5
 8001570:	e00a      	b.n	8001588 <HAL_GPIO_Init+0x1f8>
 8001572:	2306      	movs	r3, #6
 8001574:	e008      	b.n	8001588 <HAL_GPIO_Init+0x1f8>
 8001576:	2304      	movs	r3, #4
 8001578:	e006      	b.n	8001588 <HAL_GPIO_Init+0x1f8>
 800157a:	2303      	movs	r3, #3
 800157c:	e004      	b.n	8001588 <HAL_GPIO_Init+0x1f8>
 800157e:	2302      	movs	r3, #2
 8001580:	e002      	b.n	8001588 <HAL_GPIO_Init+0x1f8>
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <HAL_GPIO_Init+0x1f8>
 8001586:	2300      	movs	r3, #0
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	2103      	movs	r1, #3
 800158c:	400a      	ands	r2, r1
 800158e:	0092      	lsls	r2, r2, #2
 8001590:	4093      	lsls	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001598:	4935      	ldr	r1, [pc, #212]	; (8001670 <HAL_GPIO_Init+0x2e0>)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	089b      	lsrs	r3, r3, #2
 800159e:	3302      	adds	r3, #2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a6:	4b38      	ldr	r3, [pc, #224]	; (8001688 <HAL_GPIO_Init+0x2f8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	43da      	mvns	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	025b      	lsls	r3, r3, #9
 80015be:	4013      	ands	r3, r2
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015ca:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <HAL_GPIO_Init+0x2f8>)
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80015d0:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <HAL_GPIO_Init+0x2f8>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	43da      	mvns	r2, r3
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	029b      	lsls	r3, r3, #10
 80015e8:	4013      	ands	r3, r2
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015f4:	4b24      	ldr	r3, [pc, #144]	; (8001688 <HAL_GPIO_Init+0x2f8>)
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <HAL_GPIO_Init+0x2f8>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43da      	mvns	r2, r3
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	035b      	lsls	r3, r3, #13
 8001612:	4013      	ands	r3, r2
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800161e:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_GPIO_Init+0x2f8>)
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_GPIO_Init+0x2f8>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43da      	mvns	r2, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	039b      	lsls	r3, r3, #14
 800163c:	4013      	ands	r3, r2
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_GPIO_Init+0x2f8>)
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	40da      	lsrs	r2, r3
 800165c:	1e13      	subs	r3, r2, #0
 800165e:	d000      	beq.n	8001662 <HAL_GPIO_Init+0x2d2>
 8001660:	e6a2      	b.n	80013a8 <HAL_GPIO_Init+0x18>
  }
}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b006      	add	sp, #24
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40021000 	.word	0x40021000
 8001670:	40010000 	.word	0x40010000
 8001674:	50000400 	.word	0x50000400
 8001678:	50000800 	.word	0x50000800
 800167c:	50000c00 	.word	0x50000c00
 8001680:	50001000 	.word	0x50001000
 8001684:	50001c00 	.word	0x50001c00
 8001688:	40010400 	.word	0x40010400

0800168c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	0008      	movs	r0, r1
 8001696:	0011      	movs	r1, r2
 8001698:	1cbb      	adds	r3, r7, #2
 800169a:	1c02      	adds	r2, r0, #0
 800169c:	801a      	strh	r2, [r3, #0]
 800169e:	1c7b      	adds	r3, r7, #1
 80016a0:	1c0a      	adds	r2, r1, #0
 80016a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016a4:	1c7b      	adds	r3, r7, #1
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d004      	beq.n	80016b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ac:	1cbb      	adds	r3, r7, #2
 80016ae:	881a      	ldrh	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80016b4:	e003      	b.n	80016be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80016b6:	1cbb      	adds	r3, r7, #2
 80016b8:	881a      	ldrh	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b002      	add	sp, #8
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	0002      	movs	r2, r0
 80016d0:	1dbb      	adds	r3, r7, #6
 80016d2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	1dba      	adds	r2, r7, #6
 80016da:	8812      	ldrh	r2, [r2, #0]
 80016dc:	4013      	ands	r3, r2
 80016de:	d008      	beq.n	80016f2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80016e2:	1dba      	adds	r2, r7, #6
 80016e4:	8812      	ldrh	r2, [r2, #0]
 80016e6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016e8:	1dbb      	adds	r3, r7, #6
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	0018      	movs	r0, r3
 80016ee:	f000 f807 	bl	8001700 <HAL_GPIO_EXTI_Callback>
  }
}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b002      	add	sp, #8
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	40010400 	.word	0x40010400

08001700 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	0002      	movs	r2, r0
 8001708:	1dbb      	adds	r3, r7, #6
 800170a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800170c:	46c0      	nop			; (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001714:	b5b0      	push	{r4, r5, r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d102      	bne.n	8001728 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	f000 fbbf 	bl	8001ea6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001728:	4bc9      	ldr	r3, [pc, #804]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	220c      	movs	r2, #12
 800172e:	4013      	ands	r3, r2
 8001730:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001732:	4bc7      	ldr	r3, [pc, #796]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	025b      	lsls	r3, r3, #9
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2201      	movs	r2, #1
 8001744:	4013      	ands	r3, r2
 8001746:	d100      	bne.n	800174a <HAL_RCC_OscConfig+0x36>
 8001748:	e07e      	b.n	8001848 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	2b08      	cmp	r3, #8
 800174e:	d007      	beq.n	8001760 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	2b0c      	cmp	r3, #12
 8001754:	d112      	bne.n	800177c <HAL_RCC_OscConfig+0x68>
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	025b      	lsls	r3, r3, #9
 800175c:	429a      	cmp	r2, r3
 800175e:	d10d      	bne.n	800177c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	4bbb      	ldr	r3, [pc, #748]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	029b      	lsls	r3, r3, #10
 8001768:	4013      	ands	r3, r2
 800176a:	d100      	bne.n	800176e <HAL_RCC_OscConfig+0x5a>
 800176c:	e06b      	b.n	8001846 <HAL_RCC_OscConfig+0x132>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d167      	bne.n	8001846 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	f000 fb95 	bl	8001ea6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	025b      	lsls	r3, r3, #9
 8001784:	429a      	cmp	r2, r3
 8001786:	d107      	bne.n	8001798 <HAL_RCC_OscConfig+0x84>
 8001788:	4bb1      	ldr	r3, [pc, #708]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4bb0      	ldr	r3, [pc, #704]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	0249      	lsls	r1, r1, #9
 8001792:	430a      	orrs	r2, r1
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	e027      	b.n	80017e8 <HAL_RCC_OscConfig+0xd4>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	23a0      	movs	r3, #160	; 0xa0
 800179e:	02db      	lsls	r3, r3, #11
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d10e      	bne.n	80017c2 <HAL_RCC_OscConfig+0xae>
 80017a4:	4baa      	ldr	r3, [pc, #680]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4ba9      	ldr	r3, [pc, #676]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	02c9      	lsls	r1, r1, #11
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	4ba7      	ldr	r3, [pc, #668]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4ba6      	ldr	r3, [pc, #664]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	0249      	lsls	r1, r1, #9
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e012      	b.n	80017e8 <HAL_RCC_OscConfig+0xd4>
 80017c2:	4ba3      	ldr	r3, [pc, #652]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4ba2      	ldr	r3, [pc, #648]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80017c8:	49a2      	ldr	r1, [pc, #648]	; (8001a54 <HAL_RCC_OscConfig+0x340>)
 80017ca:	400a      	ands	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	4ba0      	ldr	r3, [pc, #640]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	025b      	lsls	r3, r3, #9
 80017d6:	4013      	ands	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4b9c      	ldr	r3, [pc, #624]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b9b      	ldr	r3, [pc, #620]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80017e2:	499d      	ldr	r1, [pc, #628]	; (8001a58 <HAL_RCC_OscConfig+0x344>)
 80017e4:	400a      	ands	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d015      	beq.n	800181c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fc3a 	bl	8001068 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017f8:	e009      	b.n	800180e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017fa:	f7ff fc35 	bl	8001068 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b64      	cmp	r3, #100	; 0x64
 8001806:	d902      	bls.n	800180e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	f000 fb4c 	bl	8001ea6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800180e:	4b90      	ldr	r3, [pc, #576]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	029b      	lsls	r3, r3, #10
 8001816:	4013      	ands	r3, r2
 8001818:	d0ef      	beq.n	80017fa <HAL_RCC_OscConfig+0xe6>
 800181a:	e015      	b.n	8001848 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fc24 	bl	8001068 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001826:	f7ff fc1f 	bl	8001068 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b64      	cmp	r3, #100	; 0x64
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e336      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001838:	4b85      	ldr	r3, [pc, #532]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	029b      	lsls	r3, r3, #10
 8001840:	4013      	ands	r3, r2
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x112>
 8001844:	e000      	b.n	8001848 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001846:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2202      	movs	r2, #2
 800184e:	4013      	ands	r3, r2
 8001850:	d100      	bne.n	8001854 <HAL_RCC_OscConfig+0x140>
 8001852:	e099      	b.n	8001988 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	2220      	movs	r2, #32
 800185e:	4013      	ands	r3, r2
 8001860:	d009      	beq.n	8001876 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001862:	4b7b      	ldr	r3, [pc, #492]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b7a      	ldr	r3, [pc, #488]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 8001868:	2120      	movs	r1, #32
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	2220      	movs	r2, #32
 8001872:	4393      	bics	r3, r2
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	2b04      	cmp	r3, #4
 800187a:	d005      	beq.n	8001888 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	2b0c      	cmp	r3, #12
 8001880:	d13e      	bne.n	8001900 <HAL_RCC_OscConfig+0x1ec>
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d13b      	bne.n	8001900 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001888:	4b71      	ldr	r3, [pc, #452]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2204      	movs	r2, #4
 800188e:	4013      	ands	r3, r2
 8001890:	d004      	beq.n	800189c <HAL_RCC_OscConfig+0x188>
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e304      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	4b6c      	ldr	r3, [pc, #432]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4a6e      	ldr	r2, [pc, #440]	; (8001a5c <HAL_RCC_OscConfig+0x348>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	0019      	movs	r1, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	021a      	lsls	r2, r3, #8
 80018ac:	4b68      	ldr	r3, [pc, #416]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80018ae:	430a      	orrs	r2, r1
 80018b0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80018b2:	4b67      	ldr	r3, [pc, #412]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2209      	movs	r2, #9
 80018b8:	4393      	bics	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	4b64      	ldr	r3, [pc, #400]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80018be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c4:	f000 fc42 	bl	800214c <HAL_RCC_GetSysClockFreq>
 80018c8:	0001      	movs	r1, r0
 80018ca:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	091b      	lsrs	r3, r3, #4
 80018d0:	220f      	movs	r2, #15
 80018d2:	4013      	ands	r3, r2
 80018d4:	4a62      	ldr	r2, [pc, #392]	; (8001a60 <HAL_RCC_OscConfig+0x34c>)
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	000a      	movs	r2, r1
 80018da:	40da      	lsrs	r2, r3
 80018dc:	4b61      	ldr	r3, [pc, #388]	; (8001a64 <HAL_RCC_OscConfig+0x350>)
 80018de:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80018e0:	4b61      	ldr	r3, [pc, #388]	; (8001a68 <HAL_RCC_OscConfig+0x354>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2513      	movs	r5, #19
 80018e6:	197c      	adds	r4, r7, r5
 80018e8:	0018      	movs	r0, r3
 80018ea:	f7ff fb77 	bl	8000fdc <HAL_InitTick>
 80018ee:	0003      	movs	r3, r0
 80018f0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80018f2:	197b      	adds	r3, r7, r5
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d046      	beq.n	8001988 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80018fa:	197b      	adds	r3, r7, r5
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	e2d2      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	2b00      	cmp	r3, #0
 8001904:	d027      	beq.n	8001956 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001906:	4b52      	ldr	r3, [pc, #328]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2209      	movs	r2, #9
 800190c:	4393      	bics	r3, r2
 800190e:	0019      	movs	r1, r3
 8001910:	4b4f      	ldr	r3, [pc, #316]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 8001912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001914:	430a      	orrs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fba6 	bl	8001068 <HAL_GetTick>
 800191c:	0003      	movs	r3, r0
 800191e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001922:	f7ff fba1 	bl	8001068 <HAL_GetTick>
 8001926:	0002      	movs	r2, r0
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e2b8      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001934:	4b46      	ldr	r3, [pc, #280]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2204      	movs	r2, #4
 800193a:	4013      	ands	r3, r2
 800193c:	d0f1      	beq.n	8001922 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193e:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4a46      	ldr	r2, [pc, #280]	; (8001a5c <HAL_RCC_OscConfig+0x348>)
 8001944:	4013      	ands	r3, r2
 8001946:	0019      	movs	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	021a      	lsls	r2, r3, #8
 800194e:	4b40      	ldr	r3, [pc, #256]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 8001950:	430a      	orrs	r2, r1
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	e018      	b.n	8001988 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001956:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b3d      	ldr	r3, [pc, #244]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 800195c:	2101      	movs	r1, #1
 800195e:	438a      	bics	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff fb81 	bl	8001068 <HAL_GetTick>
 8001966:	0003      	movs	r3, r0
 8001968:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800196c:	f7ff fb7c 	bl	8001068 <HAL_GetTick>
 8001970:	0002      	movs	r2, r0
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e293      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800197e:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2204      	movs	r2, #4
 8001984:	4013      	ands	r3, r2
 8001986:	d1f1      	bne.n	800196c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2210      	movs	r2, #16
 800198e:	4013      	ands	r3, r2
 8001990:	d100      	bne.n	8001994 <HAL_RCC_OscConfig+0x280>
 8001992:	e0a2      	b.n	8001ada <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d140      	bne.n	8001a1c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800199a:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4013      	ands	r3, r2
 80019a4:	d005      	beq.n	80019b2 <HAL_RCC_OscConfig+0x29e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e279      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a2d      	ldr	r2, [pc, #180]	; (8001a6c <HAL_RCC_OscConfig+0x358>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	0019      	movs	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c0:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80019c2:	430a      	orrs	r2, r1
 80019c4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c6:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	0a19      	lsrs	r1, r3, #8
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	061a      	lsls	r2, r3, #24
 80019d4:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80019d6:	430a      	orrs	r2, r1
 80019d8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	0b5b      	lsrs	r3, r3, #13
 80019e0:	3301      	adds	r3, #1
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	0212      	lsls	r2, r2, #8
 80019e6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	210f      	movs	r1, #15
 80019f0:	400b      	ands	r3, r1
 80019f2:	491b      	ldr	r1, [pc, #108]	; (8001a60 <HAL_RCC_OscConfig+0x34c>)
 80019f4:	5ccb      	ldrb	r3, [r1, r3]
 80019f6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_RCC_OscConfig+0x350>)
 80019fa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_RCC_OscConfig+0x354>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2513      	movs	r5, #19
 8001a02:	197c      	adds	r4, r7, r5
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7ff fae9 	bl	8000fdc <HAL_InitTick>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001a0e:	197b      	adds	r3, r7, r5
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d061      	beq.n	8001ada <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001a16:	197b      	adds	r3, r7, r5
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	e244      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d040      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	0049      	lsls	r1, r1, #1
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7ff fb19 	bl	8001068 <HAL_GetTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a3a:	e019      	b.n	8001a70 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fb14 	bl	8001068 <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d912      	bls.n	8001a70 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e22b      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	40021000 	.word	0x40021000
 8001a54:	fffeffff 	.word	0xfffeffff
 8001a58:	fffbffff 	.word	0xfffbffff
 8001a5c:	ffffe0ff 	.word	0xffffe0ff
 8001a60:	08005cf4 	.word	0x08005cf4
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000004 	.word	0x20000004
 8001a6c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a70:	4bca      	ldr	r3, [pc, #808]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d0df      	beq.n	8001a3c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a7c:	4bc7      	ldr	r3, [pc, #796]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4ac7      	ldr	r2, [pc, #796]	; (8001da0 <HAL_RCC_OscConfig+0x68c>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	0019      	movs	r1, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a8a:	4bc4      	ldr	r3, [pc, #784]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a90:	4bc2      	ldr	r3, [pc, #776]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	0a19      	lsrs	r1, r3, #8
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	061a      	lsls	r2, r3, #24
 8001a9e:	4bbf      	ldr	r3, [pc, #764]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	e019      	b.n	8001ada <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aa6:	4bbd      	ldr	r3, [pc, #756]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4bbc      	ldr	r3, [pc, #752]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001aac:	49bd      	ldr	r1, [pc, #756]	; (8001da4 <HAL_RCC_OscConfig+0x690>)
 8001aae:	400a      	ands	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab2:	f7ff fad9 	bl	8001068 <HAL_GetTick>
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001abc:	f7ff fad4 	bl	8001068 <HAL_GetTick>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e1eb      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ace:	4bb3      	ldr	r3, [pc, #716]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2208      	movs	r2, #8
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d036      	beq.n	8001b52 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d019      	beq.n	8001b20 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aec:	4bab      	ldr	r3, [pc, #684]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001aee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001af0:	4baa      	ldr	r3, [pc, #680]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001af2:	2101      	movs	r1, #1
 8001af4:	430a      	orrs	r2, r1
 8001af6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af8:	f7ff fab6 	bl	8001068 <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b02:	f7ff fab1 	bl	8001068 <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1c8      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b14:	4ba1      	ldr	r3, [pc, #644]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b18:	2202      	movs	r2, #2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d0f1      	beq.n	8001b02 <HAL_RCC_OscConfig+0x3ee>
 8001b1e:	e018      	b.n	8001b52 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b20:	4b9e      	ldr	r3, [pc, #632]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b24:	4b9d      	ldr	r3, [pc, #628]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001b26:	2101      	movs	r1, #1
 8001b28:	438a      	bics	r2, r1
 8001b2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2c:	f7ff fa9c 	bl	8001068 <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b36:	f7ff fa97 	bl	8001068 <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e1ae      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b48:	4b94      	ldr	r3, [pc, #592]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d1f1      	bne.n	8001b36 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2204      	movs	r2, #4
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d100      	bne.n	8001b5e <HAL_RCC_OscConfig+0x44a>
 8001b5c:	e0ae      	b.n	8001cbc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5e:	2023      	movs	r0, #35	; 0x23
 8001b60:	183b      	adds	r3, r7, r0
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b66:	4b8d      	ldr	r3, [pc, #564]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	055b      	lsls	r3, r3, #21
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d109      	bne.n	8001b86 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	4b8a      	ldr	r3, [pc, #552]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b76:	4b89      	ldr	r3, [pc, #548]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001b78:	2180      	movs	r1, #128	; 0x80
 8001b7a:	0549      	lsls	r1, r1, #21
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001b80:	183b      	adds	r3, r7, r0
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b86:	4b88      	ldr	r3, [pc, #544]	; (8001da8 <HAL_RCC_OscConfig+0x694>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d11a      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b92:	4b85      	ldr	r3, [pc, #532]	; (8001da8 <HAL_RCC_OscConfig+0x694>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4b84      	ldr	r3, [pc, #528]	; (8001da8 <HAL_RCC_OscConfig+0x694>)
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	0049      	lsls	r1, r1, #1
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba0:	f7ff fa62 	bl	8001068 <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001baa:	f7ff fa5d 	bl	8001068 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b64      	cmp	r3, #100	; 0x64
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e174      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	4b7a      	ldr	r3, [pc, #488]	; (8001da8 <HAL_RCC_OscConfig+0x694>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_OscConfig+0x4d0>
 8001bd4:	4b71      	ldr	r3, [pc, #452]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001bd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bd8:	4b70      	ldr	r3, [pc, #448]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	0049      	lsls	r1, r1, #1
 8001bde:	430a      	orrs	r2, r1
 8001be0:	651a      	str	r2, [r3, #80]	; 0x50
 8001be2:	e031      	b.n	8001c48 <HAL_RCC_OscConfig+0x534>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10c      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4f2>
 8001bec:	4b6b      	ldr	r3, [pc, #428]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001bee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bf0:	4b6a      	ldr	r3, [pc, #424]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001bf2:	496c      	ldr	r1, [pc, #432]	; (8001da4 <HAL_RCC_OscConfig+0x690>)
 8001bf4:	400a      	ands	r2, r1
 8001bf6:	651a      	str	r2, [r3, #80]	; 0x50
 8001bf8:	4b68      	ldr	r3, [pc, #416]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001bfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bfc:	4b67      	ldr	r3, [pc, #412]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001bfe:	496b      	ldr	r1, [pc, #428]	; (8001dac <HAL_RCC_OscConfig+0x698>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	651a      	str	r2, [r3, #80]	; 0x50
 8001c04:	e020      	b.n	8001c48 <HAL_RCC_OscConfig+0x534>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	23a0      	movs	r3, #160	; 0xa0
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d10e      	bne.n	8001c30 <HAL_RCC_OscConfig+0x51c>
 8001c12:	4b62      	ldr	r3, [pc, #392]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001c14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c16:	4b61      	ldr	r3, [pc, #388]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001c18:	2180      	movs	r1, #128	; 0x80
 8001c1a:	00c9      	lsls	r1, r1, #3
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	651a      	str	r2, [r3, #80]	; 0x50
 8001c20:	4b5e      	ldr	r3, [pc, #376]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001c22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c24:	4b5d      	ldr	r3, [pc, #372]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001c26:	2180      	movs	r1, #128	; 0x80
 8001c28:	0049      	lsls	r1, r1, #1
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	651a      	str	r2, [r3, #80]	; 0x50
 8001c2e:	e00b      	b.n	8001c48 <HAL_RCC_OscConfig+0x534>
 8001c30:	4b5a      	ldr	r3, [pc, #360]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001c32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c34:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001c36:	495b      	ldr	r1, [pc, #364]	; (8001da4 <HAL_RCC_OscConfig+0x690>)
 8001c38:	400a      	ands	r2, r1
 8001c3a:	651a      	str	r2, [r3, #80]	; 0x50
 8001c3c:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001c3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c40:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001c42:	495a      	ldr	r1, [pc, #360]	; (8001dac <HAL_RCC_OscConfig+0x698>)
 8001c44:	400a      	ands	r2, r1
 8001c46:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d015      	beq.n	8001c7c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c50:	f7ff fa0a 	bl	8001068 <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c58:	e009      	b.n	8001c6e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7ff fa05 	bl	8001068 <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_RCC_OscConfig+0x69c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e11b      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c6e:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4013      	ands	r3, r2
 8001c78:	d0ef      	beq.n	8001c5a <HAL_RCC_OscConfig+0x546>
 8001c7a:	e014      	b.n	8001ca6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7c:	f7ff f9f4 	bl	8001068 <HAL_GetTick>
 8001c80:	0003      	movs	r3, r0
 8001c82:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c84:	e009      	b.n	8001c9a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7ff f9ef 	bl	8001068 <HAL_GetTick>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	4a47      	ldr	r2, [pc, #284]	; (8001db0 <HAL_RCC_OscConfig+0x69c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e105      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c9a:	4b40      	ldr	r3, [pc, #256]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001c9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d1ef      	bne.n	8001c86 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ca6:	2323      	movs	r3, #35	; 0x23
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d105      	bne.n	8001cbc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb0:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cb4:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001cb6:	493f      	ldr	r1, [pc, #252]	; (8001db4 <HAL_RCC_OscConfig+0x6a0>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d049      	beq.n	8001d5a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d026      	beq.n	8001d1c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	4b32      	ldr	r3, [pc, #200]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cde:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ce6:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <HAL_RCC_OscConfig+0x6a4>)
 8001ce8:	6a1a      	ldr	r2, [r3, #32]
 8001cea:	4b33      	ldr	r3, [pc, #204]	; (8001db8 <HAL_RCC_OscConfig+0x6a4>)
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	0189      	lsls	r1, r1, #6
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f9b8 	bl	8001068 <HAL_GetTick>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cfe:	f7ff f9b3 	bl	8001068 <HAL_GetTick>
 8001d02:	0002      	movs	r2, r0
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e0ca      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d10:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2202      	movs	r2, #2
 8001d16:	4013      	ands	r3, r2
 8001d18:	d0f1      	beq.n	8001cfe <HAL_RCC_OscConfig+0x5ea>
 8001d1a:	e01e      	b.n	8001d5a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001d22:	2101      	movs	r1, #1
 8001d24:	438a      	bics	r2, r1
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <HAL_RCC_OscConfig+0x6a4>)
 8001d2a:	6a1a      	ldr	r2, [r3, #32]
 8001d2c:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <HAL_RCC_OscConfig+0x6a4>)
 8001d2e:	4923      	ldr	r1, [pc, #140]	; (8001dbc <HAL_RCC_OscConfig+0x6a8>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff f998 	bl	8001068 <HAL_GetTick>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d3e:	f7ff f993 	bl	8001068 <HAL_GetTick>
 8001d42:	0002      	movs	r2, r0
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e0aa      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2202      	movs	r2, #2
 8001d56:	4013      	ands	r3, r2
 8001d58:	d1f1      	bne.n	8001d3e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d100      	bne.n	8001d64 <HAL_RCC_OscConfig+0x650>
 8001d62:	e09f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d100      	bne.n	8001d6c <HAL_RCC_OscConfig+0x658>
 8001d6a:	e078      	b.n	8001e5e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d159      	bne.n	8001e28 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_RCC_OscConfig+0x688>)
 8001d7a:	4911      	ldr	r1, [pc, #68]	; (8001dc0 <HAL_RCC_OscConfig+0x6ac>)
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff f972 	bl	8001068 <HAL_GetTick>
 8001d84:	0003      	movs	r3, r0
 8001d86:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d88:	e01c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8a:	f7ff f96d 	bl	8001068 <HAL_GetTick>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d915      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e084      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	ffff1fff 	.word	0xffff1fff
 8001da4:	fffffeff 	.word	0xfffffeff
 8001da8:	40007000 	.word	0x40007000
 8001dac:	fffffbff 	.word	0xfffffbff
 8001db0:	00001388 	.word	0x00001388
 8001db4:	efffffff 	.word	0xefffffff
 8001db8:	40010000 	.word	0x40010000
 8001dbc:	ffffdfff 	.word	0xffffdfff
 8001dc0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dc4:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <HAL_RCC_OscConfig+0x79c>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	049b      	lsls	r3, r3, #18
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d1dc      	bne.n	8001d8a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd0:	4b37      	ldr	r3, [pc, #220]	; (8001eb0 <HAL_RCC_OscConfig+0x79c>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	4a37      	ldr	r2, [pc, #220]	; (8001eb4 <HAL_RCC_OscConfig+0x7a0>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de8:	431a      	orrs	r2, r3
 8001dea:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_RCC_OscConfig+0x79c>)
 8001dec:	430a      	orrs	r2, r1
 8001dee:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df0:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <HAL_RCC_OscConfig+0x79c>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_RCC_OscConfig+0x79c>)
 8001df6:	2180      	movs	r1, #128	; 0x80
 8001df8:	0449      	lsls	r1, r1, #17
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7ff f933 	bl	8001068 <HAL_GetTick>
 8001e02:	0003      	movs	r3, r0
 8001e04:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e08:	f7ff f92e 	bl	8001068 <HAL_GetTick>
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e045      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e1a:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <HAL_RCC_OscConfig+0x79c>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	049b      	lsls	r3, r3, #18
 8001e22:	4013      	ands	r3, r2
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x6f4>
 8001e26:	e03d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_RCC_OscConfig+0x79c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <HAL_RCC_OscConfig+0x79c>)
 8001e2e:	4922      	ldr	r1, [pc, #136]	; (8001eb8 <HAL_RCC_OscConfig+0x7a4>)
 8001e30:	400a      	ands	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff f918 	bl	8001068 <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7ff f913 	bl	8001068 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e02a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <HAL_RCC_OscConfig+0x79c>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	049b      	lsls	r3, r3, #18
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d1f0      	bne.n	8001e3e <HAL_RCC_OscConfig+0x72a>
 8001e5c:	e022      	b.n	8001ea4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e01d      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_RCC_OscConfig+0x79c>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	025b      	lsls	r3, r3, #9
 8001e76:	401a      	ands	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d10f      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	23f0      	movs	r3, #240	; 0xf0
 8001e84:	039b      	lsls	r3, r3, #14
 8001e86:	401a      	ands	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	23c0      	movs	r3, #192	; 0xc0
 8001e94:	041b      	lsls	r3, r3, #16
 8001e96:	401a      	ands	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b00a      	add	sp, #40	; 0x28
 8001eac:	bdb0      	pop	{r4, r5, r7, pc}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	ff02ffff 	.word	0xff02ffff
 8001eb8:	feffffff 	.word	0xfeffffff

08001ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ebc:	b5b0      	push	{r4, r5, r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e128      	b.n	8002122 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed0:	4b96      	ldr	r3, [pc, #600]	; (800212c <HAL_RCC_ClockConfig+0x270>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d91e      	bls.n	8001f1c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ede:	4b93      	ldr	r3, [pc, #588]	; (800212c <HAL_RCC_ClockConfig+0x270>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4393      	bics	r3, r2
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	4b90      	ldr	r3, [pc, #576]	; (800212c <HAL_RCC_ClockConfig+0x270>)
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ef0:	f7ff f8ba 	bl	8001068 <HAL_GetTick>
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef8:	e009      	b.n	8001f0e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efa:	f7ff f8b5 	bl	8001068 <HAL_GetTick>
 8001efe:	0002      	movs	r2, r0
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	4a8a      	ldr	r2, [pc, #552]	; (8002130 <HAL_RCC_ClockConfig+0x274>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e109      	b.n	8002122 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b87      	ldr	r3, [pc, #540]	; (800212c <HAL_RCC_ClockConfig+0x270>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2201      	movs	r2, #1
 8001f14:	4013      	ands	r3, r2
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d1ee      	bne.n	8001efa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2202      	movs	r2, #2
 8001f22:	4013      	ands	r3, r2
 8001f24:	d009      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f26:	4b83      	ldr	r3, [pc, #524]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	22f0      	movs	r2, #240	; 0xf0
 8001f2c:	4393      	bics	r3, r2
 8001f2e:	0019      	movs	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	4b7f      	ldr	r3, [pc, #508]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 8001f36:	430a      	orrs	r2, r1
 8001f38:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	4013      	ands	r3, r2
 8001f42:	d100      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x8a>
 8001f44:	e089      	b.n	800205a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f4e:	4b79      	ldr	r3, [pc, #484]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	029b      	lsls	r3, r3, #10
 8001f56:	4013      	ands	r3, r2
 8001f58:	d120      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0e1      	b.n	8002122 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f66:	4b73      	ldr	r3, [pc, #460]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	049b      	lsls	r3, r3, #18
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d114      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e0d5      	b.n	8002122 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d106      	bne.n	8001f8c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f7e:	4b6d      	ldr	r3, [pc, #436]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2204      	movs	r2, #4
 8001f84:	4013      	ands	r3, r2
 8001f86:	d109      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0ca      	b.n	8002122 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f8c:	4b69      	ldr	r3, [pc, #420]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4013      	ands	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0c2      	b.n	8002122 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f9c:	4b65      	ldr	r3, [pc, #404]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	4393      	bics	r3, r2
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4b62      	ldr	r3, [pc, #392]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb0:	f7ff f85a 	bl	8001068 <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d111      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fc0:	e009      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc2:	f7ff f851 	bl	8001068 <HAL_GetTick>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	4a58      	ldr	r2, [pc, #352]	; (8002130 <HAL_RCC_ClockConfig+0x274>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e0a5      	b.n	8002122 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fd6:	4b57      	ldr	r3, [pc, #348]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	220c      	movs	r2, #12
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d1ef      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x106>
 8001fe2:	e03a      	b.n	800205a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d111      	bne.n	8002010 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fec:	e009      	b.n	8002002 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fee:	f7ff f83b 	bl	8001068 <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	4a4d      	ldr	r2, [pc, #308]	; (8002130 <HAL_RCC_ClockConfig+0x274>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e08f      	b.n	8002122 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002002:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	220c      	movs	r2, #12
 8002008:	4013      	ands	r3, r2
 800200a:	2b0c      	cmp	r3, #12
 800200c:	d1ef      	bne.n	8001fee <HAL_RCC_ClockConfig+0x132>
 800200e:	e024      	b.n	800205a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d11b      	bne.n	8002050 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002018:	e009      	b.n	800202e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201a:	f7ff f825 	bl	8001068 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	4a42      	ldr	r2, [pc, #264]	; (8002130 <HAL_RCC_ClockConfig+0x274>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e079      	b.n	8002122 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	220c      	movs	r2, #12
 8002034:	4013      	ands	r3, r2
 8002036:	2b04      	cmp	r3, #4
 8002038:	d1ef      	bne.n	800201a <HAL_RCC_ClockConfig+0x15e>
 800203a:	e00e      	b.n	800205a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203c:	f7ff f814 	bl	8001068 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	4a3a      	ldr	r2, [pc, #232]	; (8002130 <HAL_RCC_ClockConfig+0x274>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e068      	b.n	8002122 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	220c      	movs	r2, #12
 8002056:	4013      	ands	r3, r2
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800205a:	4b34      	ldr	r3, [pc, #208]	; (800212c <HAL_RCC_ClockConfig+0x270>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2201      	movs	r2, #1
 8002060:	4013      	ands	r3, r2
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d21e      	bcs.n	80020a6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002068:	4b30      	ldr	r3, [pc, #192]	; (800212c <HAL_RCC_ClockConfig+0x270>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2201      	movs	r2, #1
 800206e:	4393      	bics	r3, r2
 8002070:	0019      	movs	r1, r3
 8002072:	4b2e      	ldr	r3, [pc, #184]	; (800212c <HAL_RCC_ClockConfig+0x270>)
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800207a:	f7fe fff5 	bl	8001068 <HAL_GetTick>
 800207e:	0003      	movs	r3, r0
 8002080:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	e009      	b.n	8002098 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002084:	f7fe fff0 	bl	8001068 <HAL_GetTick>
 8002088:	0002      	movs	r2, r0
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	4a28      	ldr	r2, [pc, #160]	; (8002130 <HAL_RCC_ClockConfig+0x274>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e044      	b.n	8002122 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCC_ClockConfig+0x270>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2201      	movs	r2, #1
 800209e:	4013      	ands	r3, r2
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d1ee      	bne.n	8002084 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2204      	movs	r2, #4
 80020ac:	4013      	ands	r3, r2
 80020ae:	d009      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b0:	4b20      	ldr	r3, [pc, #128]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a20      	ldr	r2, [pc, #128]	; (8002138 <HAL_RCC_ClockConfig+0x27c>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 80020c0:	430a      	orrs	r2, r1
 80020c2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2208      	movs	r2, #8
 80020ca:	4013      	ands	r3, r2
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	4a1a      	ldr	r2, [pc, #104]	; (800213c <HAL_RCC_ClockConfig+0x280>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	00da      	lsls	r2, r3, #3
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 80020e0:	430a      	orrs	r2, r1
 80020e2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020e4:	f000 f832 	bl	800214c <HAL_RCC_GetSysClockFreq>
 80020e8:	0001      	movs	r1, r0
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_RCC_ClockConfig+0x278>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	091b      	lsrs	r3, r3, #4
 80020f0:	220f      	movs	r2, #15
 80020f2:	4013      	ands	r3, r2
 80020f4:	4a12      	ldr	r2, [pc, #72]	; (8002140 <HAL_RCC_ClockConfig+0x284>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	000a      	movs	r2, r1
 80020fa:	40da      	lsrs	r2, r3
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_RCC_ClockConfig+0x288>)
 80020fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_RCC_ClockConfig+0x28c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	250b      	movs	r5, #11
 8002106:	197c      	adds	r4, r7, r5
 8002108:	0018      	movs	r0, r3
 800210a:	f7fe ff67 	bl	8000fdc <HAL_InitTick>
 800210e:	0003      	movs	r3, r0
 8002110:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002112:	197b      	adds	r3, r7, r5
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800211a:	197b      	adds	r3, r7, r5
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	e000      	b.n	8002122 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	0018      	movs	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	b004      	add	sp, #16
 8002128:	bdb0      	pop	{r4, r5, r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	40022000 	.word	0x40022000
 8002130:	00001388 	.word	0x00001388
 8002134:	40021000 	.word	0x40021000
 8002138:	fffff8ff 	.word	0xfffff8ff
 800213c:	ffffc7ff 	.word	0xffffc7ff
 8002140:	08005cf4 	.word	0x08005cf4
 8002144:	20000000 	.word	0x20000000
 8002148:	20000004 	.word	0x20000004

0800214c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800214c:	b5b0      	push	{r4, r5, r7, lr}
 800214e:	b08e      	sub	sp, #56	; 0x38
 8002150:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002152:	4b4c      	ldr	r3, [pc, #304]	; (8002284 <HAL_RCC_GetSysClockFreq+0x138>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800215a:	230c      	movs	r3, #12
 800215c:	4013      	ands	r3, r2
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d014      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x40>
 8002162:	d900      	bls.n	8002166 <HAL_RCC_GetSysClockFreq+0x1a>
 8002164:	e07b      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x112>
 8002166:	2b04      	cmp	r3, #4
 8002168:	d002      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x24>
 800216a:	2b08      	cmp	r3, #8
 800216c:	d00b      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x3a>
 800216e:	e076      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002170:	4b44      	ldr	r3, [pc, #272]	; (8002284 <HAL_RCC_GetSysClockFreq+0x138>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2210      	movs	r2, #16
 8002176:	4013      	ands	r3, r2
 8002178:	d002      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800217a:	4b43      	ldr	r3, [pc, #268]	; (8002288 <HAL_RCC_GetSysClockFreq+0x13c>)
 800217c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800217e:	e07c      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002180:	4b42      	ldr	r3, [pc, #264]	; (800228c <HAL_RCC_GetSysClockFreq+0x140>)
 8002182:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002184:	e079      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002186:	4b42      	ldr	r3, [pc, #264]	; (8002290 <HAL_RCC_GetSysClockFreq+0x144>)
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800218a:	e076      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800218c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218e:	0c9a      	lsrs	r2, r3, #18
 8002190:	230f      	movs	r3, #15
 8002192:	401a      	ands	r2, r3
 8002194:	4b3f      	ldr	r3, [pc, #252]	; (8002294 <HAL_RCC_GetSysClockFreq+0x148>)
 8002196:	5c9b      	ldrb	r3, [r3, r2]
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800219a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219c:	0d9a      	lsrs	r2, r3, #22
 800219e:	2303      	movs	r3, #3
 80021a0:	4013      	ands	r3, r2
 80021a2:	3301      	adds	r3, #1
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a6:	4b37      	ldr	r3, [pc, #220]	; (8002284 <HAL_RCC_GetSysClockFreq+0x138>)
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	025b      	lsls	r3, r3, #9
 80021ae:	4013      	ands	r3, r2
 80021b0:	d01a      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	4a35      	ldr	r2, [pc, #212]	; (8002290 <HAL_RCC_GetSysClockFreq+0x144>)
 80021bc:	2300      	movs	r3, #0
 80021be:	69b8      	ldr	r0, [r7, #24]
 80021c0:	69f9      	ldr	r1, [r7, #28]
 80021c2:	f7fe f857 	bl	8000274 <__aeabi_lmul>
 80021c6:	0002      	movs	r2, r0
 80021c8:	000b      	movs	r3, r1
 80021ca:	0010      	movs	r0, r2
 80021cc:	0019      	movs	r1, r3
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f7fe f82b 	bl	8000234 <__aeabi_uldivmod>
 80021de:	0002      	movs	r2, r0
 80021e0:	000b      	movs	r3, r1
 80021e2:	0013      	movs	r3, r2
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
 80021e6:	e037      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80021e8:	4b26      	ldr	r3, [pc, #152]	; (8002284 <HAL_RCC_GetSysClockFreq+0x138>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2210      	movs	r2, #16
 80021ee:	4013      	ands	r3, r2
 80021f0:	d01a      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80021f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	4a23      	ldr	r2, [pc, #140]	; (8002288 <HAL_RCC_GetSysClockFreq+0x13c>)
 80021fc:	2300      	movs	r3, #0
 80021fe:	68b8      	ldr	r0, [r7, #8]
 8002200:	68f9      	ldr	r1, [r7, #12]
 8002202:	f7fe f837 	bl	8000274 <__aeabi_lmul>
 8002206:	0002      	movs	r2, r0
 8002208:	000b      	movs	r3, r1
 800220a:	0010      	movs	r0, r2
 800220c:	0019      	movs	r1, r3
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f7fe f80b 	bl	8000234 <__aeabi_uldivmod>
 800221e:	0002      	movs	r2, r0
 8002220:	000b      	movs	r3, r1
 8002222:	0013      	movs	r3, r2
 8002224:	637b      	str	r3, [r7, #52]	; 0x34
 8002226:	e017      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222a:	0018      	movs	r0, r3
 800222c:	2300      	movs	r3, #0
 800222e:	0019      	movs	r1, r3
 8002230:	4a16      	ldr	r2, [pc, #88]	; (800228c <HAL_RCC_GetSysClockFreq+0x140>)
 8002232:	2300      	movs	r3, #0
 8002234:	f7fe f81e 	bl	8000274 <__aeabi_lmul>
 8002238:	0002      	movs	r2, r0
 800223a:	000b      	movs	r3, r1
 800223c:	0010      	movs	r0, r2
 800223e:	0019      	movs	r1, r3
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	001c      	movs	r4, r3
 8002244:	2300      	movs	r3, #0
 8002246:	001d      	movs	r5, r3
 8002248:	0022      	movs	r2, r4
 800224a:	002b      	movs	r3, r5
 800224c:	f7fd fff2 	bl	8000234 <__aeabi_uldivmod>
 8002250:	0002      	movs	r2, r0
 8002252:	000b      	movs	r3, r1
 8002254:	0013      	movs	r3, r2
 8002256:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800225c:	e00d      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_RCC_GetSysClockFreq+0x138>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	0b5b      	lsrs	r3, r3, #13
 8002264:	2207      	movs	r2, #7
 8002266:	4013      	ands	r3, r2
 8002268:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	3301      	adds	r3, #1
 800226e:	2280      	movs	r2, #128	; 0x80
 8002270:	0212      	lsls	r2, r2, #8
 8002272:	409a      	lsls	r2, r3
 8002274:	0013      	movs	r3, r2
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002278:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b00e      	add	sp, #56	; 0x38
 8002282:	bdb0      	pop	{r4, r5, r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	003d0900 	.word	0x003d0900
 800228c:	00f42400 	.word	0x00f42400
 8002290:	007a1200 	.word	0x007a1200
 8002294:	08005d0c 	.word	0x08005d0c

08002298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800229c:	4b02      	ldr	r3, [pc, #8]	; (80022a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	20000000 	.word	0x20000000

080022ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022b0:	f7ff fff2 	bl	8002298 <HAL_RCC_GetHCLKFreq>
 80022b4:	0001      	movs	r1, r0
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	2207      	movs	r2, #7
 80022be:	4013      	ands	r3, r2
 80022c0:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	40d9      	lsrs	r1, r3
 80022c6:	000b      	movs	r3, r1
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	40021000 	.word	0x40021000
 80022d4:	08005d04 	.word	0x08005d04

080022d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022dc:	f7ff ffdc 	bl	8002298 <HAL_RCC_GetHCLKFreq>
 80022e0:	0001      	movs	r1, r0
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	0adb      	lsrs	r3, r3, #11
 80022e8:	2207      	movs	r2, #7
 80022ea:	4013      	ands	r3, r2
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	40d9      	lsrs	r1, r3
 80022f2:	000b      	movs	r3, r1
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	40021000 	.word	0x40021000
 8002300:	08005d04 	.word	0x08005d04

08002304 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800230c:	2017      	movs	r0, #23
 800230e:	183b      	adds	r3, r7, r0
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2220      	movs	r2, #32
 800231a:	4013      	ands	r3, r2
 800231c:	d100      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800231e:	e0c2      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002320:	4b98      	ldr	r3, [pc, #608]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	055b      	lsls	r3, r3, #21
 8002328:	4013      	ands	r3, r2
 800232a:	d109      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232c:	4b95      	ldr	r3, [pc, #596]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800232e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002330:	4b94      	ldr	r3, [pc, #592]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002332:	2180      	movs	r1, #128	; 0x80
 8002334:	0549      	lsls	r1, r1, #21
 8002336:	430a      	orrs	r2, r1
 8002338:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800233a:	183b      	adds	r3, r7, r0
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	4b91      	ldr	r3, [pc, #580]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4013      	ands	r3, r2
 800234a:	d11a      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234c:	4b8e      	ldr	r3, [pc, #568]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b8d      	ldr	r3, [pc, #564]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002352:	2180      	movs	r1, #128	; 0x80
 8002354:	0049      	lsls	r1, r1, #1
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235a:	f7fe fe85 	bl	8001068 <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	e008      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002364:	f7fe fe80 	bl	8001068 <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e102      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b84      	ldr	r3, [pc, #528]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4013      	ands	r3, r2
 8002380:	d0f0      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002382:	4b80      	ldr	r3, [pc, #512]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	23c0      	movs	r3, #192	; 0xc0
 8002388:	039b      	lsls	r3, r3, #14
 800238a:	4013      	ands	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	23c0      	movs	r3, #192	; 0xc0
 8002394:	039b      	lsls	r3, r3, #14
 8002396:	4013      	ands	r3, r2
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	429a      	cmp	r2, r3
 800239c:	d013      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	23c0      	movs	r3, #192	; 0xc0
 80023a4:	029b      	lsls	r3, r3, #10
 80023a6:	401a      	ands	r2, r3
 80023a8:	23c0      	movs	r3, #192	; 0xc0
 80023aa:	029b      	lsls	r3, r3, #10
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d10a      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80023b0:	4b74      	ldr	r3, [pc, #464]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	029b      	lsls	r3, r3, #10
 80023b8:	401a      	ands	r2, r3
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	029b      	lsls	r3, r3, #10
 80023be:	429a      	cmp	r2, r3
 80023c0:	d101      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0da      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80023c6:	4b6f      	ldr	r3, [pc, #444]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023ca:	23c0      	movs	r3, #192	; 0xc0
 80023cc:	029b      	lsls	r3, r3, #10
 80023ce:	4013      	ands	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d03b      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	23c0      	movs	r3, #192	; 0xc0
 80023de:	029b      	lsls	r3, r3, #10
 80023e0:	4013      	ands	r3, r2
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d033      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2220      	movs	r2, #32
 80023ee:	4013      	ands	r3, r2
 80023f0:	d02e      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80023f2:	4b64      	ldr	r3, [pc, #400]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f6:	4a65      	ldr	r2, [pc, #404]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023fc:	4b61      	ldr	r3, [pc, #388]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002400:	4b60      	ldr	r3, [pc, #384]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002402:	2180      	movs	r1, #128	; 0x80
 8002404:	0309      	lsls	r1, r1, #12
 8002406:	430a      	orrs	r2, r1
 8002408:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800240a:	4b5e      	ldr	r3, [pc, #376]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800240c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800240e:	4b5d      	ldr	r3, [pc, #372]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002410:	495f      	ldr	r1, [pc, #380]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002412:	400a      	ands	r2, r1
 8002414:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002416:	4b5b      	ldr	r3, [pc, #364]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4013      	ands	r3, r2
 8002424:	d014      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7fe fe1f 	bl	8001068 <HAL_GetTick>
 800242a:	0003      	movs	r3, r0
 800242c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800242e:	e009      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002430:	f7fe fe1a 	bl	8001068 <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	4a56      	ldr	r2, [pc, #344]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e09b      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002444:	4b4f      	ldr	r3, [pc, #316]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002446:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4013      	ands	r3, r2
 800244e:	d0ef      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	23c0      	movs	r3, #192	; 0xc0
 8002456:	029b      	lsls	r3, r3, #10
 8002458:	401a      	ands	r2, r3
 800245a:	23c0      	movs	r3, #192	; 0xc0
 800245c:	029b      	lsls	r3, r3, #10
 800245e:	429a      	cmp	r2, r3
 8002460:	d10c      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002462:	4b48      	ldr	r3, [pc, #288]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a4c      	ldr	r2, [pc, #304]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002468:	4013      	ands	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	23c0      	movs	r3, #192	; 0xc0
 8002472:	039b      	lsls	r3, r3, #14
 8002474:	401a      	ands	r2, r3
 8002476:	4b43      	ldr	r3, [pc, #268]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	4b41      	ldr	r3, [pc, #260]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800247e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	23c0      	movs	r3, #192	; 0xc0
 8002486:	029b      	lsls	r3, r3, #10
 8002488:	401a      	ands	r2, r3
 800248a:	4b3e      	ldr	r3, [pc, #248]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800248c:	430a      	orrs	r2, r1
 800248e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002490:	2317      	movs	r3, #23
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249a:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800249c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800249e:	4b39      	ldr	r3, [pc, #228]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024a0:	493e      	ldr	r1, [pc, #248]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80024a2:	400a      	ands	r2, r1
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2201      	movs	r2, #1
 80024ac:	4013      	ands	r3, r2
 80024ae:	d009      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024b0:	4b34      	ldr	r3, [pc, #208]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b4:	2203      	movs	r2, #3
 80024b6:	4393      	bics	r3, r2
 80024b8:	0019      	movs	r1, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	4b31      	ldr	r3, [pc, #196]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2202      	movs	r2, #2
 80024ca:	4013      	ands	r3, r2
 80024cc:	d009      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024ce:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	220c      	movs	r2, #12
 80024d4:	4393      	bics	r3, r2
 80024d6:	0019      	movs	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	4b29      	ldr	r3, [pc, #164]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024de:	430a      	orrs	r2, r1
 80024e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2204      	movs	r2, #4
 80024e8:	4013      	ands	r3, r2
 80024ea:	d009      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024ec:	4b25      	ldr	r3, [pc, #148]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f0:	4a2b      	ldr	r2, [pc, #172]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	0019      	movs	r1, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2208      	movs	r2, #8
 8002506:	4013      	ands	r3, r2
 8002508:	d009      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800250a:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250e:	4a25      	ldr	r2, [pc, #148]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002510:	4013      	ands	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695a      	ldr	r2, [r3, #20]
 8002518:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800251a:	430a      	orrs	r2, r1
 800251c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4013      	ands	r3, r2
 8002528:	d009      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800252a:	4b16      	ldr	r3, [pc, #88]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800252c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252e:	4a17      	ldr	r2, [pc, #92]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002530:	4013      	ands	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800253a:	430a      	orrs	r2, r1
 800253c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2240      	movs	r2, #64	; 0x40
 8002544:	4013      	ands	r3, r2
 8002546:	d009      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002548:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800254a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254c:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800254e:	4013      	ands	r3, r2
 8002550:	0019      	movs	r1, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1a      	ldr	r2, [r3, #32]
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002558:	430a      	orrs	r2, r1
 800255a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	4013      	ands	r3, r2
 8002564:	d009      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002566:	4b07      	ldr	r3, [pc, #28]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	4a10      	ldr	r2, [pc, #64]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800256c:	4013      	ands	r3, r2
 800256e:	0019      	movs	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69da      	ldr	r2, [r3, #28]
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002576:	430a      	orrs	r2, r1
 8002578:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b006      	add	sp, #24
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	40007000 	.word	0x40007000
 800258c:	fffcffff 	.word	0xfffcffff
 8002590:	fff7ffff 	.word	0xfff7ffff
 8002594:	00001388 	.word	0x00001388
 8002598:	ffcfffff 	.word	0xffcfffff
 800259c:	efffffff 	.word	0xefffffff
 80025a0:	fffff3ff 	.word	0xfffff3ff
 80025a4:	ffffcfff 	.word	0xffffcfff
 80025a8:	fbffffff 	.word	0xfbffffff
 80025ac:	fff3ffff 	.word	0xfff3ffff

080025b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e08e      	b.n	80026e0 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2221      	movs	r2, #33	; 0x21
 80025c6:	5c9b      	ldrb	r3, [r3, r2]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d107      	bne.n	80025de <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2220      	movs	r2, #32
 80025d2:	2100      	movs	r1, #0
 80025d4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7fe fb27 	bl	8000c2c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2221      	movs	r2, #33	; 0x21
 80025e2:	2102      	movs	r1, #2
 80025e4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	22ca      	movs	r2, #202	; 0xca
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2253      	movs	r2, #83	; 0x53
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 fbb2 	bl	8002d62 <RTC_EnterInitMode>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d009      	beq.n	8002616 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	22ff      	movs	r2, #255	; 0xff
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2221      	movs	r2, #33	; 0x21
 800260e:	2104      	movs	r1, #4
 8002610:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e064      	b.n	80026e0 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4931      	ldr	r1, [pc, #196]	; (80026e8 <HAL_RTC_Init+0x138>)
 8002622:	400a      	ands	r2, r1
 8002624:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6899      	ldr	r1, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68d2      	ldr	r2, [r2, #12]
 800264c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6919      	ldr	r1, [r3, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	041a      	lsls	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2180      	movs	r1, #128	; 0x80
 800266e:	438a      	bics	r2, r1
 8002670:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2103      	movs	r1, #3
 800267e:	438a      	bics	r2, r1
 8002680:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69da      	ldr	r2, [r3, #28]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2220      	movs	r2, #32
 80026a2:	4013      	ands	r3, r2
 80026a4:	d113      	bne.n	80026ce <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 fb33 	bl	8002d14 <HAL_RTC_WaitForSynchro>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d00d      	beq.n	80026ce <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	22ff      	movs	r2, #255	; 0xff
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2221      	movs	r2, #33	; 0x21
 80026be:	2104      	movs	r1, #4
 80026c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2220      	movs	r2, #32
 80026c6:	2100      	movs	r1, #0
 80026c8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e008      	b.n	80026e0 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	22ff      	movs	r2, #255	; 0xff
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2221      	movs	r2, #33	; 0x21
 80026da:	2101      	movs	r1, #1
 80026dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026de:	2300      	movs	r3, #0
  }
}
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	ff8fffbf 	.word	0xff8fffbf

080026ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2220      	movs	r2, #32
 80026fc:	5c9b      	ldrb	r3, [r3, r2]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_RTC_SetTime+0x1a>
 8002702:	2302      	movs	r3, #2
 8002704:	e0ad      	b.n	8002862 <HAL_RTC_SetTime+0x176>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2220      	movs	r2, #32
 800270a:	2101      	movs	r1, #1
 800270c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2221      	movs	r2, #33	; 0x21
 8002712:	2102      	movs	r1, #2
 8002714:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d125      	bne.n	8002768 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2240      	movs	r2, #64	; 0x40
 8002724:	4013      	ands	r3, r2
 8002726:	d102      	bne.n	800272e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2200      	movs	r2, #0
 800272c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	0018      	movs	r0, r3
 8002734:	f000 fb3f 	bl	8002db6 <RTC_ByteToBcd2>
 8002738:	0003      	movs	r3, r0
 800273a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	785b      	ldrb	r3, [r3, #1]
 8002740:	0018      	movs	r0, r3
 8002742:	f000 fb38 	bl	8002db6 <RTC_ByteToBcd2>
 8002746:	0003      	movs	r3, r0
 8002748:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800274a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	789b      	ldrb	r3, [r3, #2]
 8002750:	0018      	movs	r0, r3
 8002752:	f000 fb30 	bl	8002db6 <RTC_ByteToBcd2>
 8002756:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002758:	0022      	movs	r2, r4
 800275a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	78db      	ldrb	r3, [r3, #3]
 8002760:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	e017      	b.n	8002798 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2240      	movs	r2, #64	; 0x40
 8002770:	4013      	ands	r3, r2
 8002772:	d102      	bne.n	800277a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2200      	movs	r2, #0
 8002778:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	785b      	ldrb	r3, [r3, #1]
 8002784:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002786:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800278c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	78db      	ldrb	r3, [r3, #3]
 8002792:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002794:	4313      	orrs	r3, r2
 8002796:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	22ca      	movs	r2, #202	; 0xca
 800279e:	625a      	str	r2, [r3, #36]	; 0x24
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2253      	movs	r2, #83	; 0x53
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	0018      	movs	r0, r3
 80027ac:	f000 fad9 	bl	8002d62 <RTC_EnterInitMode>
 80027b0:	1e03      	subs	r3, r0, #0
 80027b2:	d00d      	beq.n	80027d0 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	22ff      	movs	r2, #255	; 0xff
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2221      	movs	r2, #33	; 0x21
 80027c0:	2104      	movs	r1, #4
 80027c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	2100      	movs	r1, #0
 80027ca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e048      	b.n	8002862 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4925      	ldr	r1, [pc, #148]	; (800286c <HAL_RTC_SetTime+0x180>)
 80027d8:	400a      	ands	r2, r1
 80027da:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4922      	ldr	r1, [pc, #136]	; (8002870 <HAL_RTC_SetTime+0x184>)
 80027e8:	400a      	ands	r2, r1
 80027ea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2180      	movs	r1, #128	; 0x80
 8002810:	438a      	bics	r2, r1
 8002812:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2220      	movs	r2, #32
 800281c:	4013      	ands	r3, r2
 800281e:	d113      	bne.n	8002848 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	0018      	movs	r0, r3
 8002824:	f000 fa76 	bl	8002d14 <HAL_RTC_WaitForSynchro>
 8002828:	1e03      	subs	r3, r0, #0
 800282a:	d00d      	beq.n	8002848 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	22ff      	movs	r2, #255	; 0xff
 8002832:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2221      	movs	r2, #33	; 0x21
 8002838:	2104      	movs	r1, #4
 800283a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2220      	movs	r2, #32
 8002840:	2100      	movs	r1, #0
 8002842:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e00c      	b.n	8002862 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	22ff      	movs	r2, #255	; 0xff
 800284e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2221      	movs	r2, #33	; 0x21
 8002854:	2101      	movs	r1, #1
 8002856:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	2100      	movs	r1, #0
 800285e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002860:	2300      	movs	r3, #0
  }
}
 8002862:	0018      	movs	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	b007      	add	sp, #28
 8002868:	bd90      	pop	{r4, r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	007f7f7f 	.word	0x007f7f7f
 8002870:	fffbffff 	.word	0xfffbffff

08002874 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	5c9b      	ldrb	r3, [r3, r2]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_RTC_SetDate+0x1a>
 800288a:	2302      	movs	r3, #2
 800288c:	e099      	b.n	80029c2 <HAL_RTC_SetDate+0x14e>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	2101      	movs	r1, #1
 8002894:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2221      	movs	r2, #33	; 0x21
 800289a:	2102      	movs	r1, #2
 800289c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10e      	bne.n	80028c2 <HAL_RTC_SetDate+0x4e>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	785b      	ldrb	r3, [r3, #1]
 80028a8:	001a      	movs	r2, r3
 80028aa:	2310      	movs	r3, #16
 80028ac:	4013      	ands	r3, r2
 80028ae:	d008      	beq.n	80028c2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	785b      	ldrb	r3, [r3, #1]
 80028b4:	2210      	movs	r2, #16
 80028b6:	4393      	bics	r3, r2
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	330a      	adds	r3, #10
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d11c      	bne.n	8002902 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	78db      	ldrb	r3, [r3, #3]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f000 fa72 	bl	8002db6 <RTC_ByteToBcd2>
 80028d2:	0003      	movs	r3, r0
 80028d4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	785b      	ldrb	r3, [r3, #1]
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 fa6b 	bl	8002db6 <RTC_ByteToBcd2>
 80028e0:	0003      	movs	r3, r0
 80028e2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80028e4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	789b      	ldrb	r3, [r3, #2]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 fa63 	bl	8002db6 <RTC_ByteToBcd2>
 80028f0:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80028f2:	0022      	movs	r2, r4
 80028f4:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	e00e      	b.n	8002920 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	78db      	ldrb	r3, [r3, #3]
 8002906:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	785b      	ldrb	r3, [r3, #1]
 800290c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800290e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002914:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	22ca      	movs	r2, #202	; 0xca
 8002926:	625a      	str	r2, [r3, #36]	; 0x24
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2253      	movs	r2, #83	; 0x53
 800292e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	0018      	movs	r0, r3
 8002934:	f000 fa15 	bl	8002d62 <RTC_EnterInitMode>
 8002938:	1e03      	subs	r3, r0, #0
 800293a:	d00d      	beq.n	8002958 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	22ff      	movs	r2, #255	; 0xff
 8002942:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2221      	movs	r2, #33	; 0x21
 8002948:	2104      	movs	r1, #4
 800294a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	2100      	movs	r1, #0
 8002952:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e034      	b.n	80029c2 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	491b      	ldr	r1, [pc, #108]	; (80029cc <HAL_RTC_SetDate+0x158>)
 8002960:	400a      	ands	r2, r1
 8002962:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	438a      	bics	r2, r1
 8002972:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2220      	movs	r2, #32
 800297c:	4013      	ands	r3, r2
 800297e:	d113      	bne.n	80029a8 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	0018      	movs	r0, r3
 8002984:	f000 f9c6 	bl	8002d14 <HAL_RTC_WaitForSynchro>
 8002988:	1e03      	subs	r3, r0, #0
 800298a:	d00d      	beq.n	80029a8 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	22ff      	movs	r2, #255	; 0xff
 8002992:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2221      	movs	r2, #33	; 0x21
 8002998:	2104      	movs	r1, #4
 800299a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	2100      	movs	r1, #0
 80029a2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e00c      	b.n	80029c2 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	22ff      	movs	r2, #255	; 0xff
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2221      	movs	r2, #33	; 0x21
 80029b4:	2101      	movs	r1, #1
 80029b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	2100      	movs	r1, #0
 80029be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029c0:	2300      	movs	r3, #0
  }
}
 80029c2:	0018      	movs	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b007      	add	sp, #28
 80029c8:	bd90      	pop	{r4, r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	00ffff3f 	.word	0x00ffff3f

080029d0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b089      	sub	sp, #36	; 0x24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2220      	movs	r2, #32
 80029e0:	5c9b      	ldrb	r3, [r3, r2]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_RTC_SetAlarm_IT+0x1a>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e130      	b.n	8002c4c <HAL_RTC_SetAlarm_IT+0x27c>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	2101      	movs	r1, #1
 80029f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2221      	movs	r2, #33	; 0x21
 80029f6:	2102      	movs	r1, #2
 80029f8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d136      	bne.n	8002a6e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2240      	movs	r2, #64	; 0x40
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d102      	bne.n	8002a12 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f000 f9cd 	bl	8002db6 <RTC_ByteToBcd2>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	785b      	ldrb	r3, [r3, #1]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 f9c6 	bl	8002db6 <RTC_ByteToBcd2>
 8002a2a:	0003      	movs	r3, r0
 8002a2c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a2e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	789b      	ldrb	r3, [r3, #2]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f000 f9be 	bl	8002db6 <RTC_ByteToBcd2>
 8002a3a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002a3c:	0022      	movs	r2, r4
 8002a3e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	78db      	ldrb	r3, [r3, #3]
 8002a44:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002a46:	431a      	orrs	r2, r3
 8002a48:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	5c9b      	ldrb	r3, [r3, r2]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 f9b0 	bl	8002db6 <RTC_ByteToBcd2>
 8002a56:	0003      	movs	r3, r0
 8002a58:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002a5a:	0022      	movs	r2, r4
 8002a5c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002a62:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	e022      	b.n	8002ab4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2240      	movs	r2, #64	; 0x40
 8002a76:	4013      	ands	r3, r2
 8002a78:	d102      	bne.n	8002a80 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	785b      	ldrb	r3, [r3, #1]
 8002a8a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a8c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002a92:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	78db      	ldrb	r3, [r3, #3]
 8002a98:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002a9a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2120      	movs	r1, #32
 8002aa0:	5c5b      	ldrb	r3, [r3, r1]
 8002aa2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002aa4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002aaa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	22ca      	movs	r2, #202	; 0xca
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2253      	movs	r2, #83	; 0x53
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d14e      	bne.n	8002b7a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	495b      	ldr	r1, [pc, #364]	; (8002c54 <HAL_RTC_SetAlarm_IT+0x284>)
 8002ae8:	400a      	ands	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	22ff      	movs	r2, #255	; 0xff
 8002af4:	401a      	ands	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4957      	ldr	r1, [pc, #348]	; (8002c58 <HAL_RTC_SetAlarm_IT+0x288>)
 8002afc:	430a      	orrs	r2, r1
 8002afe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002b00:	f7fe fab2 	bl	8001068 <HAL_GetTick>
 8002b04:	0003      	movs	r3, r0
 8002b06:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002b08:	e016      	b.n	8002b38 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b0a:	f7fe faad 	bl	8001068 <HAL_GetTick>
 8002b0e:	0002      	movs	r2, r0
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	1ad2      	subs	r2, r2, r3
 8002b14:	23fa      	movs	r3, #250	; 0xfa
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d90d      	bls.n	8002b38 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	22ff      	movs	r2, #255	; 0xff
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2221      	movs	r2, #33	; 0x21
 8002b28:	2103      	movs	r1, #3
 8002b2a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	2100      	movs	r1, #0
 8002b32:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e089      	b.n	8002c4c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	4013      	ands	r3, r2
 8002b42:	d0e2      	beq.n	8002b0a <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	0049      	lsls	r1, r1, #1
 8002b62:	430a      	orrs	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2180      	movs	r1, #128	; 0x80
 8002b72:	0149      	lsls	r1, r1, #5
 8002b74:	430a      	orrs	r2, r1
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	e04d      	b.n	8002c16 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4935      	ldr	r1, [pc, #212]	; (8002c5c <HAL_RTC_SetAlarm_IT+0x28c>)
 8002b86:	400a      	ands	r2, r1
 8002b88:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	22ff      	movs	r2, #255	; 0xff
 8002b92:	401a      	ands	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4931      	ldr	r1, [pc, #196]	; (8002c60 <HAL_RTC_SetAlarm_IT+0x290>)
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002b9e:	f7fe fa63 	bl	8001068 <HAL_GetTick>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002ba6:	e016      	b.n	8002bd6 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ba8:	f7fe fa5e 	bl	8001068 <HAL_GetTick>
 8002bac:	0002      	movs	r2, r0
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	1ad2      	subs	r2, r2, r3
 8002bb2:	23fa      	movs	r3, #250	; 0xfa
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d90d      	bls.n	8002bd6 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	22ff      	movs	r2, #255	; 0xff
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2221      	movs	r2, #33	; 0x21
 8002bc6:	2103      	movs	r1, #3
 8002bc8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	2100      	movs	r1, #0
 8002bd0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e03a      	b.n	8002c4c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	4013      	ands	r3, r2
 8002be0:	d0e2      	beq.n	8002ba8 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2180      	movs	r1, #128	; 0x80
 8002bfe:	0089      	lsls	r1, r1, #2
 8002c00:	430a      	orrs	r2, r1
 8002c02:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2180      	movs	r1, #128	; 0x80
 8002c10:	0189      	lsls	r1, r1, #6
 8002c12:	430a      	orrs	r2, r1
 8002c14:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002c16:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <HAL_RTC_SetAlarm_IT+0x294>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_RTC_SetAlarm_IT+0x294>)
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	0289      	lsls	r1, r1, #10
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <HAL_RTC_SetAlarm_IT+0x294>)
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_RTC_SetAlarm_IT+0x294>)
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	0289      	lsls	r1, r1, #10
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	22ff      	movs	r2, #255	; 0xff
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2221      	movs	r2, #33	; 0x21
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2220      	movs	r2, #32
 8002c46:	2100      	movs	r1, #0
 8002c48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b009      	add	sp, #36	; 0x24
 8002c52:	bd90      	pop	{r4, r7, pc}
 8002c54:	fffffeff 	.word	0xfffffeff
 8002c58:	fffffe7f 	.word	0xfffffe7f
 8002c5c:	fffffdff 	.word	0xfffffdff
 8002c60:	fffffd7f 	.word	0xfffffd7f
 8002c64:	40010400 	.word	0x40010400

08002c68 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	015b      	lsls	r3, r3, #5
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d014      	beq.n	8002ca8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	2380      	movs	r3, #128	; 0x80
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d00d      	beq.n	8002ca8 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 f838 	bl	8002d04 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	22ff      	movs	r2, #255	; 0xff
 8002c9c:	401a      	ands	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4915      	ldr	r1, [pc, #84]	; (8002cf8 <HAL_RTC_AlarmIRQHandler+0x90>)
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	019b      	lsls	r3, r3, #6
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d014      	beq.n	8002ce0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f000 f89d 	bl	8002e06 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	22ff      	movs	r2, #255	; 0xff
 8002cd4:	401a      	ands	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4908      	ldr	r1, [pc, #32]	; (8002cfc <HAL_RTC_AlarmIRQHandler+0x94>)
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <HAL_RTC_AlarmIRQHandler+0x98>)
 8002ce2:	2280      	movs	r2, #128	; 0x80
 8002ce4:	0292      	lsls	r2, r2, #10
 8002ce6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2221      	movs	r2, #33	; 0x21
 8002cec:	2101      	movs	r1, #1
 8002cee:	5499      	strb	r1, [r3, r2]
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	fffffe7f 	.word	0xfffffe7f
 8002cfc:	fffffd7f 	.word	0xfffffd7f
 8002d00:	40010400 	.word	0x40010400

08002d04 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b002      	add	sp, #8
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	21a0      	movs	r1, #160	; 0xa0
 8002d28:	438a      	bics	r2, r1
 8002d2a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002d2c:	f7fe f99c 	bl	8001068 <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d34:	e00a      	b.n	8002d4c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d36:	f7fe f997 	bl	8001068 <HAL_GetTick>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1ad2      	subs	r2, r2, r3
 8002d40:	23fa      	movs	r3, #250	; 0xfa
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d901      	bls.n	8002d4c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e006      	b.n	8002d5a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2220      	movs	r2, #32
 8002d54:	4013      	ands	r3, r2
 8002d56:	d0ee      	beq.n	8002d36 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b004      	add	sp, #16
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2240      	movs	r2, #64	; 0x40
 8002d72:	4013      	ands	r3, r2
 8002d74:	d11a      	bne.n	8002dac <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	4252      	negs	r2, r2
 8002d7e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002d80:	f7fe f972 	bl	8001068 <HAL_GetTick>
 8002d84:	0003      	movs	r3, r0
 8002d86:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002d88:	e00a      	b.n	8002da0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002d8a:	f7fe f96d 	bl	8001068 <HAL_GetTick>
 8002d8e:	0002      	movs	r2, r0
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	1ad2      	subs	r2, r2, r3
 8002d94:	23fa      	movs	r3, #250	; 0xfa
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d901      	bls.n	8002da0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e006      	b.n	8002dae <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2240      	movs	r2, #64	; 0x40
 8002da8:	4013      	ands	r3, r2
 8002daa:	d0ee      	beq.n	8002d8a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b004      	add	sp, #16
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	1dfb      	adds	r3, r7, #7
 8002dc0:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002dc6:	230b      	movs	r3, #11
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	1dfa      	adds	r2, r7, #7
 8002dcc:	7812      	ldrb	r2, [r2, #0]
 8002dce:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002dd0:	e008      	b.n	8002de4 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002dd8:	220b      	movs	r2, #11
 8002dda:	18bb      	adds	r3, r7, r2
 8002ddc:	18ba      	adds	r2, r7, r2
 8002dde:	7812      	ldrb	r2, [r2, #0]
 8002de0:	3a0a      	subs	r2, #10
 8002de2:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002de4:	210b      	movs	r1, #11
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b09      	cmp	r3, #9
 8002dec:	d8f1      	bhi.n	8002dd2 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	187b      	adds	r3, r7, r1
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	b2db      	uxtb	r3, r3
}
 8002dfe:	0018      	movs	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b004      	add	sp, #16
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b002      	add	sp, #8
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e083      	b.n	8002f32 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	2382      	movs	r3, #130	; 0x82
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d009      	beq.n	8002e52 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	61da      	str	r2, [r3, #28]
 8002e44:	e005      	b.n	8002e52 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2251      	movs	r2, #81	; 0x51
 8002e5c:	5c9b      	ldrb	r3, [r3, r2]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d107      	bne.n	8002e74 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2250      	movs	r2, #80	; 0x50
 8002e68:	2100      	movs	r1, #0
 8002e6a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f7fd fefc 	bl	8000c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2251      	movs	r2, #81	; 0x51
 8002e78:	2102      	movs	r1, #2
 8002e7a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2140      	movs	r1, #64	; 0x40
 8002e88:	438a      	bics	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	2382      	movs	r3, #130	; 0x82
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	401a      	ands	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	2384      	movs	r3, #132	; 0x84
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	400b      	ands	r3, r1
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68d9      	ldr	r1, [r3, #12]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	400b      	ands	r3, r1
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	400b      	ands	r3, r1
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6999      	ldr	r1, [r3, #24]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	400b      	ands	r3, r1
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	2138      	movs	r1, #56	; 0x38
 8002ed4:	400b      	ands	r3, r1
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	2180      	movs	r1, #128	; 0x80
 8002ede:	400b      	ands	r3, r1
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	0011      	movs	r1, r2
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	019b      	lsls	r3, r3, #6
 8002eec:	401a      	ands	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	0c1b      	lsrs	r3, r3, #16
 8002efc:	2204      	movs	r2, #4
 8002efe:	4013      	ands	r3, r2
 8002f00:	0019      	movs	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	2210      	movs	r2, #16
 8002f08:	401a      	ands	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4907      	ldr	r1, [pc, #28]	; (8002f3c <HAL_SPI_Init+0x124>)
 8002f1e:	400a      	ands	r2, r1
 8002f20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2251      	movs	r2, #81	; 0x51
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	0018      	movs	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b002      	add	sp, #8
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	fffff7ff 	.word	0xfffff7ff

08002f40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	1dbb      	adds	r3, r7, #6
 8002f4e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f50:	231f      	movs	r3, #31
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2250      	movs	r2, #80	; 0x50
 8002f5c:	5c9b      	ldrb	r3, [r3, r2]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_SPI_Transmit+0x26>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e13e      	b.n	80031e4 <HAL_SPI_Transmit+0x2a4>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2250      	movs	r2, #80	; 0x50
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f6e:	f7fe f87b 	bl	8001068 <HAL_GetTick>
 8002f72:	0003      	movs	r3, r0
 8002f74:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002f76:	2316      	movs	r3, #22
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	1dba      	adds	r2, r7, #6
 8002f7c:	8812      	ldrh	r2, [r2, #0]
 8002f7e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2251      	movs	r2, #81	; 0x51
 8002f84:	5c9b      	ldrb	r3, [r3, r2]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d004      	beq.n	8002f96 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002f8c:	231f      	movs	r3, #31
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	2202      	movs	r2, #2
 8002f92:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f94:	e11b      	b.n	80031ce <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_SPI_Transmit+0x64>
 8002f9c:	1dbb      	adds	r3, r7, #6
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d104      	bne.n	8002fae <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002fa4:	231f      	movs	r3, #31
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
    goto error;
 8002fac:	e10f      	b.n	80031ce <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2251      	movs	r2, #81	; 0x51
 8002fb2:	2103      	movs	r1, #3
 8002fb4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1dba      	adds	r2, r7, #6
 8002fc6:	8812      	ldrh	r2, [r2, #0]
 8002fc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1dba      	adds	r2, r7, #6
 8002fce:	8812      	ldrh	r2, [r2, #0]
 8002fd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	021b      	lsls	r3, r3, #8
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d110      	bne.n	800301e <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2140      	movs	r1, #64	; 0x40
 8003008:	438a      	bics	r2, r1
 800300a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2180      	movs	r1, #128	; 0x80
 8003018:	01c9      	lsls	r1, r1, #7
 800301a:	430a      	orrs	r2, r1
 800301c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2240      	movs	r2, #64	; 0x40
 8003026:	4013      	ands	r3, r2
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	d007      	beq.n	800303c <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2140      	movs	r1, #64	; 0x40
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	429a      	cmp	r2, r3
 8003046:	d14e      	bne.n	80030e6 <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <HAL_SPI_Transmit+0x11a>
 8003050:	2316      	movs	r3, #22
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d13f      	bne.n	80030da <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	881a      	ldrh	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	1c9a      	adds	r2, r3, #2
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800307e:	e02c      	b.n	80030da <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2202      	movs	r2, #2
 8003088:	4013      	ands	r3, r2
 800308a:	2b02      	cmp	r3, #2
 800308c:	d112      	bne.n	80030b4 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	881a      	ldrh	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	1c9a      	adds	r2, r3, #2
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80030b2:	e012      	b.n	80030da <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030b4:	f7fd ffd8 	bl	8001068 <HAL_GetTick>
 80030b8:	0002      	movs	r2, r0
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d802      	bhi.n	80030ca <HAL_SPI_Transmit+0x18a>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	3301      	adds	r3, #1
 80030c8:	d102      	bne.n	80030d0 <HAL_SPI_Transmit+0x190>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d104      	bne.n	80030da <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80030d0:	231f      	movs	r3, #31
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	2203      	movs	r2, #3
 80030d6:	701a      	strb	r2, [r3, #0]
          goto error;
 80030d8:	e079      	b.n	80031ce <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1cd      	bne.n	8003080 <HAL_SPI_Transmit+0x140>
 80030e4:	e04f      	b.n	8003186 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d004      	beq.n	80030f8 <HAL_SPI_Transmit+0x1b8>
 80030ee:	2316      	movs	r3, #22
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d141      	bne.n	800317c <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	330c      	adds	r3, #12
 8003102:	7812      	ldrb	r2, [r2, #0]
 8003104:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800311e:	e02d      	b.n	800317c <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2202      	movs	r2, #2
 8003128:	4013      	ands	r3, r2
 800312a:	2b02      	cmp	r3, #2
 800312c:	d113      	bne.n	8003156 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	330c      	adds	r3, #12
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	86da      	strh	r2, [r3, #54]	; 0x36
 8003154:	e012      	b.n	800317c <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003156:	f7fd ff87 	bl	8001068 <HAL_GetTick>
 800315a:	0002      	movs	r2, r0
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d802      	bhi.n	800316c <HAL_SPI_Transmit+0x22c>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	3301      	adds	r3, #1
 800316a:	d102      	bne.n	8003172 <HAL_SPI_Transmit+0x232>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d104      	bne.n	800317c <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8003172:	231f      	movs	r3, #31
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	2203      	movs	r2, #3
 8003178:	701a      	strb	r2, [r3, #0]
          goto error;
 800317a:	e028      	b.n	80031ce <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1cc      	bne.n	8003120 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	6839      	ldr	r1, [r7, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	0018      	movs	r0, r3
 800318e:	f000 fa77 	bl	8003680 <SPI_EndRxTxTransaction>
 8003192:	1e03      	subs	r3, r0, #0
 8003194:	d002      	beq.n	800319c <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10a      	bne.n	80031ba <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031a4:	2300      	movs	r3, #0
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d004      	beq.n	80031cc <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 80031c2:	231f      	movs	r3, #31
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	e000      	b.n	80031ce <HAL_SPI_Transmit+0x28e>
  }

error:
 80031cc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2251      	movs	r2, #81	; 0x51
 80031d2:	2101      	movs	r1, #1
 80031d4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2250      	movs	r2, #80	; 0x50
 80031da:	2100      	movs	r1, #0
 80031dc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80031de:	231f      	movs	r3, #31
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	781b      	ldrb	r3, [r3, #0]
}
 80031e4:	0018      	movs	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b008      	add	sp, #32
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08c      	sub	sp, #48	; 0x30
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	001a      	movs	r2, r3
 80031fa:	1cbb      	adds	r3, r7, #2
 80031fc:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031fe:	2301      	movs	r3, #1
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003202:	232b      	movs	r3, #43	; 0x2b
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2250      	movs	r2, #80	; 0x50
 800320e:	5c9b      	ldrb	r3, [r3, r2]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_SPI_TransmitReceive+0x2c>
 8003214:	2302      	movs	r3, #2
 8003216:	e1a0      	b.n	800355a <HAL_SPI_TransmitReceive+0x36e>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2250      	movs	r2, #80	; 0x50
 800321c:	2101      	movs	r1, #1
 800321e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003220:	f7fd ff22 	bl	8001068 <HAL_GetTick>
 8003224:	0003      	movs	r3, r0
 8003226:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003228:	2023      	movs	r0, #35	; 0x23
 800322a:	183b      	adds	r3, r7, r0
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	2151      	movs	r1, #81	; 0x51
 8003230:	5c52      	ldrb	r2, [r2, r1]
 8003232:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800323a:	231a      	movs	r3, #26
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	1cba      	adds	r2, r7, #2
 8003240:	8812      	ldrh	r2, [r2, #0]
 8003242:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003244:	183b      	adds	r3, r7, r0
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d011      	beq.n	8003270 <HAL_SPI_TransmitReceive+0x84>
 800324c:	69fa      	ldr	r2, [r7, #28]
 800324e:	2382      	movs	r3, #130	; 0x82
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	429a      	cmp	r2, r3
 8003254:	d107      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x7a>
 800325e:	183b      	adds	r3, r7, r0
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b04      	cmp	r3, #4
 8003264:	d004      	beq.n	8003270 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003266:	232b      	movs	r3, #43	; 0x2b
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	2202      	movs	r2, #2
 800326c:	701a      	strb	r2, [r3, #0]
    goto error;
 800326e:	e169      	b.n	8003544 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d006      	beq.n	8003284 <HAL_SPI_TransmitReceive+0x98>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_SPI_TransmitReceive+0x98>
 800327c:	1cbb      	adds	r3, r7, #2
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d104      	bne.n	800328e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003284:	232b      	movs	r3, #43	; 0x2b
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]
    goto error;
 800328c:	e15a      	b.n	8003544 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2251      	movs	r2, #81	; 0x51
 8003292:	5c9b      	ldrb	r3, [r3, r2]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b04      	cmp	r3, #4
 8003298:	d003      	beq.n	80032a2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2251      	movs	r2, #81	; 0x51
 800329e:	2105      	movs	r1, #5
 80032a0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1cba      	adds	r2, r7, #2
 80032b2:	8812      	ldrh	r2, [r2, #0]
 80032b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1cba      	adds	r2, r7, #2
 80032ba:	8812      	ldrh	r2, [r2, #0]
 80032bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1cba      	adds	r2, r7, #2
 80032c8:	8812      	ldrh	r2, [r2, #0]
 80032ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1cba      	adds	r2, r7, #2
 80032d0:	8812      	ldrh	r2, [r2, #0]
 80032d2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2240      	movs	r2, #64	; 0x40
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b40      	cmp	r3, #64	; 0x40
 80032ec:	d007      	beq.n	80032fe <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2140      	movs	r1, #64	; 0x40
 80032fa:	430a      	orrs	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	429a      	cmp	r2, r3
 8003308:	d000      	beq.n	800330c <HAL_SPI_TransmitReceive+0x120>
 800330a:	e07a      	b.n	8003402 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d004      	beq.n	800331e <HAL_SPI_TransmitReceive+0x132>
 8003314:	231a      	movs	r3, #26
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d166      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	881a      	ldrh	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	1c9a      	adds	r2, r3, #2
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003342:	e053      	b.n	80033ec <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2202      	movs	r2, #2
 800334c:	4013      	ands	r3, r2
 800334e:	2b02      	cmp	r3, #2
 8003350:	d11b      	bne.n	800338a <HAL_SPI_TransmitReceive+0x19e>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d016      	beq.n	800338a <HAL_SPI_TransmitReceive+0x19e>
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335e:	2b01      	cmp	r3, #1
 8003360:	d113      	bne.n	800338a <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	881a      	ldrh	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	1c9a      	adds	r2, r3, #2
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2201      	movs	r2, #1
 8003392:	4013      	ands	r3, r2
 8003394:	2b01      	cmp	r3, #1
 8003396:	d119      	bne.n	80033cc <HAL_SPI_TransmitReceive+0x1e0>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d014      	beq.n	80033cc <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	b292      	uxth	r2, r2
 80033ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b4:	1c9a      	adds	r2, r3, #2
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033c8:	2301      	movs	r3, #1
 80033ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033cc:	f7fd fe4c 	bl	8001068 <HAL_GetTick>
 80033d0:	0002      	movs	r2, r0
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033d8:	429a      	cmp	r2, r3
 80033da:	d807      	bhi.n	80033ec <HAL_SPI_TransmitReceive+0x200>
 80033dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033de:	3301      	adds	r3, #1
 80033e0:	d004      	beq.n	80033ec <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 80033e2:	232b      	movs	r3, #43	; 0x2b
 80033e4:	18fb      	adds	r3, r7, r3
 80033e6:	2203      	movs	r2, #3
 80033e8:	701a      	strb	r2, [r3, #0]
        goto error;
 80033ea:	e0ab      	b.n	8003544 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1a6      	bne.n	8003344 <HAL_SPI_TransmitReceive+0x158>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1a1      	bne.n	8003344 <HAL_SPI_TransmitReceive+0x158>
 8003400:	e07f      	b.n	8003502 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_SPI_TransmitReceive+0x22a>
 800340a:	231a      	movs	r3, #26
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d000      	beq.n	8003416 <HAL_SPI_TransmitReceive+0x22a>
 8003414:	e06b      	b.n	80034ee <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	330c      	adds	r3, #12
 8003420:	7812      	ldrb	r2, [r2, #0]
 8003422:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800343c:	e057      	b.n	80034ee <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2202      	movs	r2, #2
 8003446:	4013      	ands	r3, r2
 8003448:	2b02      	cmp	r3, #2
 800344a:	d11c      	bne.n	8003486 <HAL_SPI_TransmitReceive+0x29a>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d017      	beq.n	8003486 <HAL_SPI_TransmitReceive+0x29a>
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d114      	bne.n	8003486 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	330c      	adds	r3, #12
 8003466:	7812      	ldrb	r2, [r2, #0]
 8003468:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2201      	movs	r2, #1
 800348e:	4013      	ands	r3, r2
 8003490:	2b01      	cmp	r3, #1
 8003492:	d119      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0x2dc>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d014      	beq.n	80034c8 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034c4:	2301      	movs	r3, #1
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034c8:	f7fd fdce 	bl	8001068 <HAL_GetTick>
 80034cc:	0002      	movs	r2, r0
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d802      	bhi.n	80034de <HAL_SPI_TransmitReceive+0x2f2>
 80034d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034da:	3301      	adds	r3, #1
 80034dc:	d102      	bne.n	80034e4 <HAL_SPI_TransmitReceive+0x2f8>
 80034de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d104      	bne.n	80034ee <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 80034e4:	232b      	movs	r3, #43	; 0x2b
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	2203      	movs	r2, #3
 80034ea:	701a      	strb	r2, [r3, #0]
        goto error;
 80034ec:	e02a      	b.n	8003544 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1a2      	bne.n	800343e <HAL_SPI_TransmitReceive+0x252>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d19d      	bne.n	800343e <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003504:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	0018      	movs	r0, r3
 800350a:	f000 f8b9 	bl	8003680 <SPI_EndRxTxTransaction>
 800350e:	1e03      	subs	r3, r0, #0
 8003510:	d007      	beq.n	8003522 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8003512:	232b      	movs	r3, #43	; 0x2b
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003520:	e010      	b.n	8003544 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10b      	bne.n	8003542 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	e000      	b.n	8003544 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8003542:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2251      	movs	r2, #81	; 0x51
 8003548:	2101      	movs	r1, #1
 800354a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2250      	movs	r2, #80	; 0x50
 8003550:	2100      	movs	r1, #0
 8003552:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003554:	232b      	movs	r3, #43	; 0x2b
 8003556:	18fb      	adds	r3, r7, r3
 8003558:	781b      	ldrb	r3, [r3, #0]
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b00c      	add	sp, #48	; 0x30
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	1dfb      	adds	r3, r7, #7
 8003572:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003574:	f7fd fd78 	bl	8001068 <HAL_GetTick>
 8003578:	0002      	movs	r2, r0
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	18d3      	adds	r3, r2, r3
 8003582:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003584:	f7fd fd70 	bl	8001068 <HAL_GetTick>
 8003588:	0003      	movs	r3, r0
 800358a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800358c:	4b3a      	ldr	r3, [pc, #232]	; (8003678 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	015b      	lsls	r3, r3, #5
 8003592:	0d1b      	lsrs	r3, r3, #20
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	4353      	muls	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800359a:	e058      	b.n	800364e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	3301      	adds	r3, #1
 80035a0:	d055      	beq.n	800364e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035a2:	f7fd fd61 	bl	8001068 <HAL_GetTick>
 80035a6:	0002      	movs	r2, r0
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d902      	bls.n	80035b8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d142      	bne.n	800363e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	21e0      	movs	r1, #224	; 0xe0
 80035c4:	438a      	bics	r2, r1
 80035c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	2382      	movs	r3, #130	; 0x82
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d113      	bne.n	80035fc <SPI_WaitFlagStateUntilTimeout+0x98>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	021b      	lsls	r3, r3, #8
 80035dc:	429a      	cmp	r2, r3
 80035de:	d005      	beq.n	80035ec <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d107      	bne.n	80035fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2140      	movs	r1, #64	; 0x40
 80035f8:	438a      	bics	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	019b      	lsls	r3, r3, #6
 8003604:	429a      	cmp	r2, r3
 8003606:	d110      	bne.n	800362a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	491a      	ldr	r1, [pc, #104]	; (800367c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003614:	400a      	ands	r2, r1
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2180      	movs	r1, #128	; 0x80
 8003624:	0189      	lsls	r1, r1, #6
 8003626:	430a      	orrs	r2, r1
 8003628:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2251      	movs	r2, #81	; 0x51
 800362e:	2101      	movs	r1, #1
 8003630:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2250      	movs	r2, #80	; 0x50
 8003636:	2100      	movs	r1, #0
 8003638:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e017      	b.n	800366e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3b01      	subs	r3, #1
 800364c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	4013      	ands	r3, r2
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	425a      	negs	r2, r3
 800365e:	4153      	adcs	r3, r2
 8003660:	b2db      	uxtb	r3, r3
 8003662:	001a      	movs	r2, r3
 8003664:	1dfb      	adds	r3, r7, #7
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d197      	bne.n	800359c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b008      	add	sp, #32
 8003674:	bd80      	pop	{r7, pc}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	20000000 	.word	0x20000000
 800367c:	ffffdfff 	.word	0xffffdfff

08003680 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af02      	add	r7, sp, #8
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <SPI_EndRxTxTransaction+0x84>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	491d      	ldr	r1, [pc, #116]	; (8003708 <SPI_EndRxTxTransaction+0x88>)
 8003692:	0018      	movs	r0, r3
 8003694:	f7fc fd42 	bl	800011c <__udivsi3>
 8003698:	0003      	movs	r3, r0
 800369a:	001a      	movs	r2, r3
 800369c:	0013      	movs	r3, r2
 800369e:	015b      	lsls	r3, r3, #5
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	189b      	adds	r3, r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	2382      	movs	r3, #130	; 0x82
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d112      	bne.n	80036dc <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	0013      	movs	r3, r2
 80036c0:	2200      	movs	r2, #0
 80036c2:	2180      	movs	r1, #128	; 0x80
 80036c4:	f7ff ff4e 	bl	8003564 <SPI_WaitFlagStateUntilTimeout>
 80036c8:	1e03      	subs	r3, r0, #0
 80036ca:	d016      	beq.n	80036fa <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d0:	2220      	movs	r2, #32
 80036d2:	431a      	orrs	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e00f      	b.n	80036fc <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2280      	movs	r2, #128	; 0x80
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b80      	cmp	r3, #128	; 0x80
 80036f4:	d0f2      	beq.n	80036dc <SPI_EndRxTxTransaction+0x5c>
 80036f6:	e000      	b.n	80036fa <SPI_EndRxTxTransaction+0x7a>
        break;
 80036f8:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b006      	add	sp, #24
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000000 	.word	0x20000000
 8003708:	016e3600 	.word	0x016e3600

0800370c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e044      	b.n	80037a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003722:	2b00      	cmp	r3, #0
 8003724:	d107      	bne.n	8003736 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2274      	movs	r2, #116	; 0x74
 800372a:	2100      	movs	r1, #0
 800372c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	0018      	movs	r0, r3
 8003732:	f7fd fb33 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2224      	movs	r2, #36	; 0x24
 800373a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2101      	movs	r1, #1
 8003748:	438a      	bics	r2, r1
 800374a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	0018      	movs	r0, r3
 8003750:	f000 fbce 	bl	8003ef0 <UART_SetConfig>
 8003754:	0003      	movs	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e024      	b.n	80037a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	0018      	movs	r0, r3
 800376a:	f000 fe61 	bl	8004430 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	490d      	ldr	r1, [pc, #52]	; (80037b0 <HAL_UART_Init+0xa4>)
 800377a:	400a      	ands	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	212a      	movs	r1, #42	; 0x2a
 800378a:	438a      	bics	r2, r1
 800378c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2101      	movs	r1, #1
 800379a:	430a      	orrs	r2, r1
 800379c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	0018      	movs	r0, r3
 80037a2:	f000 fef9 	bl	8004598 <UART_CheckIdleState>
 80037a6:	0003      	movs	r3, r0
}
 80037a8:	0018      	movs	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b002      	add	sp, #8
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	ffffb7ff 	.word	0xffffb7ff

080037b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08a      	sub	sp, #40	; 0x28
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	1dbb      	adds	r3, r7, #6
 80037c2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d000      	beq.n	80037ce <HAL_UART_Transmit+0x1a>
 80037cc:	e095      	b.n	80038fa <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_UART_Transmit+0x28>
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e08d      	b.n	80038fc <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	015b      	lsls	r3, r3, #5
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d109      	bne.n	8003800 <HAL_UART_Transmit+0x4c>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d105      	bne.n	8003800 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2201      	movs	r2, #1
 80037f8:	4013      	ands	r3, r2
 80037fa:	d001      	beq.n	8003800 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e07d      	b.n	80038fc <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2274      	movs	r2, #116	; 0x74
 8003804:	5c9b      	ldrb	r3, [r3, r2]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_UART_Transmit+0x5a>
 800380a:	2302      	movs	r3, #2
 800380c:	e076      	b.n	80038fc <HAL_UART_Transmit+0x148>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2274      	movs	r2, #116	; 0x74
 8003812:	2101      	movs	r1, #1
 8003814:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2280      	movs	r2, #128	; 0x80
 800381a:	2100      	movs	r1, #0
 800381c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2221      	movs	r2, #33	; 0x21
 8003822:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003824:	f7fd fc20 	bl	8001068 <HAL_GetTick>
 8003828:	0003      	movs	r3, r0
 800382a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1dba      	adds	r2, r7, #6
 8003830:	2150      	movs	r1, #80	; 0x50
 8003832:	8812      	ldrh	r2, [r2, #0]
 8003834:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1dba      	adds	r2, r7, #6
 800383a:	2152      	movs	r1, #82	; 0x52
 800383c:	8812      	ldrh	r2, [r2, #0]
 800383e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	015b      	lsls	r3, r3, #5
 8003848:	429a      	cmp	r2, r3
 800384a:	d108      	bne.n	800385e <HAL_UART_Transmit+0xaa>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d104      	bne.n	800385e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	e003      	b.n	8003866 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2274      	movs	r2, #116	; 0x74
 800386a:	2100      	movs	r1, #0
 800386c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800386e:	e02c      	b.n	80038ca <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	0013      	movs	r3, r2
 800387a:	2200      	movs	r2, #0
 800387c:	2180      	movs	r1, #128	; 0x80
 800387e:	f000 fed3 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 8003882:	1e03      	subs	r3, r0, #0
 8003884:	d001      	beq.n	800388a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e038      	b.n	80038fc <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10b      	bne.n	80038a8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	001a      	movs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	05d2      	lsls	r2, r2, #23
 800389c:	0dd2      	lsrs	r2, r2, #23
 800389e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	3302      	adds	r3, #2
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	e007      	b.n	80038b8 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2252      	movs	r2, #82	; 0x52
 80038bc:	5a9b      	ldrh	r3, [r3, r2]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b299      	uxth	r1, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2252      	movs	r2, #82	; 0x52
 80038c8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2252      	movs	r2, #82	; 0x52
 80038ce:	5a9b      	ldrh	r3, [r3, r2]
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1cc      	bne.n	8003870 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	0013      	movs	r3, r2
 80038e0:	2200      	movs	r2, #0
 80038e2:	2140      	movs	r1, #64	; 0x40
 80038e4:	f000 fea0 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 80038e8:	1e03      	subs	r3, r0, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e005      	b.n	80038fc <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	e000      	b.n	80038fc <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80038fa:	2302      	movs	r3, #2
  }
}
 80038fc:	0018      	movs	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	b008      	add	sp, #32
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b0ab      	sub	sp, #172	; 0xac
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	22a4      	movs	r2, #164	; 0xa4
 8003914:	18b9      	adds	r1, r7, r2
 8003916:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	20a0      	movs	r0, #160	; 0xa0
 8003920:	1839      	adds	r1, r7, r0
 8003922:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	219c      	movs	r1, #156	; 0x9c
 800392c:	1879      	adds	r1, r7, r1
 800392e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003930:	0011      	movs	r1, r2
 8003932:	18bb      	adds	r3, r7, r2
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a99      	ldr	r2, [pc, #612]	; (8003b9c <HAL_UART_IRQHandler+0x298>)
 8003938:	4013      	ands	r3, r2
 800393a:	2298      	movs	r2, #152	; 0x98
 800393c:	18bc      	adds	r4, r7, r2
 800393e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003940:	18bb      	adds	r3, r7, r2
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d114      	bne.n	8003972 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003948:	187b      	adds	r3, r7, r1
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2220      	movs	r2, #32
 800394e:	4013      	ands	r3, r2
 8003950:	d00f      	beq.n	8003972 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003952:	183b      	adds	r3, r7, r0
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2220      	movs	r2, #32
 8003958:	4013      	ands	r3, r2
 800395a:	d00a      	beq.n	8003972 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003960:	2b00      	cmp	r3, #0
 8003962:	d100      	bne.n	8003966 <HAL_UART_IRQHandler+0x62>
 8003964:	e298      	b.n	8003e98 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	0010      	movs	r0, r2
 800396e:	4798      	blx	r3
      }
      return;
 8003970:	e292      	b.n	8003e98 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003972:	2398      	movs	r3, #152	; 0x98
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d100      	bne.n	800397e <HAL_UART_IRQHandler+0x7a>
 800397c:	e114      	b.n	8003ba8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800397e:	239c      	movs	r3, #156	; 0x9c
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2201      	movs	r2, #1
 8003986:	4013      	ands	r3, r2
 8003988:	d106      	bne.n	8003998 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800398a:	23a0      	movs	r3, #160	; 0xa0
 800398c:	18fb      	adds	r3, r7, r3
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a83      	ldr	r2, [pc, #524]	; (8003ba0 <HAL_UART_IRQHandler+0x29c>)
 8003992:	4013      	ands	r3, r2
 8003994:	d100      	bne.n	8003998 <HAL_UART_IRQHandler+0x94>
 8003996:	e107      	b.n	8003ba8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003998:	23a4      	movs	r3, #164	; 0xa4
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2201      	movs	r2, #1
 80039a0:	4013      	ands	r3, r2
 80039a2:	d012      	beq.n	80039ca <HAL_UART_IRQHandler+0xc6>
 80039a4:	23a0      	movs	r3, #160	; 0xa0
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	4013      	ands	r3, r2
 80039b0:	d00b      	beq.n	80039ca <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2201      	movs	r2, #1
 80039b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2280      	movs	r2, #128	; 0x80
 80039be:	589b      	ldr	r3, [r3, r2]
 80039c0:	2201      	movs	r2, #1
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2180      	movs	r1, #128	; 0x80
 80039c8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039ca:	23a4      	movs	r3, #164	; 0xa4
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2202      	movs	r2, #2
 80039d2:	4013      	ands	r3, r2
 80039d4:	d011      	beq.n	80039fa <HAL_UART_IRQHandler+0xf6>
 80039d6:	239c      	movs	r3, #156	; 0x9c
 80039d8:	18fb      	adds	r3, r7, r3
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2201      	movs	r2, #1
 80039de:	4013      	ands	r3, r2
 80039e0:	d00b      	beq.n	80039fa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2202      	movs	r2, #2
 80039e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2280      	movs	r2, #128	; 0x80
 80039ee:	589b      	ldr	r3, [r3, r2]
 80039f0:	2204      	movs	r2, #4
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2180      	movs	r1, #128	; 0x80
 80039f8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039fa:	23a4      	movs	r3, #164	; 0xa4
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2204      	movs	r2, #4
 8003a02:	4013      	ands	r3, r2
 8003a04:	d011      	beq.n	8003a2a <HAL_UART_IRQHandler+0x126>
 8003a06:	239c      	movs	r3, #156	; 0x9c
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d00b      	beq.n	8003a2a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2204      	movs	r2, #4
 8003a18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2280      	movs	r2, #128	; 0x80
 8003a1e:	589b      	ldr	r3, [r3, r2]
 8003a20:	2202      	movs	r2, #2
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2180      	movs	r1, #128	; 0x80
 8003a28:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a2a:	23a4      	movs	r3, #164	; 0xa4
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2208      	movs	r2, #8
 8003a32:	4013      	ands	r3, r2
 8003a34:	d017      	beq.n	8003a66 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a36:	23a0      	movs	r3, #160	; 0xa0
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d105      	bne.n	8003a4e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a42:	239c      	movs	r3, #156	; 0x9c
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a4c:	d00b      	beq.n	8003a66 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2208      	movs	r2, #8
 8003a54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2280      	movs	r2, #128	; 0x80
 8003a5a:	589b      	ldr	r3, [r3, r2]
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2180      	movs	r1, #128	; 0x80
 8003a64:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a66:	23a4      	movs	r3, #164	; 0xa4
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	4013      	ands	r3, r2
 8003a72:	d013      	beq.n	8003a9c <HAL_UART_IRQHandler+0x198>
 8003a74:	23a0      	movs	r3, #160	; 0xa0
 8003a76:	18fb      	adds	r3, r7, r3
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	04db      	lsls	r3, r3, #19
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d00c      	beq.n	8003a9c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2280      	movs	r2, #128	; 0x80
 8003a88:	0112      	lsls	r2, r2, #4
 8003a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2280      	movs	r2, #128	; 0x80
 8003a90:	589b      	ldr	r3, [r3, r2]
 8003a92:	2220      	movs	r2, #32
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2180      	movs	r1, #128	; 0x80
 8003a9a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2280      	movs	r2, #128	; 0x80
 8003aa0:	589b      	ldr	r3, [r3, r2]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d100      	bne.n	8003aa8 <HAL_UART_IRQHandler+0x1a4>
 8003aa6:	e1f9      	b.n	8003e9c <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003aa8:	23a4      	movs	r3, #164	; 0xa4
 8003aaa:	18fb      	adds	r3, r7, r3
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ab4:	23a0      	movs	r3, #160	; 0xa0
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2220      	movs	r2, #32
 8003abc:	4013      	ands	r3, r2
 8003abe:	d008      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d004      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	0010      	movs	r0, r2
 8003ad0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2280      	movs	r2, #128	; 0x80
 8003ad6:	589b      	ldr	r3, [r3, r2]
 8003ad8:	2194      	movs	r1, #148	; 0x94
 8003ada:	187a      	adds	r2, r7, r1
 8003adc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2240      	movs	r2, #64	; 0x40
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	d004      	beq.n	8003af6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2228      	movs	r2, #40	; 0x28
 8003af2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003af4:	d047      	beq.n	8003b86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	0018      	movs	r0, r3
 8003afa:	f000 fe59 	bl	80047b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2240      	movs	r2, #64	; 0x40
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b40      	cmp	r3, #64	; 0x40
 8003b0a:	d137      	bne.n	8003b7c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b10:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b14:	2090      	movs	r0, #144	; 0x90
 8003b16:	183a      	adds	r2, r7, r0
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b20:	f383 8810 	msr	PRIMASK, r3
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2140      	movs	r1, #64	; 0x40
 8003b32:	438a      	bics	r2, r1
 8003b34:	609a      	str	r2, [r3, #8]
 8003b36:	183b      	adds	r3, r7, r0
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b3e:	f383 8810 	msr	PRIMASK, r3
}
 8003b42:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d012      	beq.n	8003b72 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <HAL_UART_IRQHandler+0x2a0>)
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7fd fbd1 	bl	8001300 <HAL_DMA_Abort_IT>
 8003b5e:	1e03      	subs	r3, r0, #0
 8003b60:	d01a      	beq.n	8003b98 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b70:	e012      	b.n	8003b98 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	0018      	movs	r0, r3
 8003b76:	f000 f9a7 	bl	8003ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7a:	e00d      	b.n	8003b98 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f000 f9a2 	bl	8003ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b84:	e008      	b.n	8003b98 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f000 f99d 	bl	8003ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2280      	movs	r2, #128	; 0x80
 8003b92:	2100      	movs	r1, #0
 8003b94:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003b96:	e181      	b.n	8003e9c <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b98:	46c0      	nop			; (mov r8, r8)
    return;
 8003b9a:	e17f      	b.n	8003e9c <HAL_UART_IRQHandler+0x598>
 8003b9c:	0000080f 	.word	0x0000080f
 8003ba0:	04000120 	.word	0x04000120
 8003ba4:	08004875 	.word	0x08004875

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d000      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x2ae>
 8003bb0:	e133      	b.n	8003e1a <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003bb2:	23a4      	movs	r3, #164	; 0xa4
 8003bb4:	18fb      	adds	r3, r7, r3
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2210      	movs	r2, #16
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d100      	bne.n	8003bc0 <HAL_UART_IRQHandler+0x2bc>
 8003bbe:	e12c      	b.n	8003e1a <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003bc0:	23a0      	movs	r3, #160	; 0xa0
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2210      	movs	r2, #16
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d100      	bne.n	8003bce <HAL_UART_IRQHandler+0x2ca>
 8003bcc:	e125      	b.n	8003e1a <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2240      	movs	r2, #64	; 0x40
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d000      	beq.n	8003be6 <HAL_UART_IRQHandler+0x2e2>
 8003be4:	e09d      	b.n	8003d22 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	217e      	movs	r1, #126	; 0x7e
 8003bf0:	187b      	adds	r3, r7, r1
 8003bf2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003bf4:	187b      	adds	r3, r7, r1
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d100      	bne.n	8003bfe <HAL_UART_IRQHandler+0x2fa>
 8003bfc:	e150      	b.n	8003ea0 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2258      	movs	r2, #88	; 0x58
 8003c02:	5a9b      	ldrh	r3, [r3, r2]
 8003c04:	187a      	adds	r2, r7, r1
 8003c06:	8812      	ldrh	r2, [r2, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d300      	bcc.n	8003c0e <HAL_UART_IRQHandler+0x30a>
 8003c0c:	e148      	b.n	8003ea0 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	187a      	adds	r2, r7, r1
 8003c12:	215a      	movs	r1, #90	; 0x5a
 8003c14:	8812      	ldrh	r2, [r2, #0]
 8003c16:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2220      	movs	r2, #32
 8003c22:	4013      	ands	r3, r2
 8003c24:	d16e      	bne.n	8003d04 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c26:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c30:	2301      	movs	r3, #1
 8003c32:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c36:	f383 8810 	msr	PRIMASK, r3
}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	499a      	ldr	r1, [pc, #616]	; (8003eb0 <HAL_UART_IRQHandler+0x5ac>)
 8003c48:	400a      	ands	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c52:	f383 8810 	msr	PRIMASK, r3
}
 8003c56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c58:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c60:	677b      	str	r3, [r7, #116]	; 0x74
 8003c62:	2301      	movs	r3, #1
 8003c64:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c68:	f383 8810 	msr	PRIMASK, r3
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2101      	movs	r1, #1
 8003c7a:	438a      	bics	r2, r1
 8003c7c:	609a      	str	r2, [r3, #8]
 8003c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c80:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c84:	f383 8810 	msr	PRIMASK, r3
}
 8003c88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c92:	673b      	str	r3, [r7, #112]	; 0x70
 8003c94:	2301      	movs	r3, #1
 8003c96:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c9a:	f383 8810 	msr	PRIMASK, r3
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2140      	movs	r1, #64	; 0x40
 8003cac:	438a      	bics	r2, r1
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cb2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb6:	f383 8810 	msr	PRIMASK, r3
}
 8003cba:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ccc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cd8:	f383 8810 	msr	PRIMASK, r3
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2110      	movs	r1, #16
 8003cea:	438a      	bics	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf4:	f383 8810 	msr	PRIMASK, r3
}
 8003cf8:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f7fd fabe 	bl	8001280 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2258      	movs	r2, #88	; 0x58
 8003d08:	5a9a      	ldrh	r2, [r3, r2]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	215a      	movs	r1, #90	; 0x5a
 8003d0e:	5a5b      	ldrh	r3, [r3, r1]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	0011      	movs	r1, r2
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f000 f8dc 	bl	8003ed8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d20:	e0be      	b.n	8003ea0 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2258      	movs	r2, #88	; 0x58
 8003d26:	5a99      	ldrh	r1, [r3, r2]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	225a      	movs	r2, #90	; 0x5a
 8003d2c:	5a9b      	ldrh	r3, [r3, r2]
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	208e      	movs	r0, #142	; 0x8e
 8003d32:	183b      	adds	r3, r7, r0
 8003d34:	1a8a      	subs	r2, r1, r2
 8003d36:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	225a      	movs	r2, #90	; 0x5a
 8003d3c:	5a9b      	ldrh	r3, [r3, r2]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d100      	bne.n	8003d46 <HAL_UART_IRQHandler+0x442>
 8003d44:	e0ae      	b.n	8003ea4 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8003d46:	183b      	adds	r3, r7, r0
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d100      	bne.n	8003d50 <HAL_UART_IRQHandler+0x44c>
 8003d4e:	e0a9      	b.n	8003ea4 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d50:	f3ef 8310 	mrs	r3, PRIMASK
 8003d54:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d56:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d58:	2488      	movs	r4, #136	; 0x88
 8003d5a:	193a      	adds	r2, r7, r4
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	2301      	movs	r3, #1
 8003d60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f383 8810 	msr	PRIMASK, r3
}
 8003d68:	46c0      	nop			; (mov r8, r8)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	494f      	ldr	r1, [pc, #316]	; (8003eb4 <HAL_UART_IRQHandler+0x5b0>)
 8003d76:	400a      	ands	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	193b      	adds	r3, r7, r4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f383 8810 	msr	PRIMASK, r3
}
 8003d86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d88:	f3ef 8310 	mrs	r3, PRIMASK
 8003d8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d8e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d90:	2484      	movs	r4, #132	; 0x84
 8003d92:	193a      	adds	r2, r7, r4
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	2301      	movs	r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f383 8810 	msr	PRIMASK, r3
}
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2101      	movs	r1, #1
 8003dae:	438a      	bics	r2, r1
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	193b      	adds	r3, r7, r4
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	f383 8810 	msr	PRIMASK, r3
}
 8003dbe:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dda:	2480      	movs	r4, #128	; 0x80
 8003ddc:	193a      	adds	r2, r7, r4
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	2301      	movs	r3, #1
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	f383 8810 	msr	PRIMASK, r3
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2110      	movs	r1, #16
 8003df8:	438a      	bics	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	193b      	adds	r3, r7, r4
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e04:	f383 8810 	msr	PRIMASK, r3
}
 8003e08:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e0a:	183b      	adds	r3, r7, r0
 8003e0c:	881a      	ldrh	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	0011      	movs	r1, r2
 8003e12:	0018      	movs	r0, r3
 8003e14:	f000 f860 	bl	8003ed8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e18:	e044      	b.n	8003ea4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e1a:	23a4      	movs	r3, #164	; 0xa4
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	035b      	lsls	r3, r3, #13
 8003e24:	4013      	ands	r3, r2
 8003e26:	d010      	beq.n	8003e4a <HAL_UART_IRQHandler+0x546>
 8003e28:	239c      	movs	r3, #156	; 0x9c
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	03db      	lsls	r3, r3, #15
 8003e32:	4013      	ands	r3, r2
 8003e34:	d009      	beq.n	8003e4a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2280      	movs	r2, #128	; 0x80
 8003e3c:	0352      	lsls	r2, r2, #13
 8003e3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	0018      	movs	r0, r3
 8003e44:	f000 fd58 	bl	80048f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e48:	e02f      	b.n	8003eaa <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e4a:	23a4      	movs	r3, #164	; 0xa4
 8003e4c:	18fb      	adds	r3, r7, r3
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2280      	movs	r2, #128	; 0x80
 8003e52:	4013      	ands	r3, r2
 8003e54:	d00f      	beq.n	8003e76 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e56:	23a0      	movs	r3, #160	; 0xa0
 8003e58:	18fb      	adds	r3, r7, r3
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2280      	movs	r2, #128	; 0x80
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d009      	beq.n	8003e76 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d01e      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	0010      	movs	r0, r2
 8003e72:	4798      	blx	r3
    }
    return;
 8003e74:	e018      	b.n	8003ea8 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e76:	23a4      	movs	r3, #164	; 0xa4
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2240      	movs	r2, #64	; 0x40
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d013      	beq.n	8003eaa <HAL_UART_IRQHandler+0x5a6>
 8003e82:	23a0      	movs	r3, #160	; 0xa0
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2240      	movs	r2, #64	; 0x40
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d00d      	beq.n	8003eaa <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	0018      	movs	r0, r3
 8003e92:	f000 fd06 	bl	80048a2 <UART_EndTransmit_IT>
    return;
 8003e96:	e008      	b.n	8003eaa <HAL_UART_IRQHandler+0x5a6>
      return;
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	e006      	b.n	8003eaa <HAL_UART_IRQHandler+0x5a6>
    return;
 8003e9c:	46c0      	nop			; (mov r8, r8)
 8003e9e:	e004      	b.n	8003eaa <HAL_UART_IRQHandler+0x5a6>
      return;
 8003ea0:	46c0      	nop			; (mov r8, r8)
 8003ea2:	e002      	b.n	8003eaa <HAL_UART_IRQHandler+0x5a6>
      return;
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	e000      	b.n	8003eaa <HAL_UART_IRQHandler+0x5a6>
    return;
 8003ea8:	46c0      	nop			; (mov r8, r8)
  }

}
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b02b      	add	sp, #172	; 0xac
 8003eae:	bd90      	pop	{r4, r7, pc}
 8003eb0:	fffffeff 	.word	0xfffffeff
 8003eb4:	fffffedf 	.word	0xfffffedf

08003eb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b002      	add	sp, #8
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b002      	add	sp, #8
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	000a      	movs	r2, r1
 8003ee2:	1cbb      	adds	r3, r7, #2
 8003ee4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b002      	add	sp, #8
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef0:	b5b0      	push	{r4, r5, r7, lr}
 8003ef2:	b08e      	sub	sp, #56	; 0x38
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ef8:	231a      	movs	r3, #26
 8003efa:	2218      	movs	r2, #24
 8003efc:	189b      	adds	r3, r3, r2
 8003efe:	19db      	adds	r3, r3, r7
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4ac3      	ldr	r2, [pc, #780]	; (8004230 <UART_SetConfig+0x340>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	0019      	movs	r1, r3
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4abe      	ldr	r2, [pc, #760]	; (8004234 <UART_SetConfig+0x344>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	0019      	movs	r1, r3
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4ab8      	ldr	r2, [pc, #736]	; (8004238 <UART_SetConfig+0x348>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d004      	beq.n	8003f64 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f60:	4313      	orrs	r3, r2
 8003f62:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4ab4      	ldr	r2, [pc, #720]	; (800423c <UART_SetConfig+0x34c>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	0019      	movs	r1, r3
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f76:	430a      	orrs	r2, r1
 8003f78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4ab0      	ldr	r2, [pc, #704]	; (8004240 <UART_SetConfig+0x350>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d131      	bne.n	8003fe8 <UART_SetConfig+0xf8>
 8003f84:	4baf      	ldr	r3, [pc, #700]	; (8004244 <UART_SetConfig+0x354>)
 8003f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f88:	2203      	movs	r2, #3
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d01d      	beq.n	8003fcc <UART_SetConfig+0xdc>
 8003f90:	d823      	bhi.n	8003fda <UART_SetConfig+0xea>
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d00c      	beq.n	8003fb0 <UART_SetConfig+0xc0>
 8003f96:	d820      	bhi.n	8003fda <UART_SetConfig+0xea>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <UART_SetConfig+0xb2>
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d00e      	beq.n	8003fbe <UART_SetConfig+0xce>
 8003fa0:	e01b      	b.n	8003fda <UART_SetConfig+0xea>
 8003fa2:	231b      	movs	r3, #27
 8003fa4:	2218      	movs	r2, #24
 8003fa6:	189b      	adds	r3, r3, r2
 8003fa8:	19db      	adds	r3, r3, r7
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]
 8003fae:	e0b4      	b.n	800411a <UART_SetConfig+0x22a>
 8003fb0:	231b      	movs	r3, #27
 8003fb2:	2218      	movs	r2, #24
 8003fb4:	189b      	adds	r3, r3, r2
 8003fb6:	19db      	adds	r3, r3, r7
 8003fb8:	2202      	movs	r2, #2
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	e0ad      	b.n	800411a <UART_SetConfig+0x22a>
 8003fbe:	231b      	movs	r3, #27
 8003fc0:	2218      	movs	r2, #24
 8003fc2:	189b      	adds	r3, r3, r2
 8003fc4:	19db      	adds	r3, r3, r7
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	e0a6      	b.n	800411a <UART_SetConfig+0x22a>
 8003fcc:	231b      	movs	r3, #27
 8003fce:	2218      	movs	r2, #24
 8003fd0:	189b      	adds	r3, r3, r2
 8003fd2:	19db      	adds	r3, r3, r7
 8003fd4:	2208      	movs	r2, #8
 8003fd6:	701a      	strb	r2, [r3, #0]
 8003fd8:	e09f      	b.n	800411a <UART_SetConfig+0x22a>
 8003fda:	231b      	movs	r3, #27
 8003fdc:	2218      	movs	r2, #24
 8003fde:	189b      	adds	r3, r3, r2
 8003fe0:	19db      	adds	r3, r3, r7
 8003fe2:	2210      	movs	r2, #16
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	e098      	b.n	800411a <UART_SetConfig+0x22a>
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a96      	ldr	r2, [pc, #600]	; (8004248 <UART_SetConfig+0x358>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d131      	bne.n	8004056 <UART_SetConfig+0x166>
 8003ff2:	4b94      	ldr	r3, [pc, #592]	; (8004244 <UART_SetConfig+0x354>)
 8003ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff6:	220c      	movs	r2, #12
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	2b0c      	cmp	r3, #12
 8003ffc:	d01d      	beq.n	800403a <UART_SetConfig+0x14a>
 8003ffe:	d823      	bhi.n	8004048 <UART_SetConfig+0x158>
 8004000:	2b08      	cmp	r3, #8
 8004002:	d00c      	beq.n	800401e <UART_SetConfig+0x12e>
 8004004:	d820      	bhi.n	8004048 <UART_SetConfig+0x158>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <UART_SetConfig+0x120>
 800400a:	2b04      	cmp	r3, #4
 800400c:	d00e      	beq.n	800402c <UART_SetConfig+0x13c>
 800400e:	e01b      	b.n	8004048 <UART_SetConfig+0x158>
 8004010:	231b      	movs	r3, #27
 8004012:	2218      	movs	r2, #24
 8004014:	189b      	adds	r3, r3, r2
 8004016:	19db      	adds	r3, r3, r7
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
 800401c:	e07d      	b.n	800411a <UART_SetConfig+0x22a>
 800401e:	231b      	movs	r3, #27
 8004020:	2218      	movs	r2, #24
 8004022:	189b      	adds	r3, r3, r2
 8004024:	19db      	adds	r3, r3, r7
 8004026:	2202      	movs	r2, #2
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	e076      	b.n	800411a <UART_SetConfig+0x22a>
 800402c:	231b      	movs	r3, #27
 800402e:	2218      	movs	r2, #24
 8004030:	189b      	adds	r3, r3, r2
 8004032:	19db      	adds	r3, r3, r7
 8004034:	2204      	movs	r2, #4
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	e06f      	b.n	800411a <UART_SetConfig+0x22a>
 800403a:	231b      	movs	r3, #27
 800403c:	2218      	movs	r2, #24
 800403e:	189b      	adds	r3, r3, r2
 8004040:	19db      	adds	r3, r3, r7
 8004042:	2208      	movs	r2, #8
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	e068      	b.n	800411a <UART_SetConfig+0x22a>
 8004048:	231b      	movs	r3, #27
 800404a:	2218      	movs	r2, #24
 800404c:	189b      	adds	r3, r3, r2
 800404e:	19db      	adds	r3, r3, r7
 8004050:	2210      	movs	r2, #16
 8004052:	701a      	strb	r2, [r3, #0]
 8004054:	e061      	b.n	800411a <UART_SetConfig+0x22a>
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a7c      	ldr	r2, [pc, #496]	; (800424c <UART_SetConfig+0x35c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d106      	bne.n	800406e <UART_SetConfig+0x17e>
 8004060:	231b      	movs	r3, #27
 8004062:	2218      	movs	r2, #24
 8004064:	189b      	adds	r3, r3, r2
 8004066:	19db      	adds	r3, r3, r7
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	e055      	b.n	800411a <UART_SetConfig+0x22a>
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a77      	ldr	r2, [pc, #476]	; (8004250 <UART_SetConfig+0x360>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d106      	bne.n	8004086 <UART_SetConfig+0x196>
 8004078:	231b      	movs	r3, #27
 800407a:	2218      	movs	r2, #24
 800407c:	189b      	adds	r3, r3, r2
 800407e:	19db      	adds	r3, r3, r7
 8004080:	2200      	movs	r2, #0
 8004082:	701a      	strb	r2, [r3, #0]
 8004084:	e049      	b.n	800411a <UART_SetConfig+0x22a>
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a6b      	ldr	r2, [pc, #428]	; (8004238 <UART_SetConfig+0x348>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d13e      	bne.n	800410e <UART_SetConfig+0x21e>
 8004090:	4b6c      	ldr	r3, [pc, #432]	; (8004244 <UART_SetConfig+0x354>)
 8004092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004094:	23c0      	movs	r3, #192	; 0xc0
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	4013      	ands	r3, r2
 800409a:	22c0      	movs	r2, #192	; 0xc0
 800409c:	0112      	lsls	r2, r2, #4
 800409e:	4293      	cmp	r3, r2
 80040a0:	d027      	beq.n	80040f2 <UART_SetConfig+0x202>
 80040a2:	22c0      	movs	r2, #192	; 0xc0
 80040a4:	0112      	lsls	r2, r2, #4
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d82a      	bhi.n	8004100 <UART_SetConfig+0x210>
 80040aa:	2280      	movs	r2, #128	; 0x80
 80040ac:	0112      	lsls	r2, r2, #4
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d011      	beq.n	80040d6 <UART_SetConfig+0x1e6>
 80040b2:	2280      	movs	r2, #128	; 0x80
 80040b4:	0112      	lsls	r2, r2, #4
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d822      	bhi.n	8004100 <UART_SetConfig+0x210>
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <UART_SetConfig+0x1d8>
 80040be:	2280      	movs	r2, #128	; 0x80
 80040c0:	00d2      	lsls	r2, r2, #3
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00e      	beq.n	80040e4 <UART_SetConfig+0x1f4>
 80040c6:	e01b      	b.n	8004100 <UART_SetConfig+0x210>
 80040c8:	231b      	movs	r3, #27
 80040ca:	2218      	movs	r2, #24
 80040cc:	189b      	adds	r3, r3, r2
 80040ce:	19db      	adds	r3, r3, r7
 80040d0:	2200      	movs	r2, #0
 80040d2:	701a      	strb	r2, [r3, #0]
 80040d4:	e021      	b.n	800411a <UART_SetConfig+0x22a>
 80040d6:	231b      	movs	r3, #27
 80040d8:	2218      	movs	r2, #24
 80040da:	189b      	adds	r3, r3, r2
 80040dc:	19db      	adds	r3, r3, r7
 80040de:	2202      	movs	r2, #2
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	e01a      	b.n	800411a <UART_SetConfig+0x22a>
 80040e4:	231b      	movs	r3, #27
 80040e6:	2218      	movs	r2, #24
 80040e8:	189b      	adds	r3, r3, r2
 80040ea:	19db      	adds	r3, r3, r7
 80040ec:	2204      	movs	r2, #4
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	e013      	b.n	800411a <UART_SetConfig+0x22a>
 80040f2:	231b      	movs	r3, #27
 80040f4:	2218      	movs	r2, #24
 80040f6:	189b      	adds	r3, r3, r2
 80040f8:	19db      	adds	r3, r3, r7
 80040fa:	2208      	movs	r2, #8
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e00c      	b.n	800411a <UART_SetConfig+0x22a>
 8004100:	231b      	movs	r3, #27
 8004102:	2218      	movs	r2, #24
 8004104:	189b      	adds	r3, r3, r2
 8004106:	19db      	adds	r3, r3, r7
 8004108:	2210      	movs	r2, #16
 800410a:	701a      	strb	r2, [r3, #0]
 800410c:	e005      	b.n	800411a <UART_SetConfig+0x22a>
 800410e:	231b      	movs	r3, #27
 8004110:	2218      	movs	r2, #24
 8004112:	189b      	adds	r3, r3, r2
 8004114:	19db      	adds	r3, r3, r7
 8004116:	2210      	movs	r2, #16
 8004118:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a46      	ldr	r2, [pc, #280]	; (8004238 <UART_SetConfig+0x348>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d000      	beq.n	8004126 <UART_SetConfig+0x236>
 8004124:	e09a      	b.n	800425c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004126:	231b      	movs	r3, #27
 8004128:	2218      	movs	r2, #24
 800412a:	189b      	adds	r3, r3, r2
 800412c:	19db      	adds	r3, r3, r7
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b08      	cmp	r3, #8
 8004132:	d01d      	beq.n	8004170 <UART_SetConfig+0x280>
 8004134:	dc20      	bgt.n	8004178 <UART_SetConfig+0x288>
 8004136:	2b04      	cmp	r3, #4
 8004138:	d015      	beq.n	8004166 <UART_SetConfig+0x276>
 800413a:	dc1d      	bgt.n	8004178 <UART_SetConfig+0x288>
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <UART_SetConfig+0x256>
 8004140:	2b02      	cmp	r3, #2
 8004142:	d005      	beq.n	8004150 <UART_SetConfig+0x260>
 8004144:	e018      	b.n	8004178 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004146:	f7fe f8b1 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 800414a:	0003      	movs	r3, r0
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800414e:	e01c      	b.n	800418a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004150:	4b3c      	ldr	r3, [pc, #240]	; (8004244 <UART_SetConfig+0x354>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2210      	movs	r2, #16
 8004156:	4013      	ands	r3, r2
 8004158:	d002      	beq.n	8004160 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800415a:	4b3e      	ldr	r3, [pc, #248]	; (8004254 <UART_SetConfig+0x364>)
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800415e:	e014      	b.n	800418a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004160:	4b3d      	ldr	r3, [pc, #244]	; (8004258 <UART_SetConfig+0x368>)
 8004162:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004164:	e011      	b.n	800418a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004166:	f7fd fff1 	bl	800214c <HAL_RCC_GetSysClockFreq>
 800416a:	0003      	movs	r3, r0
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800416e:	e00c      	b.n	800418a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004176:	e008      	b.n	800418a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800417c:	231a      	movs	r3, #26
 800417e:	2218      	movs	r2, #24
 8004180:	189b      	adds	r3, r3, r2
 8004182:	19db      	adds	r3, r3, r7
 8004184:	2201      	movs	r2, #1
 8004186:	701a      	strb	r2, [r3, #0]
        break;
 8004188:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d100      	bne.n	8004192 <UART_SetConfig+0x2a2>
 8004190:	e134      	b.n	80043fc <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	0013      	movs	r3, r2
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	189b      	adds	r3, r3, r2
 800419c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800419e:	429a      	cmp	r2, r3
 80041a0:	d305      	bcc.n	80041ae <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d906      	bls.n	80041bc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80041ae:	231a      	movs	r3, #26
 80041b0:	2218      	movs	r2, #24
 80041b2:	189b      	adds	r3, r3, r2
 80041b4:	19db      	adds	r3, r3, r7
 80041b6:	2201      	movs	r2, #1
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	e11f      	b.n	80043fc <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	6939      	ldr	r1, [r7, #16]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	000b      	movs	r3, r1
 80041ca:	0e1b      	lsrs	r3, r3, #24
 80041cc:	0010      	movs	r0, r2
 80041ce:	0205      	lsls	r5, r0, #8
 80041d0:	431d      	orrs	r5, r3
 80041d2:	000b      	movs	r3, r1
 80041d4:	021c      	lsls	r4, r3, #8
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	085b      	lsrs	r3, r3, #1
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	68b8      	ldr	r0, [r7, #8]
 80041e4:	68f9      	ldr	r1, [r7, #12]
 80041e6:	1900      	adds	r0, r0, r4
 80041e8:	4169      	adcs	r1, r5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	2300      	movs	r3, #0
 80041f2:	607b      	str	r3, [r7, #4]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f7fc f81c 	bl	8000234 <__aeabi_uldivmod>
 80041fc:	0002      	movs	r2, r0
 80041fe:	000b      	movs	r3, r1
 8004200:	0013      	movs	r3, r2
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004206:	23c0      	movs	r3, #192	; 0xc0
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	429a      	cmp	r2, r3
 800420c:	d309      	bcc.n	8004222 <UART_SetConfig+0x332>
 800420e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	035b      	lsls	r3, r3, #13
 8004214:	429a      	cmp	r2, r3
 8004216:	d204      	bcs.n	8004222 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800421e:	60da      	str	r2, [r3, #12]
 8004220:	e0ec      	b.n	80043fc <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8004222:	231a      	movs	r3, #26
 8004224:	2218      	movs	r2, #24
 8004226:	189b      	adds	r3, r3, r2
 8004228:	19db      	adds	r3, r3, r7
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e0e5      	b.n	80043fc <UART_SetConfig+0x50c>
 8004230:	efff69f3 	.word	0xefff69f3
 8004234:	ffffcfff 	.word	0xffffcfff
 8004238:	40004800 	.word	0x40004800
 800423c:	fffff4ff 	.word	0xfffff4ff
 8004240:	40013800 	.word	0x40013800
 8004244:	40021000 	.word	0x40021000
 8004248:	40004400 	.word	0x40004400
 800424c:	40004c00 	.word	0x40004c00
 8004250:	40005000 	.word	0x40005000
 8004254:	003d0900 	.word	0x003d0900
 8004258:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	2380      	movs	r3, #128	; 0x80
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	429a      	cmp	r2, r3
 8004266:	d000      	beq.n	800426a <UART_SetConfig+0x37a>
 8004268:	e071      	b.n	800434e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800426a:	231b      	movs	r3, #27
 800426c:	2218      	movs	r2, #24
 800426e:	189b      	adds	r3, r3, r2
 8004270:	19db      	adds	r3, r3, r7
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d822      	bhi.n	80042be <UART_SetConfig+0x3ce>
 8004278:	009a      	lsls	r2, r3, #2
 800427a:	4b68      	ldr	r3, [pc, #416]	; (800441c <UART_SetConfig+0x52c>)
 800427c:	18d3      	adds	r3, r2, r3
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004282:	f7fe f813 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 8004286:	0003      	movs	r3, r0
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800428a:	e021      	b.n	80042d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800428c:	f7fe f824 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8004290:	0003      	movs	r3, r0
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004294:	e01c      	b.n	80042d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004296:	4b62      	ldr	r3, [pc, #392]	; (8004420 <UART_SetConfig+0x530>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2210      	movs	r2, #16
 800429c:	4013      	ands	r3, r2
 800429e:	d002      	beq.n	80042a6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80042a0:	4b60      	ldr	r3, [pc, #384]	; (8004424 <UART_SetConfig+0x534>)
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80042a4:	e014      	b.n	80042d0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80042a6:	4b60      	ldr	r3, [pc, #384]	; (8004428 <UART_SetConfig+0x538>)
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042aa:	e011      	b.n	80042d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ac:	f7fd ff4e 	bl	800214c <HAL_RCC_GetSysClockFreq>
 80042b0:	0003      	movs	r3, r0
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042b4:	e00c      	b.n	80042d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042b6:	2380      	movs	r3, #128	; 0x80
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042bc:	e008      	b.n	80042d0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80042c2:	231a      	movs	r3, #26
 80042c4:	2218      	movs	r2, #24
 80042c6:	189b      	adds	r3, r3, r2
 80042c8:	19db      	adds	r3, r3, r7
 80042ca:	2201      	movs	r2, #1
 80042cc:	701a      	strb	r2, [r3, #0]
        break;
 80042ce:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d100      	bne.n	80042d8 <UART_SetConfig+0x3e8>
 80042d6:	e091      	b.n	80043fc <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042da:	005a      	lsls	r2, r3, #1
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	18d2      	adds	r2, r2, r3
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	0019      	movs	r1, r3
 80042ea:	0010      	movs	r0, r2
 80042ec:	f7fb ff16 	bl	800011c <__udivsi3>
 80042f0:	0003      	movs	r3, r0
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	2b0f      	cmp	r3, #15
 80042fa:	d921      	bls.n	8004340 <UART_SetConfig+0x450>
 80042fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042fe:	2380      	movs	r3, #128	; 0x80
 8004300:	025b      	lsls	r3, r3, #9
 8004302:	429a      	cmp	r2, r3
 8004304:	d21c      	bcs.n	8004340 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	b29a      	uxth	r2, r3
 800430a:	200e      	movs	r0, #14
 800430c:	2418      	movs	r4, #24
 800430e:	1903      	adds	r3, r0, r4
 8004310:	19db      	adds	r3, r3, r7
 8004312:	210f      	movs	r1, #15
 8004314:	438a      	bics	r2, r1
 8004316:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	085b      	lsrs	r3, r3, #1
 800431c:	b29b      	uxth	r3, r3
 800431e:	2207      	movs	r2, #7
 8004320:	4013      	ands	r3, r2
 8004322:	b299      	uxth	r1, r3
 8004324:	1903      	adds	r3, r0, r4
 8004326:	19db      	adds	r3, r3, r7
 8004328:	1902      	adds	r2, r0, r4
 800432a:	19d2      	adds	r2, r2, r7
 800432c:	8812      	ldrh	r2, [r2, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	1902      	adds	r2, r0, r4
 8004338:	19d2      	adds	r2, r2, r7
 800433a:	8812      	ldrh	r2, [r2, #0]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	e05d      	b.n	80043fc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8004340:	231a      	movs	r3, #26
 8004342:	2218      	movs	r2, #24
 8004344:	189b      	adds	r3, r3, r2
 8004346:	19db      	adds	r3, r3, r7
 8004348:	2201      	movs	r2, #1
 800434a:	701a      	strb	r2, [r3, #0]
 800434c:	e056      	b.n	80043fc <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800434e:	231b      	movs	r3, #27
 8004350:	2218      	movs	r2, #24
 8004352:	189b      	adds	r3, r3, r2
 8004354:	19db      	adds	r3, r3, r7
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d822      	bhi.n	80043a2 <UART_SetConfig+0x4b2>
 800435c:	009a      	lsls	r2, r3, #2
 800435e:	4b33      	ldr	r3, [pc, #204]	; (800442c <UART_SetConfig+0x53c>)
 8004360:	18d3      	adds	r3, r2, r3
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004366:	f7fd ffa1 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 800436a:	0003      	movs	r3, r0
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800436e:	e021      	b.n	80043b4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004370:	f7fd ffb2 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8004374:	0003      	movs	r3, r0
 8004376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004378:	e01c      	b.n	80043b4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800437a:	4b29      	ldr	r3, [pc, #164]	; (8004420 <UART_SetConfig+0x530>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2210      	movs	r2, #16
 8004380:	4013      	ands	r3, r2
 8004382:	d002      	beq.n	800438a <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <UART_SetConfig+0x534>)
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004388:	e014      	b.n	80043b4 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800438a:	4b27      	ldr	r3, [pc, #156]	; (8004428 <UART_SetConfig+0x538>)
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800438e:	e011      	b.n	80043b4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004390:	f7fd fedc 	bl	800214c <HAL_RCC_GetSysClockFreq>
 8004394:	0003      	movs	r3, r0
 8004396:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004398:	e00c      	b.n	80043b4 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043a0:	e008      	b.n	80043b4 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80043a6:	231a      	movs	r3, #26
 80043a8:	2218      	movs	r2, #24
 80043aa:	189b      	adds	r3, r3, r2
 80043ac:	19db      	adds	r3, r3, r7
 80043ae:	2201      	movs	r2, #1
 80043b0:	701a      	strb	r2, [r3, #0]
        break;
 80043b2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d020      	beq.n	80043fc <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	085a      	lsrs	r2, r3, #1
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	18d2      	adds	r2, r2, r3
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	0019      	movs	r1, r3
 80043ca:	0010      	movs	r0, r2
 80043cc:	f7fb fea6 	bl	800011c <__udivsi3>
 80043d0:	0003      	movs	r3, r0
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	2b0f      	cmp	r3, #15
 80043da:	d909      	bls.n	80043f0 <UART_SetConfig+0x500>
 80043dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	025b      	lsls	r3, r3, #9
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d204      	bcs.n	80043f0 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ec:	60da      	str	r2, [r3, #12]
 80043ee:	e005      	b.n	80043fc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80043f0:	231a      	movs	r3, #26
 80043f2:	2218      	movs	r2, #24
 80043f4:	189b      	adds	r3, r3, r2
 80043f6:	19db      	adds	r3, r3, r7
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	2200      	movs	r2, #0
 8004400:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	2200      	movs	r2, #0
 8004406:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004408:	231a      	movs	r3, #26
 800440a:	2218      	movs	r2, #24
 800440c:	189b      	adds	r3, r3, r2
 800440e:	19db      	adds	r3, r3, r7
 8004410:	781b      	ldrb	r3, [r3, #0]
}
 8004412:	0018      	movs	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	b00e      	add	sp, #56	; 0x38
 8004418:	bdb0      	pop	{r4, r5, r7, pc}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	08005d18 	.word	0x08005d18
 8004420:	40021000 	.word	0x40021000
 8004424:	003d0900 	.word	0x003d0900
 8004428:	00f42400 	.word	0x00f42400
 800442c:	08005d3c 	.word	0x08005d3c

08004430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	2201      	movs	r2, #1
 800443e:	4013      	ands	r3, r2
 8004440:	d00b      	beq.n	800445a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a4a      	ldr	r2, [pc, #296]	; (8004574 <UART_AdvFeatureConfig+0x144>)
 800444a:	4013      	ands	r3, r2
 800444c:	0019      	movs	r1, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	2202      	movs	r2, #2
 8004460:	4013      	ands	r3, r2
 8004462:	d00b      	beq.n	800447c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	4a43      	ldr	r2, [pc, #268]	; (8004578 <UART_AdvFeatureConfig+0x148>)
 800446c:	4013      	ands	r3, r2
 800446e:	0019      	movs	r1, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	2204      	movs	r2, #4
 8004482:	4013      	ands	r3, r2
 8004484:	d00b      	beq.n	800449e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a3b      	ldr	r2, [pc, #236]	; (800457c <UART_AdvFeatureConfig+0x14c>)
 800448e:	4013      	ands	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	2208      	movs	r2, #8
 80044a4:	4013      	ands	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4a34      	ldr	r2, [pc, #208]	; (8004580 <UART_AdvFeatureConfig+0x150>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	0019      	movs	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	2210      	movs	r2, #16
 80044c6:	4013      	ands	r3, r2
 80044c8:	d00b      	beq.n	80044e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4a2c      	ldr	r2, [pc, #176]	; (8004584 <UART_AdvFeatureConfig+0x154>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	0019      	movs	r1, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	2220      	movs	r2, #32
 80044e8:	4013      	ands	r3, r2
 80044ea:	d00b      	beq.n	8004504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	4a25      	ldr	r2, [pc, #148]	; (8004588 <UART_AdvFeatureConfig+0x158>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	0019      	movs	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	2240      	movs	r2, #64	; 0x40
 800450a:	4013      	ands	r3, r2
 800450c:	d01d      	beq.n	800454a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4a1d      	ldr	r2, [pc, #116]	; (800458c <UART_AdvFeatureConfig+0x15c>)
 8004516:	4013      	ands	r3, r2
 8004518:	0019      	movs	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	035b      	lsls	r3, r3, #13
 800452e:	429a      	cmp	r2, r3
 8004530:	d10b      	bne.n	800454a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	4a15      	ldr	r2, [pc, #84]	; (8004590 <UART_AdvFeatureConfig+0x160>)
 800453a:	4013      	ands	r3, r2
 800453c:	0019      	movs	r1, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	2280      	movs	r2, #128	; 0x80
 8004550:	4013      	ands	r3, r2
 8004552:	d00b      	beq.n	800456c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	4a0e      	ldr	r2, [pc, #56]	; (8004594 <UART_AdvFeatureConfig+0x164>)
 800455c:	4013      	ands	r3, r2
 800455e:	0019      	movs	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]
  }
}
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	b002      	add	sp, #8
 8004572:	bd80      	pop	{r7, pc}
 8004574:	fffdffff 	.word	0xfffdffff
 8004578:	fffeffff 	.word	0xfffeffff
 800457c:	fffbffff 	.word	0xfffbffff
 8004580:	ffff7fff 	.word	0xffff7fff
 8004584:	ffffefff 	.word	0xffffefff
 8004588:	ffffdfff 	.word	0xffffdfff
 800458c:	ffefffff 	.word	0xffefffff
 8004590:	ff9fffff 	.word	0xff9fffff
 8004594:	fff7ffff 	.word	0xfff7ffff

08004598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af02      	add	r7, sp, #8
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2280      	movs	r2, #128	; 0x80
 80045a4:	2100      	movs	r1, #0
 80045a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045a8:	f7fc fd5e 	bl	8001068 <HAL_GetTick>
 80045ac:	0003      	movs	r3, r0
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2208      	movs	r2, #8
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d10c      	bne.n	80045d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2280      	movs	r2, #128	; 0x80
 80045c2:	0391      	lsls	r1, r2, #14
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	4a17      	ldr	r2, [pc, #92]	; (8004624 <UART_CheckIdleState+0x8c>)
 80045c8:	9200      	str	r2, [sp, #0]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f000 f82c 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 80045d0:	1e03      	subs	r3, r0, #0
 80045d2:	d001      	beq.n	80045d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e021      	b.n	800461c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2204      	movs	r2, #4
 80045e0:	4013      	ands	r3, r2
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d10c      	bne.n	8004600 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2280      	movs	r2, #128	; 0x80
 80045ea:	03d1      	lsls	r1, r2, #15
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	4a0d      	ldr	r2, [pc, #52]	; (8004624 <UART_CheckIdleState+0x8c>)
 80045f0:	9200      	str	r2, [sp, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f000 f818 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 80045f8:	1e03      	subs	r3, r0, #0
 80045fa:	d001      	beq.n	8004600 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e00d      	b.n	800461c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2274      	movs	r2, #116	; 0x74
 8004616:	2100      	movs	r1, #0
 8004618:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	0018      	movs	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	b004      	add	sp, #16
 8004622:	bd80      	pop	{r7, pc}
 8004624:	01ffffff 	.word	0x01ffffff

08004628 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b094      	sub	sp, #80	; 0x50
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	1dfb      	adds	r3, r7, #7
 8004636:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004638:	e0a3      	b.n	8004782 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800463c:	3301      	adds	r3, #1
 800463e:	d100      	bne.n	8004642 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004640:	e09f      	b.n	8004782 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004642:	f7fc fd11 	bl	8001068 <HAL_GetTick>
 8004646:	0002      	movs	r2, r0
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800464e:	429a      	cmp	r2, r3
 8004650:	d302      	bcc.n	8004658 <UART_WaitOnFlagUntilTimeout+0x30>
 8004652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004654:	2b00      	cmp	r3, #0
 8004656:	d13d      	bne.n	80046d4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004658:	f3ef 8310 	mrs	r3, PRIMASK
 800465c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004660:	647b      	str	r3, [r7, #68]	; 0x44
 8004662:	2301      	movs	r3, #1
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	f383 8810 	msr	PRIMASK, r3
}
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	494c      	ldr	r1, [pc, #304]	; (80047ac <UART_WaitOnFlagUntilTimeout+0x184>)
 800467a:	400a      	ands	r2, r1
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004680:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	f383 8810 	msr	PRIMASK, r3
}
 8004688:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800468a:	f3ef 8310 	mrs	r3, PRIMASK
 800468e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004692:	643b      	str	r3, [r7, #64]	; 0x40
 8004694:	2301      	movs	r3, #1
 8004696:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469a:	f383 8810 	msr	PRIMASK, r3
}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2101      	movs	r1, #1
 80046ac:	438a      	bics	r2, r1
 80046ae:	609a      	str	r2, [r3, #8]
 80046b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b6:	f383 8810 	msr	PRIMASK, r3
}
 80046ba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2220      	movs	r2, #32
 80046c6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2274      	movs	r2, #116	; 0x74
 80046cc:	2100      	movs	r1, #0
 80046ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e067      	b.n	80047a4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2204      	movs	r2, #4
 80046dc:	4013      	ands	r3, r2
 80046de:	d050      	beq.n	8004782 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69da      	ldr	r2, [r3, #28]
 80046e6:	2380      	movs	r3, #128	; 0x80
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	401a      	ands	r2, r3
 80046ec:	2380      	movs	r3, #128	; 0x80
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d146      	bne.n	8004782 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2280      	movs	r2, #128	; 0x80
 80046fa:	0112      	lsls	r2, r2, #4
 80046fc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004702:	613b      	str	r3, [r7, #16]
  return(result);
 8004704:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004708:	2301      	movs	r3, #1
 800470a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f383 8810 	msr	PRIMASK, r3
}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4923      	ldr	r1, [pc, #140]	; (80047ac <UART_WaitOnFlagUntilTimeout+0x184>)
 8004720:	400a      	ands	r2, r1
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004726:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f383 8810 	msr	PRIMASK, r3
}
 800472e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004730:	f3ef 8310 	mrs	r3, PRIMASK
 8004734:	61fb      	str	r3, [r7, #28]
  return(result);
 8004736:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004738:	64bb      	str	r3, [r7, #72]	; 0x48
 800473a:	2301      	movs	r3, #1
 800473c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	f383 8810 	msr	PRIMASK, r3
}
 8004744:	46c0      	nop			; (mov r8, r8)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2101      	movs	r1, #1
 8004752:	438a      	bics	r2, r1
 8004754:	609a      	str	r2, [r3, #8]
 8004756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	f383 8810 	msr	PRIMASK, r3
}
 8004760:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2280      	movs	r2, #128	; 0x80
 8004772:	2120      	movs	r1, #32
 8004774:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2274      	movs	r2, #116	; 0x74
 800477a:	2100      	movs	r1, #0
 800477c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e010      	b.n	80047a4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	4013      	ands	r3, r2
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	425a      	negs	r2, r3
 8004792:	4153      	adcs	r3, r2
 8004794:	b2db      	uxtb	r3, r3
 8004796:	001a      	movs	r2, r3
 8004798:	1dfb      	adds	r3, r7, #7
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d100      	bne.n	80047a2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80047a0:	e74b      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	0018      	movs	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b014      	add	sp, #80	; 0x50
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	fffffe5f 	.word	0xfffffe5f

080047b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08e      	sub	sp, #56	; 0x38
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b8:	f3ef 8310 	mrs	r3, PRIMASK
 80047bc:	617b      	str	r3, [r7, #20]
  return(result);
 80047be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047c0:	637b      	str	r3, [r7, #52]	; 0x34
 80047c2:	2301      	movs	r3, #1
 80047c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f383 8810 	msr	PRIMASK, r3
}
 80047cc:	46c0      	nop			; (mov r8, r8)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4925      	ldr	r1, [pc, #148]	; (8004870 <UART_EndRxTransfer+0xc0>)
 80047da:	400a      	ands	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f383 8810 	msr	PRIMASK, r3
}
 80047e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ea:	f3ef 8310 	mrs	r3, PRIMASK
 80047ee:	623b      	str	r3, [r7, #32]
  return(result);
 80047f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f2:	633b      	str	r3, [r7, #48]	; 0x30
 80047f4:	2301      	movs	r3, #1
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	f383 8810 	msr	PRIMASK, r3
}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2101      	movs	r1, #1
 800480c:	438a      	bics	r2, r1
 800480e:	609a      	str	r2, [r3, #8]
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	f383 8810 	msr	PRIMASK, r3
}
 800481a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004820:	2b01      	cmp	r3, #1
 8004822:	d118      	bne.n	8004856 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004824:	f3ef 8310 	mrs	r3, PRIMASK
 8004828:	60bb      	str	r3, [r7, #8]
  return(result);
 800482a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800482e:	2301      	movs	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f383 8810 	msr	PRIMASK, r3
}
 8004838:	46c0      	nop			; (mov r8, r8)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2110      	movs	r1, #16
 8004846:	438a      	bics	r2, r1
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f383 8810 	msr	PRIMASK, r3
}
 8004854:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004868:	46c0      	nop			; (mov r8, r8)
 800486a:	46bd      	mov	sp, r7
 800486c:	b00e      	add	sp, #56	; 0x38
 800486e:	bd80      	pop	{r7, pc}
 8004870:	fffffedf 	.word	0xfffffedf

08004874 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004880:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	225a      	movs	r2, #90	; 0x5a
 8004886:	2100      	movs	r1, #0
 8004888:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2252      	movs	r2, #82	; 0x52
 800488e:	2100      	movs	r1, #0
 8004890:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	0018      	movs	r0, r3
 8004896:	f7ff fb17 	bl	8003ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	46bd      	mov	sp, r7
 800489e:	b004      	add	sp, #16
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b086      	sub	sp, #24
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048aa:	f3ef 8310 	mrs	r3, PRIMASK
 80048ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80048b0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	2301      	movs	r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f383 8810 	msr	PRIMASK, r3
}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2140      	movs	r1, #64	; 0x40
 80048cc:	438a      	bics	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f383 8810 	msr	PRIMASK, r3
}
 80048da:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2220      	movs	r2, #32
 80048e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	0018      	movs	r0, r3
 80048ec:	f7ff fae4 	bl	8003eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f0:	46c0      	nop			; (mov r8, r8)
 80048f2:	46bd      	mov	sp, r7
 80048f4:	b006      	add	sp, #24
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004900:	46c0      	nop			; (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b002      	add	sp, #8
 8004906:	bd80      	pop	{r7, pc}

08004908 <hal_nrf_init>:

SPI_HandleTypeDef* _hspi_;
uint32_t _Timeout_;

void hal_nrf_init(SPI_HandleTypeDef* hspi, uint32_t Timeout)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
	_hspi_ = hspi;
 8004912:	4b05      	ldr	r3, [pc, #20]	; (8004928 <hal_nrf_init+0x20>)
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	601a      	str	r2, [r3, #0]
	_Timeout_ = Timeout;
 8004918:	4b04      	ldr	r3, [pc, #16]	; (800492c <hal_nrf_init+0x24>)
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	601a      	str	r2, [r3, #0]
}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	46bd      	mov	sp, r7
 8004922:	b002      	add	sp, #8
 8004924:	bd80      	pop	{r7, pc}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	2000020c 	.word	0x2000020c
 800492c:	20000210 	.word	0x20000210

08004930 <hal_nrf_read_reg>:

uint8_t hal_nrf_read_reg(uint8_t reg)
{
 8004930:	b5b0      	push	{r4, r5, r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af02      	add	r7, sp, #8
 8004936:	0002      	movs	r2, r0
 8004938:	1dfb      	adds	r3, r7, #7
 800493a:	701a      	strb	r2, [r3, #0]
    uint8_t tx_buf[2];
    uint8_t rx_buf[2];
    tx_buf[0] = reg;
 800493c:	240c      	movs	r4, #12
 800493e:	193b      	adds	r3, r7, r4
 8004940:	1dfa      	adds	r2, r7, #7
 8004942:	7812      	ldrb	r2, [r2, #0]
 8004944:	701a      	strb	r2, [r3, #0]
    tx_buf[1] = 0xFF;
 8004946:	193b      	adds	r3, r7, r4
 8004948:	22ff      	movs	r2, #255	; 0xff
 800494a:	705a      	strb	r2, [r3, #1]
    cs_enable();
 800494c:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <hal_nrf_read_reg+0x58>)
 800494e:	2200      	movs	r2, #0
 8004950:	2140      	movs	r1, #64	; 0x40
 8004952:	0018      	movs	r0, r3
 8004954:	f7fc fe9a 	bl	800168c <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(_hspi_, tx_buf, rx_buf, 2, _Timeout_);
 8004958:	4b0c      	ldr	r3, [pc, #48]	; (800498c <hal_nrf_read_reg+0x5c>)
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <hal_nrf_read_reg+0x60>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2508      	movs	r5, #8
 8004962:	197a      	adds	r2, r7, r5
 8004964:	1939      	adds	r1, r7, r4
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	2302      	movs	r3, #2
 800496a:	f7fe fc3f 	bl	80031ec <HAL_SPI_TransmitReceive>
    cs_disable();
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <hal_nrf_read_reg+0x58>)
 8004970:	2201      	movs	r2, #1
 8004972:	2140      	movs	r1, #64	; 0x40
 8004974:	0018      	movs	r0, r3
 8004976:	f7fc fe89 	bl	800168c <HAL_GPIO_WritePin>
    return rx_buf[1];
 800497a:	197b      	adds	r3, r7, r5
 800497c:	785b      	ldrb	r3, [r3, #1]
}
 800497e:	0018      	movs	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	b004      	add	sp, #16
 8004984:	bdb0      	pop	{r4, r5, r7, pc}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	50000400 	.word	0x50000400
 800498c:	2000020c 	.word	0x2000020c
 8004990:	20000210 	.word	0x20000210

08004994 <hal_nrf_read_multibyte_reg>:

uint16_t hal_nrf_read_multibyte_reg(uint8_t reg, uint8_t *pbuf, uint8_t len)
{
 8004994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004996:	b091      	sub	sp, #68	; 0x44
 8004998:	af02      	add	r7, sp, #8
 800499a:	6039      	str	r1, [r7, #0]
 800499c:	0011      	movs	r1, r2
 800499e:	1dfb      	adds	r3, r7, #7
 80049a0:	1c02      	adds	r2, r0, #0
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	1dbb      	adds	r3, r7, #6
 80049a6:	1c0a      	adds	r2, r1, #0
 80049a8:	701a      	strb	r2, [r3, #0]
    uint8_t length;
    uint8_t buf[NRF_MAX_PL+1];

    switch(reg)
 80049aa:	1dfb      	adds	r3, r7, #7
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d01d      	beq.n	80049ee <hal_nrf_read_multibyte_reg+0x5a>
 80049b2:	dc3d      	bgt.n	8004a30 <hal_nrf_read_multibyte_reg+0x9c>
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	dc02      	bgt.n	80049be <hal_nrf_read_multibyte_reg+0x2a>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	da02      	bge.n	80049c2 <hal_nrf_read_multibyte_reg+0x2e>
 80049bc:	e038      	b.n	8004a30 <hal_nrf_read_multibyte_reg+0x9c>
 80049be:	2b06      	cmp	r3, #6
 80049c0:	d136      	bne.n	8004a30 <hal_nrf_read_multibyte_reg+0x9c>
    {
    case HAL_NRF_PIPE0:
    case HAL_NRF_PIPE1:
    case HAL_NRF_TX:
        length = (!len ? hal_nrf_get_address_width() : len);
 80049c2:	1dbb      	adds	r3, r7, #6
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d104      	bne.n	80049d4 <hal_nrf_read_multibyte_reg+0x40>
 80049ca:	f000 fbc7 	bl	800515c <hal_nrf_get_address_width>
 80049ce:	0003      	movs	r3, r0
 80049d0:	001a      	movs	r2, r3
 80049d2:	e001      	b.n	80049d8 <hal_nrf_read_multibyte_reg+0x44>
 80049d4:	1dbb      	adds	r3, r7, #6
 80049d6:	781a      	ldrb	r2, [r3, #0]
 80049d8:	2337      	movs	r3, #55	; 0x37
 80049da:	18fb      	adds	r3, r7, r3
 80049dc:	701a      	strb	r2, [r3, #0]
        buf[0] = RX_ADDR_P0+reg;
 80049de:	1dfb      	adds	r3, r7, #7
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	330a      	adds	r3, #10
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	2314      	movs	r3, #20
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	701a      	strb	r2, [r3, #0]
        break;
 80049ec:	e025      	b.n	8004a3a <hal_nrf_read_multibyte_reg+0xa6>

    case HAL_NRF_RX_PLOAD:
        reg = hal_nrf_get_rx_data_source();
 80049ee:	1dfc      	adds	r4, r7, #7
 80049f0:	f000 f906 	bl	8004c00 <hal_nrf_get_rx_data_source>
 80049f4:	0003      	movs	r3, r0
 80049f6:	7023      	strb	r3, [r4, #0]

        if (reg < 7) {
 80049f8:	1dfb      	adds	r3, r7, #7
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b06      	cmp	r3, #6
 80049fe:	d812      	bhi.n	8004a26 <hal_nrf_read_multibyte_reg+0x92>
            length = (!len ? hal_nrf_read_rx_payload_width() : len);
 8004a00:	1dbb      	adds	r3, r7, #6
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d104      	bne.n	8004a12 <hal_nrf_read_multibyte_reg+0x7e>
 8004a08:	f000 fc83 	bl	8005312 <hal_nrf_read_rx_payload_width>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	001a      	movs	r2, r3
 8004a10:	e001      	b.n	8004a16 <hal_nrf_read_multibyte_reg+0x82>
 8004a12:	1dbb      	adds	r3, r7, #6
 8004a14:	781a      	ldrb	r2, [r3, #0]
 8004a16:	2337      	movs	r3, #55	; 0x37
 8004a18:	18fb      	adds	r3, r7, r3
 8004a1a:	701a      	strb	r2, [r3, #0]
            buf[0] = R_RX_PAYLOAD;
 8004a1c:	2314      	movs	r3, #20
 8004a1e:	18fb      	adds	r3, r7, r3
 8004a20:	2261      	movs	r2, #97	; 0x61
 8004a22:	701a      	strb	r2, [r3, #0]
        } else
            length = 0;
        break;
 8004a24:	e009      	b.n	8004a3a <hal_nrf_read_multibyte_reg+0xa6>
            length = 0;
 8004a26:	2337      	movs	r3, #55	; 0x37
 8004a28:	18fb      	adds	r3, r7, r3
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
        break;
 8004a2e:	e004      	b.n	8004a3a <hal_nrf_read_multibyte_reg+0xa6>

    default:
        length = 0;
 8004a30:	2337      	movs	r3, #55	; 0x37
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]
        break;
 8004a38:	46c0      	nop			; (mov r8, r8)
    }

    if (length > 0) {
 8004a3a:	2537      	movs	r5, #55	; 0x37
 8004a3c:	197b      	adds	r3, r7, r5
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d02d      	beq.n	8004aa0 <hal_nrf_read_multibyte_reg+0x10c>
        memset(&buf[1], 0, length);
 8004a44:	197b      	adds	r3, r7, r5
 8004a46:	781a      	ldrb	r2, [r3, #0]
 8004a48:	2614      	movs	r6, #20
 8004a4a:	19bb      	adds	r3, r7, r6
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	2100      	movs	r1, #0
 8004a50:	0018      	movs	r0, r3
 8004a52:	f000 fcaa 	bl	80053aa <memset>
        uint8_t rx_buf[6];
        cs_enable();
 8004a56:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <hal_nrf_read_multibyte_reg+0x12c>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2140      	movs	r1, #64	; 0x40
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7fc fe15 	bl	800168c <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(_hspi_, buf, rx_buf, length+1, _Timeout_);
 8004a62:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <hal_nrf_read_multibyte_reg+0x130>)
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	197b      	adds	r3, r7, r5
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	b29c      	uxth	r4, r3
 8004a70:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <hal_nrf_read_multibyte_reg+0x134>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	220c      	movs	r2, #12
 8004a76:	18ba      	adds	r2, r7, r2
 8004a78:	19b9      	adds	r1, r7, r6
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	0023      	movs	r3, r4
 8004a7e:	f7fe fbb5 	bl	80031ec <HAL_SPI_TransmitReceive>
        cs_disable();
 8004a82:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <hal_nrf_read_multibyte_reg+0x12c>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	2140      	movs	r1, #64	; 0x40
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f7fc fdff 	bl	800168c <HAL_GPIO_WritePin>
        memcpy(pbuf, &rx_buf[1], length);
 8004a8e:	197b      	adds	r3, r7, r5
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	230c      	movs	r3, #12
 8004a94:	18fb      	adds	r3, r7, r3
 8004a96:	1c59      	adds	r1, r3, #1
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f000 fc7c 	bl	8005398 <memcpy>
    }
    return (((uint16_t)reg << 8) | length);
 8004aa0:	1dfb      	adds	r3, r7, #7
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	b21a      	sxth	r2, r3
 8004aa8:	2337      	movs	r3, #55	; 0x37
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	b21b      	sxth	r3, r3
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	b21b      	sxth	r3, r3
 8004ab4:	b29b      	uxth	r3, r3
}
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b00f      	add	sp, #60	; 0x3c
 8004abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	50000400 	.word	0x50000400
 8004ac4:	2000020c 	.word	0x2000020c
 8004ac8:	20000210 	.word	0x20000210

08004acc <hal_nrf_write_reg>:
uint8_t hal_nrf_write_reg(uint8_t reg, uint8_t value)
{
 8004acc:	b5b0      	push	{r4, r5, r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	0002      	movs	r2, r0
 8004ad4:	1dfb      	adds	r3, r7, #7
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	1dbb      	adds	r3, r7, #6
 8004ada:	1c0a      	adds	r2, r1, #0
 8004adc:	701a      	strb	r2, [r3, #0]
    uint8_t tx_buf[2];
    uint8_t rx_buf[2];
    tx_buf[0] = W_REGISTER+reg;
 8004ade:	1dfb      	adds	r3, r7, #7
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	3320      	adds	r3, #32
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	240c      	movs	r4, #12
 8004ae8:	193b      	adds	r3, r7, r4
 8004aea:	701a      	strb	r2, [r3, #0]
    tx_buf[1] = value;
 8004aec:	193b      	adds	r3, r7, r4
 8004aee:	1dba      	adds	r2, r7, #6
 8004af0:	7812      	ldrb	r2, [r2, #0]
 8004af2:	705a      	strb	r2, [r3, #1]
    cs_enable();
 8004af4:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <hal_nrf_write_reg+0x64>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	2140      	movs	r1, #64	; 0x40
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7fc fdc6 	bl	800168c <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(_hspi_, tx_buf, rx_buf, 2, _Timeout_);
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <hal_nrf_write_reg+0x68>)
 8004b02:	6818      	ldr	r0, [r3, #0]
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <hal_nrf_write_reg+0x6c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2508      	movs	r5, #8
 8004b0a:	197a      	adds	r2, r7, r5
 8004b0c:	1939      	adds	r1, r7, r4
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	2302      	movs	r3, #2
 8004b12:	f7fe fb6b 	bl	80031ec <HAL_SPI_TransmitReceive>
    cs_disable();
 8004b16:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <hal_nrf_write_reg+0x64>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	2140      	movs	r1, #64	; 0x40
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f7fc fdb5 	bl	800168c <HAL_GPIO_WritePin>
    return rx_buf[0];
 8004b22:	197b      	adds	r3, r7, r5
 8004b24:	781b      	ldrb	r3, [r3, #0]
}
 8004b26:	0018      	movs	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b004      	add	sp, #16
 8004b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	50000400 	.word	0x50000400
 8004b34:	2000020c 	.word	0x2000020c
 8004b38:	20000210 	.word	0x20000210

08004b3c <hal_nrf_write_multibyte_reg>:

void hal_nrf_write_multibyte_reg(uint8_t reg, const uint8_t *pbuf, uint8_t length)
{
 8004b3c:	b590      	push	{r4, r7, lr}
 8004b3e:	b08d      	sub	sp, #52	; 0x34
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6039      	str	r1, [r7, #0]
 8004b44:	0011      	movs	r1, r2
 8004b46:	1dfb      	adds	r3, r7, #7
 8004b48:	1c02      	adds	r2, r0, #0
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	1dbb      	adds	r3, r7, #6
 8004b4e:	1c0a      	adds	r2, r1, #0
 8004b50:	701a      	strb	r2, [r3, #0]
    uint8_t buf[NRF_MAX_PL+1];

    buf[0] = reg;
 8004b52:	240c      	movs	r4, #12
 8004b54:	193b      	adds	r3, r7, r4
 8004b56:	1dfa      	adds	r2, r7, #7
 8004b58:	7812      	ldrb	r2, [r2, #0]
 8004b5a:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[1], pbuf, length);
 8004b5c:	1dbb      	adds	r3, r7, #6
 8004b5e:	781a      	ldrb	r2, [r3, #0]
 8004b60:	6839      	ldr	r1, [r7, #0]
 8004b62:	193b      	adds	r3, r7, r4
 8004b64:	3301      	adds	r3, #1
 8004b66:	0018      	movs	r0, r3
 8004b68:	f000 fc16 	bl	8005398 <memcpy>
    cs_enable();
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <hal_nrf_write_multibyte_reg+0x68>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2140      	movs	r1, #64	; 0x40
 8004b72:	0018      	movs	r0, r3
 8004b74:	f7fc fd8a 	bl	800168c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(_hspi_, buf, length+1, _Timeout_);
 8004b78:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <hal_nrf_write_multibyte_reg+0x6c>)
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	1dbb      	adds	r3, r7, #6
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3301      	adds	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	4b09      	ldr	r3, [pc, #36]	; (8004bac <hal_nrf_write_multibyte_reg+0x70>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	1939      	adds	r1, r7, r4
 8004b8c:	f7fe f9d8 	bl	8002f40 <HAL_SPI_Transmit>
    cs_disable();
 8004b90:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <hal_nrf_write_multibyte_reg+0x68>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	2140      	movs	r1, #64	; 0x40
 8004b96:	0018      	movs	r0, r3
 8004b98:	f7fc fd78 	bl	800168c <HAL_GPIO_WritePin>
}
 8004b9c:	46c0      	nop			; (mov r8, r8)
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	b00d      	add	sp, #52	; 0x34
 8004ba2:	bd90      	pop	{r4, r7, pc}
 8004ba4:	50000400 	.word	0x50000400
 8004ba8:	2000020c 	.word	0x2000020c
 8004bac:	20000210 	.word	0x20000210

08004bb0 <hal_nrf_nop>:

uint8_t hal_nrf_nop(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af02      	add	r7, sp, #8
    uint8_t status;
    cs_enable();
 8004bb6:	4b0f      	ldr	r3, [pc, #60]	; (8004bf4 <hal_nrf_nop+0x44>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2140      	movs	r1, #64	; 0x40
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f7fc fd65 	bl	800168c <HAL_GPIO_WritePin>
    uint8_t data = NOP;
 8004bc2:	1dbb      	adds	r3, r7, #6
 8004bc4:	22ff      	movs	r2, #255	; 0xff
 8004bc6:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(_hspi_, &data, &status, 1, _Timeout_);
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <hal_nrf_nop+0x48>)
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <hal_nrf_nop+0x4c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	1dfa      	adds	r2, r7, #7
 8004bd2:	1db9      	adds	r1, r7, #6
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	f7fe fb08 	bl	80031ec <HAL_SPI_TransmitReceive>
    cs_disable();
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <hal_nrf_nop+0x44>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	2140      	movs	r1, #64	; 0x40
 8004be2:	0018      	movs	r0, r3
 8004be4:	f7fc fd52 	bl	800168c <HAL_GPIO_WritePin>
    return status;
 8004be8:	1dfb      	adds	r3, r7, #7
 8004bea:	781b      	ldrb	r3, [r3, #0]
}
 8004bec:	0018      	movs	r0, r3
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b002      	add	sp, #8
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	50000400 	.word	0x50000400
 8004bf8:	2000020c 	.word	0x2000020c
 8004bfc:	20000210 	.word	0x20000210

08004c00 <hal_nrf_get_rx_data_source>:

uint8_t hal_nrf_get_rx_data_source(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
    /* read STATUS.RX_P_NO content */
    return ((hal_nrf_nop() & (uint8_t)(_BIT(3)|_BIT(2)|_BIT(1))) >> 1);
 8004c04:	f7ff ffd4 	bl	8004bb0 <hal_nrf_nop>
 8004c08:	0003      	movs	r3, r0
 8004c0a:	105b      	asrs	r3, r3, #1
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2207      	movs	r2, #7
 8004c10:	4013      	ands	r3, r2
 8004c12:	b2db      	uxtb	r3, r3
}
 8004c14:	0018      	movs	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <hal_nrf_flush_rx>:
    HAL_SPI_Transmit(_hspi_, &data, 1, _Timeout_);
    cs_disable();
}

void hal_nrf_flush_rx(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
    cs_enable();
 8004c22:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <hal_nrf_flush_rx+0x3c>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	2140      	movs	r1, #64	; 0x40
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7fc fd2f 	bl	800168c <HAL_GPIO_WritePin>
    uint8_t data = FLUSH_RX;
 8004c2e:	1dfb      	adds	r3, r7, #7
 8004c30:	22e2      	movs	r2, #226	; 0xe2
 8004c32:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(_hspi_, &data, 1, _Timeout_);
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <hal_nrf_flush_rx+0x40>)
 8004c36:	6818      	ldr	r0, [r3, #0]
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <hal_nrf_flush_rx+0x44>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	1df9      	adds	r1, r7, #7
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f7fe f97e 	bl	8002f40 <HAL_SPI_Transmit>
    cs_disable();
 8004c44:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <hal_nrf_flush_rx+0x3c>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	2140      	movs	r1, #64	; 0x40
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f7fc fd1e 	bl	800168c <HAL_GPIO_WritePin>
}
 8004c50:	46c0      	nop			; (mov r8, r8)
 8004c52:	46bd      	mov	sp, r7
 8004c54:	b002      	add	sp, #8
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	50000400 	.word	0x50000400
 8004c5c:	2000020c 	.word	0x2000020c
 8004c60:	20000210 	.word	0x20000210

08004c64 <hal_nrf_flush_tx>:

void hal_nrf_flush_tx(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
    cs_enable();
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <hal_nrf_flush_tx+0x3c>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2140      	movs	r1, #64	; 0x40
 8004c70:	0018      	movs	r0, r3
 8004c72:	f7fc fd0b 	bl	800168c <HAL_GPIO_WritePin>
    uint8_t data = FLUSH_TX;
 8004c76:	1dfb      	adds	r3, r7, #7
 8004c78:	22e1      	movs	r2, #225	; 0xe1
 8004c7a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(_hspi_, &data, 1, _Timeout_);;
 8004c7c:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <hal_nrf_flush_tx+0x40>)
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <hal_nrf_flush_tx+0x44>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	1df9      	adds	r1, r7, #7
 8004c86:	2201      	movs	r2, #1
 8004c88:	f7fe f95a 	bl	8002f40 <HAL_SPI_Transmit>
    cs_disable();
 8004c8c:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <hal_nrf_flush_tx+0x3c>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	2140      	movs	r1, #64	; 0x40
 8004c92:	0018      	movs	r0, r3
 8004c94:	f7fc fcfa 	bl	800168c <HAL_GPIO_WritePin>
}
 8004c98:	46c0      	nop			; (mov r8, r8)
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b002      	add	sp, #8
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	50000400 	.word	0x50000400
 8004ca4:	2000020c 	.word	0x2000020c
 8004ca8:	20000210 	.word	0x20000210

08004cac <hal_nrf_set_operation_mode>:

void hal_nrf_set_operation_mode(hal_nrf_operation_mode_t op_mode)
{
 8004cac:	b5b0      	push	{r4, r5, r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	0002      	movs	r2, r0
 8004cb4:	1dfb      	adds	r3, r7, #7
 8004cb6:	701a      	strb	r2, [r3, #0]
    uint8_t config = hal_nrf_read_reg(CONFIG);
 8004cb8:	250f      	movs	r5, #15
 8004cba:	197c      	adds	r4, r7, r5
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	f7ff fe37 	bl	8004930 <hal_nrf_read_reg>
 8004cc2:	0003      	movs	r3, r0
 8004cc4:	7023      	strb	r3, [r4, #0]

    if(op_mode == HAL_NRF_PRX) {
 8004cc6:	1dfb      	adds	r3, r7, #7
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d106      	bne.n	8004cdc <hal_nrf_set_operation_mode+0x30>
        config = (uint8_t)_SET_BIT(config, PRIM_RX);
 8004cce:	197b      	adds	r3, r7, r5
 8004cd0:	197a      	adds	r2, r7, r5
 8004cd2:	7812      	ldrb	r2, [r2, #0]
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	e006      	b.n	8004cea <hal_nrf_set_operation_mode+0x3e>
    } else {
        config = (uint8_t)_CLR_BIT(config, PRIM_RX);
 8004cdc:	220f      	movs	r2, #15
 8004cde:	18bb      	adds	r3, r7, r2
 8004ce0:	18ba      	adds	r2, r7, r2
 8004ce2:	7812      	ldrb	r2, [r2, #0]
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	438a      	bics	r2, r1
 8004ce8:	701a      	strb	r2, [r3, #0]
    }
    hal_nrf_write_reg(CONFIG, config);
 8004cea:	230f      	movs	r3, #15
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	0019      	movs	r1, r3
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	f7ff feea 	bl	8004acc <hal_nrf_write_reg>
}
 8004cf8:	46c0      	nop			; (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b004      	add	sp, #16
 8004cfe:	bdb0      	pop	{r4, r5, r7, pc}

08004d00 <hal_nrf_enable_dynamic_payload>:
{
	hal_nrf_write_reg(ACTIVATE, 0x73);
}

void hal_nrf_enable_dynamic_payload(uint8_t enable)
{
 8004d00:	b5b0      	push	{r4, r5, r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	0002      	movs	r2, r0
 8004d08:	1dfb      	adds	r3, r7, #7
 8004d0a:	701a      	strb	r2, [r3, #0]
    uint8_t feature = hal_nrf_read_reg(FEATURE);
 8004d0c:	250f      	movs	r5, #15
 8004d0e:	197c      	adds	r4, r7, r5
 8004d10:	201d      	movs	r0, #29
 8004d12:	f7ff fe0d 	bl	8004930 <hal_nrf_read_reg>
 8004d16:	0003      	movs	r3, r0
 8004d18:	7023      	strb	r3, [r4, #0]

    if (enable) {
 8004d1a:	1dfb      	adds	r3, r7, #7
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d006      	beq.n	8004d30 <hal_nrf_enable_dynamic_payload+0x30>
        feature = (uint8_t)_SET_BIT(feature, EN_DPL);
 8004d22:	197b      	adds	r3, r7, r5
 8004d24:	197a      	adds	r2, r7, r5
 8004d26:	7812      	ldrb	r2, [r2, #0]
 8004d28:	2104      	movs	r1, #4
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	e006      	b.n	8004d3e <hal_nrf_enable_dynamic_payload+0x3e>
    } else {
        feature = (uint8_t)_CLR_BIT(feature, EN_DPL);
 8004d30:	220f      	movs	r2, #15
 8004d32:	18bb      	adds	r3, r7, r2
 8004d34:	18ba      	adds	r2, r7, r2
 8004d36:	7812      	ldrb	r2, [r2, #0]
 8004d38:	2104      	movs	r1, #4
 8004d3a:	438a      	bics	r2, r1
 8004d3c:	701a      	strb	r2, [r3, #0]
    }
    hal_nrf_write_reg(FEATURE, feature);
 8004d3e:	230f      	movs	r3, #15
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	0019      	movs	r1, r3
 8004d46:	201d      	movs	r0, #29
 8004d48:	f7ff fec0 	bl	8004acc <hal_nrf_write_reg>
}
 8004d4c:	46c0      	nop			; (mov r8, r8)
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	b004      	add	sp, #16
 8004d52:	bdb0      	pop	{r4, r5, r7, pc}

08004d54 <hal_nrf_enable_ack_payload>:
{
    return ((hal_nrf_read_reg(FEATURE) & (uint8_t)_BIT(EN_DPL)) != 0);
}

void hal_nrf_enable_ack_payload(uint8_t enable)
{
 8004d54:	b5b0      	push	{r4, r5, r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	0002      	movs	r2, r0
 8004d5c:	1dfb      	adds	r3, r7, #7
 8004d5e:	701a      	strb	r2, [r3, #0]
    uint8_t feature = hal_nrf_read_reg(FEATURE);
 8004d60:	250f      	movs	r5, #15
 8004d62:	197c      	adds	r4, r7, r5
 8004d64:	201d      	movs	r0, #29
 8004d66:	f7ff fde3 	bl	8004930 <hal_nrf_read_reg>
 8004d6a:	0003      	movs	r3, r0
 8004d6c:	7023      	strb	r3, [r4, #0]

    if (enable) {
 8004d6e:	1dfb      	adds	r3, r7, #7
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d006      	beq.n	8004d84 <hal_nrf_enable_ack_payload+0x30>
        feature = (uint8_t)_SET_BIT(feature, EN_ACK_PAY);
 8004d76:	197b      	adds	r3, r7, r5
 8004d78:	197a      	adds	r2, r7, r5
 8004d7a:	7812      	ldrb	r2, [r2, #0]
 8004d7c:	2102      	movs	r1, #2
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	e006      	b.n	8004d92 <hal_nrf_enable_ack_payload+0x3e>
    } else {
        feature = (uint8_t)_CLR_BIT(feature, EN_ACK_PAY);
 8004d84:	220f      	movs	r2, #15
 8004d86:	18bb      	adds	r3, r7, r2
 8004d88:	18ba      	adds	r2, r7, r2
 8004d8a:	7812      	ldrb	r2, [r2, #0]
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	438a      	bics	r2, r1
 8004d90:	701a      	strb	r2, [r3, #0]
    }
    hal_nrf_write_reg(FEATURE, feature);
 8004d92:	230f      	movs	r3, #15
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	0019      	movs	r1, r3
 8004d9a:	201d      	movs	r0, #29
 8004d9c:	f7ff fe96 	bl	8004acc <hal_nrf_write_reg>
}
 8004da0:	46c0      	nop			; (mov r8, r8)
 8004da2:	46bd      	mov	sp, r7
 8004da4:	b004      	add	sp, #16
 8004da6:	bdb0      	pop	{r4, r5, r7, pc}

08004da8 <hal_nrf_enable_dynamic_ack>:
{
    return ((hal_nrf_read_reg(FEATURE) & (uint8_t)_BIT(EN_ACK_PAY)) != 0);
}

void hal_nrf_enable_dynamic_ack(uint8_t enable)
{
 8004da8:	b5b0      	push	{r4, r5, r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	0002      	movs	r2, r0
 8004db0:	1dfb      	adds	r3, r7, #7
 8004db2:	701a      	strb	r2, [r3, #0]
    uint8_t feature = hal_nrf_read_reg(FEATURE);
 8004db4:	250f      	movs	r5, #15
 8004db6:	197c      	adds	r4, r7, r5
 8004db8:	201d      	movs	r0, #29
 8004dba:	f7ff fdb9 	bl	8004930 <hal_nrf_read_reg>
 8004dbe:	0003      	movs	r3, r0
 8004dc0:	7023      	strb	r3, [r4, #0]

    if (enable) {
 8004dc2:	1dfb      	adds	r3, r7, #7
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d006      	beq.n	8004dd8 <hal_nrf_enable_dynamic_ack+0x30>
        feature = (uint8_t)_SET_BIT(feature, EN_DYN_ACK);
 8004dca:	197b      	adds	r3, r7, r5
 8004dcc:	197a      	adds	r2, r7, r5
 8004dce:	7812      	ldrb	r2, [r2, #0]
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	e006      	b.n	8004de6 <hal_nrf_enable_dynamic_ack+0x3e>
    } else {
        feature = (uint8_t)_CLR_BIT(feature, EN_DYN_ACK);
 8004dd8:	220f      	movs	r2, #15
 8004dda:	18bb      	adds	r3, r7, r2
 8004ddc:	18ba      	adds	r2, r7, r2
 8004dde:	7812      	ldrb	r2, [r2, #0]
 8004de0:	2101      	movs	r1, #1
 8004de2:	438a      	bics	r2, r1
 8004de4:	701a      	strb	r2, [r3, #0]
    }
    hal_nrf_write_reg(FEATURE, feature);
 8004de6:	230f      	movs	r3, #15
 8004de8:	18fb      	adds	r3, r7, r3
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	0019      	movs	r1, r3
 8004dee:	201d      	movs	r0, #29
 8004df0:	f7ff fe6c 	bl	8004acc <hal_nrf_write_reg>
}
 8004df4:	46c0      	nop			; (mov r8, r8)
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b004      	add	sp, #16
 8004dfa:	bdb0      	pop	{r4, r5, r7, pc}

08004dfc <hal_nrf_set_rf_channel>:
{
    hal_nrf_write_multibyte_reg(W_ACK_PAYLOAD | pipe, tx_pload, length);
}

void hal_nrf_set_rf_channel(uint8_t channel)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	0002      	movs	r2, r0
 8004e04:	1dfb      	adds	r3, r7, #7
 8004e06:	701a      	strb	r2, [r3, #0]
    uint8_t rf_ch = (uint8_t)(channel & 0x7f);
 8004e08:	200f      	movs	r0, #15
 8004e0a:	183b      	adds	r3, r7, r0
 8004e0c:	1dfa      	adds	r2, r7, #7
 8004e0e:	7812      	ldrb	r2, [r2, #0]
 8004e10:	217f      	movs	r1, #127	; 0x7f
 8004e12:	400a      	ands	r2, r1
 8004e14:	701a      	strb	r2, [r3, #0]
    hal_nrf_write_reg(RF_CH, rf_ch);
 8004e16:	183b      	adds	r3, r7, r0
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	0019      	movs	r1, r3
 8004e1c:	2005      	movs	r0, #5
 8004e1e:	f7ff fe55 	bl	8004acc <hal_nrf_write_reg>
}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	46bd      	mov	sp, r7
 8004e26:	b004      	add	sp, #16
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <hal_nrf_set_output_power>:
{
    return (hal_nrf_read_reg(RF_CH) & 0x7f);
}

void hal_nrf_set_output_power(hal_nrf_output_power_t power)
{
 8004e2a:	b5b0      	push	{r4, r5, r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	0002      	movs	r2, r0
 8004e32:	1dfb      	adds	r3, r7, #7
 8004e34:	701a      	strb	r2, [r3, #0]
    uint8_t rf_setup = hal_nrf_read_reg(RF_SETUP);
 8004e36:	250f      	movs	r5, #15
 8004e38:	197c      	adds	r4, r7, r5
 8004e3a:	2006      	movs	r0, #6
 8004e3c:	f7ff fd78 	bl	8004930 <hal_nrf_read_reg>
 8004e40:	0003      	movs	r3, r0
 8004e42:	7023      	strb	r3, [r4, #0]

    rf_setup &= (uint8_t)(~(uint8_t)(_BIT(RF_PWR0)|_BIT(RF_PWR1)));
 8004e44:	0028      	movs	r0, r5
 8004e46:	183b      	adds	r3, r7, r0
 8004e48:	183a      	adds	r2, r7, r0
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	2106      	movs	r1, #6
 8004e4e:	438a      	bics	r2, r1
 8004e50:	701a      	strb	r2, [r3, #0]
    rf_setup |= (uint8_t)(((int)power & 0x03)<<RF_PWR0);
 8004e52:	1dfb      	adds	r3, r7, #7
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	18db      	adds	r3, r3, r3
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	b25b      	sxtb	r3, r3
 8004e5c:	2206      	movs	r2, #6
 8004e5e:	4013      	ands	r3, r2
 8004e60:	b25a      	sxtb	r2, r3
 8004e62:	183b      	adds	r3, r7, r0
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	b25b      	sxtb	r3, r3
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	b25a      	sxtb	r2, r3
 8004e6c:	183b      	adds	r3, r7, r0
 8004e6e:	701a      	strb	r2, [r3, #0]
    hal_nrf_write_reg(RF_SETUP, rf_setup);
 8004e70:	183b      	adds	r3, r7, r0
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	0019      	movs	r1, r3
 8004e76:	2006      	movs	r0, #6
 8004e78:	f7ff fe28 	bl	8004acc <hal_nrf_write_reg>
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b004      	add	sp, #16
 8004e82:	bdb0      	pop	{r4, r5, r7, pc}

08004e84 <hal_nrf_set_datarate>:
    return (hal_nrf_output_power_t)
        ((hal_nrf_read_reg(RF_SETUP)>>RF_PWR0) & 0x03);
}

void hal_nrf_set_datarate(hal_nrf_datarate_t datarate)
{
 8004e84:	b5b0      	push	{r4, r5, r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	0002      	movs	r2, r0
 8004e8c:	1dfb      	adds	r3, r7, #7
 8004e8e:	701a      	strb	r2, [r3, #0]
    uint8_t rf_setup = hal_nrf_read_reg(RF_SETUP);
 8004e90:	250f      	movs	r5, #15
 8004e92:	197c      	adds	r4, r7, r5
 8004e94:	2006      	movs	r0, #6
 8004e96:	f7ff fd4b 	bl	8004930 <hal_nrf_read_reg>
 8004e9a:	0003      	movs	r3, r0
 8004e9c:	7023      	strb	r3, [r4, #0]

    switch (datarate)
 8004e9e:	1dfb      	adds	r3, r7, #7
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00e      	beq.n	8004ec4 <hal_nrf_set_datarate+0x40>
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d11a      	bne.n	8004ee0 <hal_nrf_set_datarate+0x5c>
    {
    case HAL_NRF_250KBPS:
        rf_setup = (uint8_t)_SET_BIT(rf_setup, RF_DR_LOW);
 8004eaa:	197b      	adds	r3, r7, r5
 8004eac:	197a      	adds	r2, r7, r5
 8004eae:	7812      	ldrb	r2, [r2, #0]
 8004eb0:	2120      	movs	r1, #32
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	701a      	strb	r2, [r3, #0]
        rf_setup = (uint8_t)_CLR_BIT(rf_setup, RF_DR_HIGH);
 8004eb6:	197b      	adds	r3, r7, r5
 8004eb8:	197a      	adds	r2, r7, r5
 8004eba:	7812      	ldrb	r2, [r2, #0]
 8004ebc:	2108      	movs	r1, #8
 8004ebe:	438a      	bics	r2, r1
 8004ec0:	701a      	strb	r2, [r3, #0]
        break;
 8004ec2:	e01b      	b.n	8004efc <hal_nrf_set_datarate+0x78>
    case HAL_NRF_1MBPS:
        rf_setup = (uint8_t)_CLR_BIT(rf_setup, RF_DR_LOW);
 8004ec4:	200f      	movs	r0, #15
 8004ec6:	183b      	adds	r3, r7, r0
 8004ec8:	183a      	adds	r2, r7, r0
 8004eca:	7812      	ldrb	r2, [r2, #0]
 8004ecc:	2120      	movs	r1, #32
 8004ece:	438a      	bics	r2, r1
 8004ed0:	701a      	strb	r2, [r3, #0]
        rf_setup = (uint8_t)_CLR_BIT(rf_setup, RF_DR_HIGH);
 8004ed2:	183b      	adds	r3, r7, r0
 8004ed4:	183a      	adds	r2, r7, r0
 8004ed6:	7812      	ldrb	r2, [r2, #0]
 8004ed8:	2108      	movs	r1, #8
 8004eda:	438a      	bics	r2, r1
 8004edc:	701a      	strb	r2, [r3, #0]
        break;
 8004ede:	e00d      	b.n	8004efc <hal_nrf_set_datarate+0x78>
    case HAL_NRF_2MBPS:
    default:
        rf_setup = (uint8_t)_CLR_BIT(rf_setup, RF_DR_LOW);
 8004ee0:	200f      	movs	r0, #15
 8004ee2:	183b      	adds	r3, r7, r0
 8004ee4:	183a      	adds	r2, r7, r0
 8004ee6:	7812      	ldrb	r2, [r2, #0]
 8004ee8:	2120      	movs	r1, #32
 8004eea:	438a      	bics	r2, r1
 8004eec:	701a      	strb	r2, [r3, #0]
        rf_setup = (uint8_t)_SET_BIT(rf_setup, RF_DR_HIGH);
 8004eee:	183b      	adds	r3, r7, r0
 8004ef0:	183a      	adds	r2, r7, r0
 8004ef2:	7812      	ldrb	r2, [r2, #0]
 8004ef4:	2108      	movs	r1, #8
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	701a      	strb	r2, [r3, #0]
        break;
 8004efa:	46c0      	nop			; (mov r8, r8)
    }
    hal_nrf_write_reg(RF_SETUP, rf_setup);
 8004efc:	230f      	movs	r3, #15
 8004efe:	18fb      	adds	r3, r7, r3
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	0019      	movs	r1, r3
 8004f04:	2006      	movs	r0, #6
 8004f06:	f7ff fde1 	bl	8004acc <hal_nrf_write_reg>
}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b004      	add	sp, #16
 8004f10:	bdb0      	pop	{r4, r5, r7, pc}

08004f12 <hal_nrf_set_crc_mode>:
        (((rf_setup & (uint8_t)_BIT(RF_DR_LOW))<<1) |
         (rf_setup & (uint8_t)_BIT(RF_DR_HIGH)));
}

void hal_nrf_set_crc_mode(hal_nrf_crc_mode_t crc_mode)
{
 8004f12:	b590      	push	{r4, r7, lr}
 8004f14:	b085      	sub	sp, #20
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	0002      	movs	r2, r0
 8004f1a:	1dfb      	adds	r3, r7, #7
 8004f1c:	701a      	strb	r2, [r3, #0]
    uint8_t config = hal_nrf_read_reg(CONFIG);
 8004f1e:	230f      	movs	r3, #15
 8004f20:	18fc      	adds	r4, r7, r3
 8004f22:	2000      	movs	r0, #0
 8004f24:	f7ff fd04 	bl	8004930 <hal_nrf_read_reg>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	7023      	strb	r3, [r4, #0]

    switch (crc_mode)
 8004f2c:	1dfb      	adds	r3, r7, #7
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d01b      	beq.n	8004f6c <hal_nrf_set_crc_mode+0x5a>
 8004f34:	dc28      	bgt.n	8004f88 <hal_nrf_set_crc_mode+0x76>
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <hal_nrf_set_crc_mode+0x2e>
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d008      	beq.n	8004f50 <hal_nrf_set_crc_mode+0x3e>
    case HAL_NRF_CRC_16BIT:
        config = (uint8_t)_SET_BIT(config, EN_CRC);
        config = (uint8_t)_SET_BIT(config, CRCO);
        break;
    default:
        break;
 8004f3e:	e023      	b.n	8004f88 <hal_nrf_set_crc_mode+0x76>
        config = (uint8_t)_CLR_BIT(config, EN_CRC);
 8004f40:	220f      	movs	r2, #15
 8004f42:	18bb      	adds	r3, r7, r2
 8004f44:	18ba      	adds	r2, r7, r2
 8004f46:	7812      	ldrb	r2, [r2, #0]
 8004f48:	2108      	movs	r1, #8
 8004f4a:	438a      	bics	r2, r1
 8004f4c:	701a      	strb	r2, [r3, #0]
        break;
 8004f4e:	e01c      	b.n	8004f8a <hal_nrf_set_crc_mode+0x78>
        config = (uint8_t)_SET_BIT(config, EN_CRC);
 8004f50:	200f      	movs	r0, #15
 8004f52:	183b      	adds	r3, r7, r0
 8004f54:	183a      	adds	r2, r7, r0
 8004f56:	7812      	ldrb	r2, [r2, #0]
 8004f58:	2108      	movs	r1, #8
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	701a      	strb	r2, [r3, #0]
        config = (uint8_t)_CLR_BIT(config, CRCO);
 8004f5e:	183b      	adds	r3, r7, r0
 8004f60:	183a      	adds	r2, r7, r0
 8004f62:	7812      	ldrb	r2, [r2, #0]
 8004f64:	2104      	movs	r1, #4
 8004f66:	438a      	bics	r2, r1
 8004f68:	701a      	strb	r2, [r3, #0]
        break;
 8004f6a:	e00e      	b.n	8004f8a <hal_nrf_set_crc_mode+0x78>
        config = (uint8_t)_SET_BIT(config, EN_CRC);
 8004f6c:	200f      	movs	r0, #15
 8004f6e:	183b      	adds	r3, r7, r0
 8004f70:	183a      	adds	r2, r7, r0
 8004f72:	7812      	ldrb	r2, [r2, #0]
 8004f74:	2108      	movs	r1, #8
 8004f76:	430a      	orrs	r2, r1
 8004f78:	701a      	strb	r2, [r3, #0]
        config = (uint8_t)_SET_BIT(config, CRCO);
 8004f7a:	183b      	adds	r3, r7, r0
 8004f7c:	183a      	adds	r2, r7, r0
 8004f7e:	7812      	ldrb	r2, [r2, #0]
 8004f80:	2104      	movs	r1, #4
 8004f82:	430a      	orrs	r2, r1
 8004f84:	701a      	strb	r2, [r3, #0]
        break;
 8004f86:	e000      	b.n	8004f8a <hal_nrf_set_crc_mode+0x78>
        break;
 8004f88:	46c0      	nop			; (mov r8, r8)
    }
    hal_nrf_write_reg(CONFIG, config);
 8004f8a:	230f      	movs	r3, #15
 8004f8c:	18fb      	adds	r3, r7, r3
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	0019      	movs	r1, r3
 8004f92:	2000      	movs	r0, #0
 8004f94:	f7ff fd9a 	bl	8004acc <hal_nrf_write_reg>
}
 8004f98:	46c0      	nop			; (mov r8, r8)
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b005      	add	sp, #20
 8004f9e:	bd90      	pop	{r4, r7, pc}

08004fa0 <hal_nrf_set_rx_payload_width>:
{
    return (uint16_t)((((hal_nrf_read_reg(SETUP_RETR)>>4) & 0x0f)+1)*250);
}

void hal_nrf_set_rx_payload_width(uint8_t pipe_num, uint8_t pload_width)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	0002      	movs	r2, r0
 8004fa8:	1dfb      	adds	r3, r7, #7
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	1dbb      	adds	r3, r7, #6
 8004fae:	1c0a      	adds	r2, r1, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
    hal_nrf_write_reg(RX_PW_P0+pipe_num, pload_width);
 8004fb2:	1dfb      	adds	r3, r7, #7
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	3311      	adds	r3, #17
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	1dbb      	adds	r3, r7, #6
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	0019      	movs	r1, r3
 8004fc0:	0010      	movs	r0, r2
 8004fc2:	f7ff fd83 	bl	8004acc <hal_nrf_write_reg>
}
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	b002      	add	sp, #8
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <hal_nrf_open_pipe>:
{
    return hal_nrf_read_reg(RX_PW_P0+pipe_num);
}

void hal_nrf_open_pipe(hal_nrf_address_t pipe_num, uint8_t auto_ack)
{
 8004fce:	b590      	push	{r4, r7, lr}
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	0002      	movs	r2, r0
 8004fd6:	1dfb      	adds	r3, r7, #7
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	1dbb      	adds	r3, r7, #6
 8004fdc:	1c0a      	adds	r2, r1, #0
 8004fde:	701a      	strb	r2, [r3, #0]
    uint8_t en_rxaddr, en_aa;

    en_rxaddr = hal_nrf_read_reg(EN_RXADDR);
 8004fe0:	230f      	movs	r3, #15
 8004fe2:	18fc      	adds	r4, r7, r3
 8004fe4:	2002      	movs	r0, #2
 8004fe6:	f7ff fca3 	bl	8004930 <hal_nrf_read_reg>
 8004fea:	0003      	movs	r3, r0
 8004fec:	7023      	strb	r3, [r4, #0]
    en_aa = hal_nrf_read_reg(EN_AA);
 8004fee:	230e      	movs	r3, #14
 8004ff0:	18fc      	adds	r4, r7, r3
 8004ff2:	2001      	movs	r0, #1
 8004ff4:	f7ff fc9c 	bl	8004930 <hal_nrf_read_reg>
 8004ff8:	0003      	movs	r3, r0
 8004ffa:	7023      	strb	r3, [r4, #0]

    switch(pipe_num)
 8004ffc:	1dfb      	adds	r3, r7, #7
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b05      	cmp	r3, #5
 8005002:	dc02      	bgt.n	800500a <hal_nrf_open_pipe+0x3c>
 8005004:	2b00      	cmp	r3, #0
 8005006:	da03      	bge.n	8005010 <hal_nrf_open_pipe+0x42>
        }
        break;

    case HAL_NRF_TX:
    default:
        goto finish;
 8005008:	e04e      	b.n	80050a8 <hal_nrf_open_pipe+0xda>
    switch(pipe_num)
 800500a:	2bff      	cmp	r3, #255	; 0xff
 800500c:	d02c      	beq.n	8005068 <hal_nrf_open_pipe+0x9a>
        goto finish;
 800500e:	e04b      	b.n	80050a8 <hal_nrf_open_pipe+0xda>
        en_rxaddr = (uint8_t)_SET_BIT(en_rxaddr, (int)pipe_num);
 8005010:	1dfb      	adds	r3, r7, #7
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2201      	movs	r2, #1
 8005016:	409a      	lsls	r2, r3
 8005018:	0013      	movs	r3, r2
 800501a:	b2d9      	uxtb	r1, r3
 800501c:	220f      	movs	r2, #15
 800501e:	18bb      	adds	r3, r7, r2
 8005020:	18ba      	adds	r2, r7, r2
 8005022:	7812      	ldrb	r2, [r2, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	701a      	strb	r2, [r3, #0]
        if(auto_ack) {
 8005028:	1dbb      	adds	r3, r7, #6
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00c      	beq.n	800504a <hal_nrf_open_pipe+0x7c>
            en_aa = (uint8_t)_SET_BIT(en_aa, (int)pipe_num);
 8005030:	1dfb      	adds	r3, r7, #7
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2201      	movs	r2, #1
 8005036:	409a      	lsls	r2, r3
 8005038:	0013      	movs	r3, r2
 800503a:	b2d9      	uxtb	r1, r3
 800503c:	220e      	movs	r2, #14
 800503e:	18bb      	adds	r3, r7, r2
 8005040:	18ba      	adds	r2, r7, r2
 8005042:	7812      	ldrb	r2, [r2, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	701a      	strb	r2, [r3, #0]
        break;
 8005048:	e020      	b.n	800508c <hal_nrf_open_pipe+0xbe>
            en_aa = (uint8_t)_CLR_BIT(en_aa, (int)pipe_num);
 800504a:	1dfb      	adds	r3, r7, #7
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2201      	movs	r2, #1
 8005050:	409a      	lsls	r2, r3
 8005052:	0013      	movs	r3, r2
 8005054:	b2db      	uxtb	r3, r3
 8005056:	43db      	mvns	r3, r3
 8005058:	b2da      	uxtb	r2, r3
 800505a:	210e      	movs	r1, #14
 800505c:	187b      	adds	r3, r7, r1
 800505e:	1879      	adds	r1, r7, r1
 8005060:	7809      	ldrb	r1, [r1, #0]
 8005062:	400a      	ands	r2, r1
 8005064:	701a      	strb	r2, [r3, #0]
        break;
 8005066:	e011      	b.n	800508c <hal_nrf_open_pipe+0xbe>
        en_rxaddr = (uint8_t)(~(_BIT(6)|_BIT(7)));
 8005068:	230f      	movs	r3, #15
 800506a:	18fb      	adds	r3, r7, r3
 800506c:	223f      	movs	r2, #63	; 0x3f
 800506e:	701a      	strb	r2, [r3, #0]
        if(auto_ack) {
 8005070:	1dbb      	adds	r3, r7, #6
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d004      	beq.n	8005082 <hal_nrf_open_pipe+0xb4>
            en_aa = (uint8_t)(~(_BIT(6)|_BIT(7)));
 8005078:	230e      	movs	r3, #14
 800507a:	18fb      	adds	r3, r7, r3
 800507c:	223f      	movs	r2, #63	; 0x3f
 800507e:	701a      	strb	r2, [r3, #0]
        break;
 8005080:	e003      	b.n	800508a <hal_nrf_open_pipe+0xbc>
            en_aa = 0;
 8005082:	230e      	movs	r3, #14
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	2200      	movs	r2, #0
 8005088:	701a      	strb	r2, [r3, #0]
        break;
 800508a:	46c0      	nop			; (mov r8, r8)
    }

    hal_nrf_write_reg(EN_RXADDR, en_rxaddr);
 800508c:	230f      	movs	r3, #15
 800508e:	18fb      	adds	r3, r7, r3
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	0019      	movs	r1, r3
 8005094:	2002      	movs	r0, #2
 8005096:	f7ff fd19 	bl	8004acc <hal_nrf_write_reg>
    hal_nrf_write_reg(EN_AA, en_aa);
 800509a:	230e      	movs	r3, #14
 800509c:	18fb      	adds	r3, r7, r3
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	0019      	movs	r1, r3
 80050a2:	2001      	movs	r0, #1
 80050a4:	f7ff fd12 	bl	8004acc <hal_nrf_write_reg>
finish:
    return;
 80050a8:	46c0      	nop			; (mov r8, r8)
}
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b005      	add	sp, #20
 80050ae:	bd90      	pop	{r4, r7, pc}

080050b0 <hal_nrf_close_pipe>:

void hal_nrf_close_pipe(hal_nrf_address_t pipe_num)
{
 80050b0:	b590      	push	{r4, r7, lr}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	0002      	movs	r2, r0
 80050b8:	1dfb      	adds	r3, r7, #7
 80050ba:	701a      	strb	r2, [r3, #0]
    uint8_t en_rxaddr, en_aa;

    en_rxaddr = hal_nrf_read_reg(EN_RXADDR);
 80050bc:	230f      	movs	r3, #15
 80050be:	18fc      	adds	r4, r7, r3
 80050c0:	2002      	movs	r0, #2
 80050c2:	f7ff fc35 	bl	8004930 <hal_nrf_read_reg>
 80050c6:	0003      	movs	r3, r0
 80050c8:	7023      	strb	r3, [r4, #0]
    en_aa = hal_nrf_read_reg(EN_AA);
 80050ca:	230e      	movs	r3, #14
 80050cc:	18fc      	adds	r4, r7, r3
 80050ce:	2001      	movs	r0, #1
 80050d0:	f7ff fc2e 	bl	8004930 <hal_nrf_read_reg>
 80050d4:	0003      	movs	r3, r0
 80050d6:	7023      	strb	r3, [r4, #0]

    switch(pipe_num)
 80050d8:	1dfb      	adds	r3, r7, #7
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b05      	cmp	r3, #5
 80050de:	dc02      	bgt.n	80050e6 <hal_nrf_close_pipe+0x36>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	da03      	bge.n	80050ec <hal_nrf_close_pipe+0x3c>
        en_aa = 0;
        break;

    case HAL_NRF_TX:
    default:
        goto finish;
 80050e4:	e036      	b.n	8005154 <hal_nrf_close_pipe+0xa4>
    switch(pipe_num)
 80050e6:	2bff      	cmp	r3, #255	; 0xff
 80050e8:	d01d      	beq.n	8005126 <hal_nrf_close_pipe+0x76>
        goto finish;
 80050ea:	e033      	b.n	8005154 <hal_nrf_close_pipe+0xa4>
        en_rxaddr = (uint8_t)_CLR_BIT(en_rxaddr, (int)pipe_num);
 80050ec:	1dfb      	adds	r3, r7, #7
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2201      	movs	r2, #1
 80050f2:	409a      	lsls	r2, r3
 80050f4:	0013      	movs	r3, r2
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	43db      	mvns	r3, r3
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	210f      	movs	r1, #15
 80050fe:	187b      	adds	r3, r7, r1
 8005100:	1879      	adds	r1, r7, r1
 8005102:	7809      	ldrb	r1, [r1, #0]
 8005104:	400a      	ands	r2, r1
 8005106:	701a      	strb	r2, [r3, #0]
        en_aa = (uint8_t)_CLR_BIT(en_aa, (int)pipe_num);
 8005108:	1dfb      	adds	r3, r7, #7
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2201      	movs	r2, #1
 800510e:	409a      	lsls	r2, r3
 8005110:	0013      	movs	r3, r2
 8005112:	b2db      	uxtb	r3, r3
 8005114:	43db      	mvns	r3, r3
 8005116:	b2da      	uxtb	r2, r3
 8005118:	210e      	movs	r1, #14
 800511a:	187b      	adds	r3, r7, r1
 800511c:	1879      	adds	r1, r7, r1
 800511e:	7809      	ldrb	r1, [r1, #0]
 8005120:	400a      	ands	r2, r1
 8005122:	701a      	strb	r2, [r3, #0]
        break;
 8005124:	e008      	b.n	8005138 <hal_nrf_close_pipe+0x88>
        en_rxaddr = 0;
 8005126:	230f      	movs	r3, #15
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	2200      	movs	r2, #0
 800512c:	701a      	strb	r2, [r3, #0]
        en_aa = 0;
 800512e:	230e      	movs	r3, #14
 8005130:	18fb      	adds	r3, r7, r3
 8005132:	2200      	movs	r2, #0
 8005134:	701a      	strb	r2, [r3, #0]
        break;
 8005136:	46c0      	nop			; (mov r8, r8)
    }

    hal_nrf_write_reg(EN_RXADDR, en_rxaddr);
 8005138:	230f      	movs	r3, #15
 800513a:	18fb      	adds	r3, r7, r3
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	0019      	movs	r1, r3
 8005140:	2002      	movs	r0, #2
 8005142:	f7ff fcc3 	bl	8004acc <hal_nrf_write_reg>
    hal_nrf_write_reg(EN_AA, en_aa);
 8005146:	230e      	movs	r3, #14
 8005148:	18fb      	adds	r3, r7, r3
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	0019      	movs	r1, r3
 800514e:	2001      	movs	r0, #1
 8005150:	f7ff fcbc 	bl	8004acc <hal_nrf_write_reg>
finish:
    return;
 8005154:	46c0      	nop			; (mov r8, r8)
}
 8005156:	46bd      	mov	sp, r7
 8005158:	b005      	add	sp, #20
 800515a:	bd90      	pop	{r4, r7, pc}

0800515c <hal_nrf_get_address_width>:
    uint8_t setup_aw = (uint8_t)(((int)address_width-2) & 0x03);
    hal_nrf_write_reg(SETUP_AW, setup_aw);
}

uint8_t hal_nrf_get_address_width(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
    return (uint8_t)(hal_nrf_read_reg(SETUP_AW)+2);
 8005160:	2003      	movs	r0, #3
 8005162:	f7ff fbe5 	bl	8004930 <hal_nrf_read_reg>
 8005166:	0003      	movs	r3, r0
 8005168:	3302      	adds	r3, #2
 800516a:	b2db      	uxtb	r3, r3
}
 800516c:	0018      	movs	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <hal_nrf_set_address>:

void hal_nrf_set_address(const hal_nrf_address_t address, const uint8_t *addr)
{
 8005172:	b590      	push	{r4, r7, lr}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	0002      	movs	r2, r0
 800517a:	6039      	str	r1, [r7, #0]
 800517c:	1dfb      	adds	r3, r7, #7
 800517e:	701a      	strb	r2, [r3, #0]
    switch(address)
 8005180:	1dfb      	adds	r3, r7, #7
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b06      	cmp	r3, #6
 8005186:	d009      	beq.n	800519c <hal_nrf_set_address+0x2a>
 8005188:	dc21      	bgt.n	80051ce <hal_nrf_set_address+0x5c>
 800518a:	2b01      	cmp	r3, #1
 800518c:	dc02      	bgt.n	8005194 <hal_nrf_set_address+0x22>
 800518e:	2b00      	cmp	r3, #0
 8005190:	da04      	bge.n	800519c <hal_nrf_set_address+0x2a>
        hal_nrf_write_reg(RX_ADDR_P0 + (uint8_t)address, *addr);
        break;

    case HAL_NRF_ALL:
    default:
        break;
 8005192:	e01c      	b.n	80051ce <hal_nrf_set_address+0x5c>
 8005194:	3b02      	subs	r3, #2
    switch(address)
 8005196:	2b03      	cmp	r3, #3
 8005198:	d819      	bhi.n	80051ce <hal_nrf_set_address+0x5c>
 800519a:	e00d      	b.n	80051b8 <hal_nrf_set_address+0x46>
        hal_nrf_write_multibyte_reg(W_REGISTER+RX_ADDR_P0+
 800519c:	1dfb      	adds	r3, r7, #7
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	332a      	adds	r3, #42	; 0x2a
 80051a2:	b2dc      	uxtb	r4, r3
 80051a4:	f7ff ffda 	bl	800515c <hal_nrf_get_address_width>
 80051a8:	0003      	movs	r3, r0
 80051aa:	001a      	movs	r2, r3
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	0019      	movs	r1, r3
 80051b0:	0020      	movs	r0, r4
 80051b2:	f7ff fcc3 	bl	8004b3c <hal_nrf_write_multibyte_reg>
      break;
 80051b6:	e00b      	b.n	80051d0 <hal_nrf_set_address+0x5e>
        hal_nrf_write_reg(RX_ADDR_P0 + (uint8_t)address, *addr);
 80051b8:	1dfb      	adds	r3, r7, #7
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	330a      	adds	r3, #10
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	0019      	movs	r1, r3
 80051c6:	0010      	movs	r0, r2
 80051c8:	f7ff fc80 	bl	8004acc <hal_nrf_write_reg>
        break;
 80051cc:	e000      	b.n	80051d0 <hal_nrf_set_address+0x5e>
        break;
 80051ce:	46c0      	nop			; (mov r8, r8)
    }
}
 80051d0:	46c0      	nop			; (mov r8, r8)
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b003      	add	sp, #12
 80051d6:	bd90      	pop	{r4, r7, pc}

080051d8 <hal_nrf_get_address>:

uint8_t hal_nrf_get_address(uint8_t address, uint8_t *addr)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	0002      	movs	r2, r0
 80051e0:	6039      	str	r1, [r7, #0]
 80051e2:	1dfb      	adds	r3, r7, #7
 80051e4:	701a      	strb	r2, [r3, #0]
    switch (address)
 80051e6:	1dfb      	adds	r3, r7, #7
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	dc02      	bgt.n	80051f4 <hal_nrf_get_address+0x1c>
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	da02      	bge.n	80051f8 <hal_nrf_get_address+0x20>
 80051f2:	e00b      	b.n	800520c <hal_nrf_get_address+0x34>
 80051f4:	2b06      	cmp	r3, #6
 80051f6:	d109      	bne.n	800520c <hal_nrf_get_address+0x34>
    {
    case HAL_NRF_PIPE0:
    case HAL_NRF_PIPE1:
    case HAL_NRF_TX:
        return (uint8_t)hal_nrf_read_multibyte_reg(address, addr, 0);
 80051f8:	6839      	ldr	r1, [r7, #0]
 80051fa:	1dfb      	adds	r3, r7, #7
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2200      	movs	r2, #0
 8005200:	0018      	movs	r0, r3
 8005202:	f7ff fbc7 	bl	8004994 <hal_nrf_read_multibyte_reg>
 8005206:	0003      	movs	r3, r0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	e00b      	b.n	8005224 <hal_nrf_get_address+0x4c>
    default:
        *addr = hal_nrf_read_reg(RX_ADDR_P0 + address);
 800520c:	1dfb      	adds	r3, r7, #7
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	330a      	adds	r3, #10
 8005212:	b2db      	uxtb	r3, r3
 8005214:	0018      	movs	r0, r3
 8005216:	f7ff fb8b 	bl	8004930 <hal_nrf_read_reg>
 800521a:	0003      	movs	r3, r0
 800521c:	001a      	movs	r2, r3
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	701a      	strb	r2, [r3, #0]
        return 1;
 8005222:	2301      	movs	r3, #1
    }
}
 8005224:	0018      	movs	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	b002      	add	sp, #8
 800522a:	bd80      	pop	{r7, pc}

0800522c <hal_nrf_config_rx_pipe>:

void hal_nrf_config_rx_pipe(hal_nrf_address_t pipe_num,
    const uint8_t *addr, uint8_t auto_ack, uint8_t pload_width)
{
 800522c:	b590      	push	{r4, r7, lr}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	0004      	movs	r4, r0
 8005234:	6039      	str	r1, [r7, #0]
 8005236:	0010      	movs	r0, r2
 8005238:	0019      	movs	r1, r3
 800523a:	1dfb      	adds	r3, r7, #7
 800523c:	1c22      	adds	r2, r4, #0
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	1dbb      	adds	r3, r7, #6
 8005242:	1c02      	adds	r2, r0, #0
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	1d7b      	adds	r3, r7, #5
 8005248:	1c0a      	adds	r2, r1, #0
 800524a:	701a      	strb	r2, [r3, #0]
    hal_nrf_open_pipe(pipe_num, auto_ack);
 800524c:	1dbb      	adds	r3, r7, #6
 800524e:	781a      	ldrb	r2, [r3, #0]
 8005250:	1dfb      	adds	r3, r7, #7
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	0011      	movs	r1, r2
 8005256:	0018      	movs	r0, r3
 8005258:	f7ff feb9 	bl	8004fce <hal_nrf_open_pipe>

    if (addr) {
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d006      	beq.n	8005270 <hal_nrf_config_rx_pipe+0x44>
        hal_nrf_set_address(pipe_num, addr);
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	1dfb      	adds	r3, r7, #7
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	0011      	movs	r1, r2
 800526a:	0018      	movs	r0, r3
 800526c:	f7ff ff81 	bl	8005172 <hal_nrf_set_address>
    }
    hal_nrf_set_rx_payload_width((uint8_t)pipe_num, pload_width);
 8005270:	1d7b      	adds	r3, r7, #5
 8005272:	781a      	ldrb	r2, [r3, #0]
 8005274:	1dfb      	adds	r3, r7, #7
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	0011      	movs	r1, r2
 800527a:	0018      	movs	r0, r3
 800527c:	f7ff fe90 	bl	8004fa0 <hal_nrf_set_rx_payload_width>
}
 8005280:	46c0      	nop			; (mov r8, r8)
 8005282:	46bd      	mov	sp, r7
 8005284:	b003      	add	sp, #12
 8005286:	bd90      	pop	{r4, r7, pc}

08005288 <hal_nrf_get_clear_irq_flags>:
{
    return hal_nrf_get_status() & (uint8_t)(_BIT(MAX_RT)|_BIT(TX_DS)|_BIT(RX_DR));
}

uint8_t hal_nrf_get_clear_irq_flags(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
    return hal_nrf_write_reg(STATUS,
 800528c:	2170      	movs	r1, #112	; 0x70
 800528e:	2007      	movs	r0, #7
 8005290:	f7ff fc1c 	bl	8004acc <hal_nrf_write_reg>
 8005294:	0003      	movs	r3, r0
 8005296:	001a      	movs	r2, r3
        (uint8_t)(_BIT(MAX_RT)|_BIT(TX_DS)|_BIT(RX_DR))) &
 8005298:	2370      	movs	r3, #112	; 0x70
 800529a:	4013      	ands	r3, r2
 800529c:	b2db      	uxtb	r3, r3
        (uint8_t)(_BIT(MAX_RT)|_BIT(TX_DS)|_BIT(RX_DR));
}
 800529e:	0018      	movs	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <hal_nrf_set_power_mode>:
{
    hal_nrf_write_reg(STATUS, (uint8_t)_BIT(int_source));
}

void hal_nrf_set_power_mode(hal_nrf_pwr_mode_t pwr_mode)
{
 80052a4:	b5b0      	push	{r4, r5, r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	0002      	movs	r2, r0
 80052ac:	1dfb      	adds	r3, r7, #7
 80052ae:	701a      	strb	r2, [r3, #0]
    uint8_t config = hal_nrf_read_reg(CONFIG);
 80052b0:	250f      	movs	r5, #15
 80052b2:	197c      	adds	r4, r7, r5
 80052b4:	2000      	movs	r0, #0
 80052b6:	f7ff fb3b 	bl	8004930 <hal_nrf_read_reg>
 80052ba:	0003      	movs	r3, r0
 80052bc:	7023      	strb	r3, [r4, #0]

    if(pwr_mode == HAL_NRF_PWR_UP) {
 80052be:	1dfb      	adds	r3, r7, #7
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d106      	bne.n	80052d4 <hal_nrf_set_power_mode+0x30>
        config = (uint8_t)_SET_BIT(config, PWR_UP);
 80052c6:	197b      	adds	r3, r7, r5
 80052c8:	197a      	adds	r2, r7, r5
 80052ca:	7812      	ldrb	r2, [r2, #0]
 80052cc:	2102      	movs	r1, #2
 80052ce:	430a      	orrs	r2, r1
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	e006      	b.n	80052e2 <hal_nrf_set_power_mode+0x3e>
    } else {
        config = (uint8_t)_CLR_BIT(config, PWR_UP);
 80052d4:	220f      	movs	r2, #15
 80052d6:	18bb      	adds	r3, r7, r2
 80052d8:	18ba      	adds	r2, r7, r2
 80052da:	7812      	ldrb	r2, [r2, #0]
 80052dc:	2102      	movs	r1, #2
 80052de:	438a      	bics	r2, r1
 80052e0:	701a      	strb	r2, [r3, #0]
    }
    hal_nrf_write_reg(CONFIG, config);
 80052e2:	230f      	movs	r3, #15
 80052e4:	18fb      	adds	r3, r7, r3
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	0019      	movs	r1, r3
 80052ea:	2000      	movs	r0, #0
 80052ec:	f7ff fbee 	bl	8004acc <hal_nrf_write_reg>
}
 80052f0:	46c0      	nop			; (mov r8, r8)
 80052f2:	46bd      	mov	sp, r7
 80052f4:	b004      	add	sp, #16
 80052f6:	bdb0      	pop	{r4, r5, r7, pc}

080052f8 <hal_nrf_rx_fifo_empty>:
    return (hal_nrf_read_reg(FIFO_STATUS) &
        (uint8_t)(_BIT(RX_FULL)|_BIT(RX_EMPTY)));
}

uint8_t hal_nrf_rx_fifo_empty(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
    return (uint8_t)((hal_nrf_read_reg(FIFO_STATUS) >> RX_EMPTY) & 0x01);
 80052fc:	2017      	movs	r0, #23
 80052fe:	f7ff fb17 	bl	8004930 <hal_nrf_read_reg>
 8005302:	0003      	movs	r3, r0
 8005304:	001a      	movs	r2, r3
 8005306:	2301      	movs	r3, #1
 8005308:	4013      	ands	r3, r2
 800530a:	b2db      	uxtb	r3, r3
}
 800530c:	0018      	movs	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <hal_nrf_read_rx_payload_width>:
{
    return (uint8_t)(hal_nrf_read_reg(CD) & 0x01);
}

uint8_t hal_nrf_read_rx_payload_width(void)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	af00      	add	r7, sp, #0
    return hal_nrf_read_reg(R_RX_PL_WID);
 8005316:	2060      	movs	r0, #96	; 0x60
 8005318:	f7ff fb0a 	bl	8004930 <hal_nrf_read_reg>
 800531c:	0003      	movs	r3, r0
}
 800531e:	0018      	movs	r0, r3
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <hal_nrf_read_rx_payload>:

uint16_t hal_nrf_read_rx_payload(uint8_t *rx_pload)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
    return hal_nrf_read_multibyte_reg((uint8_t)HAL_NRF_RX_PLOAD, rx_pload, 0);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	0019      	movs	r1, r3
 8005332:	2008      	movs	r0, #8
 8005334:	f7ff fb2e 	bl	8004994 <hal_nrf_read_multibyte_reg>
 8005338:	0003      	movs	r3, r0
}
 800533a:	0018      	movs	r0, r3
 800533c:	46bd      	mov	sp, r7
 800533e:	b002      	add	sp, #8
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <__errno>:
 8005344:	4b01      	ldr	r3, [pc, #4]	; (800534c <__errno+0x8>)
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	4770      	bx	lr
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	2000000c 	.word	0x2000000c

08005350 <__libc_init_array>:
 8005350:	b570      	push	{r4, r5, r6, lr}
 8005352:	2600      	movs	r6, #0
 8005354:	4d0c      	ldr	r5, [pc, #48]	; (8005388 <__libc_init_array+0x38>)
 8005356:	4c0d      	ldr	r4, [pc, #52]	; (800538c <__libc_init_array+0x3c>)
 8005358:	1b64      	subs	r4, r4, r5
 800535a:	10a4      	asrs	r4, r4, #2
 800535c:	42a6      	cmp	r6, r4
 800535e:	d109      	bne.n	8005374 <__libc_init_array+0x24>
 8005360:	2600      	movs	r6, #0
 8005362:	f000 fc8b 	bl	8005c7c <_init>
 8005366:	4d0a      	ldr	r5, [pc, #40]	; (8005390 <__libc_init_array+0x40>)
 8005368:	4c0a      	ldr	r4, [pc, #40]	; (8005394 <__libc_init_array+0x44>)
 800536a:	1b64      	subs	r4, r4, r5
 800536c:	10a4      	asrs	r4, r4, #2
 800536e:	42a6      	cmp	r6, r4
 8005370:	d105      	bne.n	800537e <__libc_init_array+0x2e>
 8005372:	bd70      	pop	{r4, r5, r6, pc}
 8005374:	00b3      	lsls	r3, r6, #2
 8005376:	58eb      	ldr	r3, [r5, r3]
 8005378:	4798      	blx	r3
 800537a:	3601      	adds	r6, #1
 800537c:	e7ee      	b.n	800535c <__libc_init_array+0xc>
 800537e:	00b3      	lsls	r3, r6, #2
 8005380:	58eb      	ldr	r3, [r5, r3]
 8005382:	4798      	blx	r3
 8005384:	3601      	adds	r6, #1
 8005386:	e7f2      	b.n	800536e <__libc_init_array+0x1e>
 8005388:	08005d9c 	.word	0x08005d9c
 800538c:	08005d9c 	.word	0x08005d9c
 8005390:	08005d9c 	.word	0x08005d9c
 8005394:	08005da0 	.word	0x08005da0

08005398 <memcpy>:
 8005398:	2300      	movs	r3, #0
 800539a:	b510      	push	{r4, lr}
 800539c:	429a      	cmp	r2, r3
 800539e:	d100      	bne.n	80053a2 <memcpy+0xa>
 80053a0:	bd10      	pop	{r4, pc}
 80053a2:	5ccc      	ldrb	r4, [r1, r3]
 80053a4:	54c4      	strb	r4, [r0, r3]
 80053a6:	3301      	adds	r3, #1
 80053a8:	e7f8      	b.n	800539c <memcpy+0x4>

080053aa <memset>:
 80053aa:	0003      	movs	r3, r0
 80053ac:	1882      	adds	r2, r0, r2
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d100      	bne.n	80053b4 <memset+0xa>
 80053b2:	4770      	bx	lr
 80053b4:	7019      	strb	r1, [r3, #0]
 80053b6:	3301      	adds	r3, #1
 80053b8:	e7f9      	b.n	80053ae <memset+0x4>
	...

080053bc <siprintf>:
 80053bc:	b40e      	push	{r1, r2, r3}
 80053be:	b500      	push	{lr}
 80053c0:	490b      	ldr	r1, [pc, #44]	; (80053f0 <siprintf+0x34>)
 80053c2:	b09c      	sub	sp, #112	; 0x70
 80053c4:	ab1d      	add	r3, sp, #116	; 0x74
 80053c6:	9002      	str	r0, [sp, #8]
 80053c8:	9006      	str	r0, [sp, #24]
 80053ca:	9107      	str	r1, [sp, #28]
 80053cc:	9104      	str	r1, [sp, #16]
 80053ce:	4809      	ldr	r0, [pc, #36]	; (80053f4 <siprintf+0x38>)
 80053d0:	4909      	ldr	r1, [pc, #36]	; (80053f8 <siprintf+0x3c>)
 80053d2:	cb04      	ldmia	r3!, {r2}
 80053d4:	9105      	str	r1, [sp, #20]
 80053d6:	6800      	ldr	r0, [r0, #0]
 80053d8:	a902      	add	r1, sp, #8
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	f000 f870 	bl	80054c0 <_svfiprintf_r>
 80053e0:	2300      	movs	r3, #0
 80053e2:	9a02      	ldr	r2, [sp, #8]
 80053e4:	7013      	strb	r3, [r2, #0]
 80053e6:	b01c      	add	sp, #112	; 0x70
 80053e8:	bc08      	pop	{r3}
 80053ea:	b003      	add	sp, #12
 80053ec:	4718      	bx	r3
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	7fffffff 	.word	0x7fffffff
 80053f4:	2000000c 	.word	0x2000000c
 80053f8:	ffff0208 	.word	0xffff0208

080053fc <__ssputs_r>:
 80053fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053fe:	688e      	ldr	r6, [r1, #8]
 8005400:	b085      	sub	sp, #20
 8005402:	0007      	movs	r7, r0
 8005404:	000c      	movs	r4, r1
 8005406:	9203      	str	r2, [sp, #12]
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	429e      	cmp	r6, r3
 800540c:	d83c      	bhi.n	8005488 <__ssputs_r+0x8c>
 800540e:	2390      	movs	r3, #144	; 0x90
 8005410:	898a      	ldrh	r2, [r1, #12]
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	421a      	tst	r2, r3
 8005416:	d034      	beq.n	8005482 <__ssputs_r+0x86>
 8005418:	6909      	ldr	r1, [r1, #16]
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	6960      	ldr	r0, [r4, #20]
 800541e:	1a5b      	subs	r3, r3, r1
 8005420:	9302      	str	r3, [sp, #8]
 8005422:	2303      	movs	r3, #3
 8005424:	4343      	muls	r3, r0
 8005426:	0fdd      	lsrs	r5, r3, #31
 8005428:	18ed      	adds	r5, r5, r3
 800542a:	9b01      	ldr	r3, [sp, #4]
 800542c:	9802      	ldr	r0, [sp, #8]
 800542e:	3301      	adds	r3, #1
 8005430:	181b      	adds	r3, r3, r0
 8005432:	106d      	asrs	r5, r5, #1
 8005434:	42ab      	cmp	r3, r5
 8005436:	d900      	bls.n	800543a <__ssputs_r+0x3e>
 8005438:	001d      	movs	r5, r3
 800543a:	0553      	lsls	r3, r2, #21
 800543c:	d532      	bpl.n	80054a4 <__ssputs_r+0xa8>
 800543e:	0029      	movs	r1, r5
 8005440:	0038      	movs	r0, r7
 8005442:	f000 fb49 	bl	8005ad8 <_malloc_r>
 8005446:	1e06      	subs	r6, r0, #0
 8005448:	d109      	bne.n	800545e <__ssputs_r+0x62>
 800544a:	230c      	movs	r3, #12
 800544c:	603b      	str	r3, [r7, #0]
 800544e:	2340      	movs	r3, #64	; 0x40
 8005450:	2001      	movs	r0, #1
 8005452:	89a2      	ldrh	r2, [r4, #12]
 8005454:	4240      	negs	r0, r0
 8005456:	4313      	orrs	r3, r2
 8005458:	81a3      	strh	r3, [r4, #12]
 800545a:	b005      	add	sp, #20
 800545c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800545e:	9a02      	ldr	r2, [sp, #8]
 8005460:	6921      	ldr	r1, [r4, #16]
 8005462:	f7ff ff99 	bl	8005398 <memcpy>
 8005466:	89a3      	ldrh	r3, [r4, #12]
 8005468:	4a14      	ldr	r2, [pc, #80]	; (80054bc <__ssputs_r+0xc0>)
 800546a:	401a      	ands	r2, r3
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	4313      	orrs	r3, r2
 8005470:	81a3      	strh	r3, [r4, #12]
 8005472:	9b02      	ldr	r3, [sp, #8]
 8005474:	6126      	str	r6, [r4, #16]
 8005476:	18f6      	adds	r6, r6, r3
 8005478:	6026      	str	r6, [r4, #0]
 800547a:	6165      	str	r5, [r4, #20]
 800547c:	9e01      	ldr	r6, [sp, #4]
 800547e:	1aed      	subs	r5, r5, r3
 8005480:	60a5      	str	r5, [r4, #8]
 8005482:	9b01      	ldr	r3, [sp, #4]
 8005484:	429e      	cmp	r6, r3
 8005486:	d900      	bls.n	800548a <__ssputs_r+0x8e>
 8005488:	9e01      	ldr	r6, [sp, #4]
 800548a:	0032      	movs	r2, r6
 800548c:	9903      	ldr	r1, [sp, #12]
 800548e:	6820      	ldr	r0, [r4, #0]
 8005490:	f000 faa3 	bl	80059da <memmove>
 8005494:	68a3      	ldr	r3, [r4, #8]
 8005496:	2000      	movs	r0, #0
 8005498:	1b9b      	subs	r3, r3, r6
 800549a:	60a3      	str	r3, [r4, #8]
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	199e      	adds	r6, r3, r6
 80054a0:	6026      	str	r6, [r4, #0]
 80054a2:	e7da      	b.n	800545a <__ssputs_r+0x5e>
 80054a4:	002a      	movs	r2, r5
 80054a6:	0038      	movs	r0, r7
 80054a8:	f000 fb8c 	bl	8005bc4 <_realloc_r>
 80054ac:	1e06      	subs	r6, r0, #0
 80054ae:	d1e0      	bne.n	8005472 <__ssputs_r+0x76>
 80054b0:	0038      	movs	r0, r7
 80054b2:	6921      	ldr	r1, [r4, #16]
 80054b4:	f000 faa4 	bl	8005a00 <_free_r>
 80054b8:	e7c7      	b.n	800544a <__ssputs_r+0x4e>
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	fffffb7f 	.word	0xfffffb7f

080054c0 <_svfiprintf_r>:
 80054c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054c2:	b0a1      	sub	sp, #132	; 0x84
 80054c4:	9003      	str	r0, [sp, #12]
 80054c6:	001d      	movs	r5, r3
 80054c8:	898b      	ldrh	r3, [r1, #12]
 80054ca:	000f      	movs	r7, r1
 80054cc:	0016      	movs	r6, r2
 80054ce:	061b      	lsls	r3, r3, #24
 80054d0:	d511      	bpl.n	80054f6 <_svfiprintf_r+0x36>
 80054d2:	690b      	ldr	r3, [r1, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10e      	bne.n	80054f6 <_svfiprintf_r+0x36>
 80054d8:	2140      	movs	r1, #64	; 0x40
 80054da:	f000 fafd 	bl	8005ad8 <_malloc_r>
 80054de:	6038      	str	r0, [r7, #0]
 80054e0:	6138      	str	r0, [r7, #16]
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d105      	bne.n	80054f2 <_svfiprintf_r+0x32>
 80054e6:	230c      	movs	r3, #12
 80054e8:	9a03      	ldr	r2, [sp, #12]
 80054ea:	3801      	subs	r0, #1
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	b021      	add	sp, #132	; 0x84
 80054f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054f2:	2340      	movs	r3, #64	; 0x40
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	2300      	movs	r3, #0
 80054f8:	ac08      	add	r4, sp, #32
 80054fa:	6163      	str	r3, [r4, #20]
 80054fc:	3320      	adds	r3, #32
 80054fe:	7663      	strb	r3, [r4, #25]
 8005500:	3310      	adds	r3, #16
 8005502:	76a3      	strb	r3, [r4, #26]
 8005504:	9507      	str	r5, [sp, #28]
 8005506:	0035      	movs	r5, r6
 8005508:	782b      	ldrb	r3, [r5, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <_svfiprintf_r+0x52>
 800550e:	2b25      	cmp	r3, #37	; 0x25
 8005510:	d147      	bne.n	80055a2 <_svfiprintf_r+0xe2>
 8005512:	1bab      	subs	r3, r5, r6
 8005514:	9305      	str	r3, [sp, #20]
 8005516:	42b5      	cmp	r5, r6
 8005518:	d00c      	beq.n	8005534 <_svfiprintf_r+0x74>
 800551a:	0032      	movs	r2, r6
 800551c:	0039      	movs	r1, r7
 800551e:	9803      	ldr	r0, [sp, #12]
 8005520:	f7ff ff6c 	bl	80053fc <__ssputs_r>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d100      	bne.n	800552a <_svfiprintf_r+0x6a>
 8005528:	e0ae      	b.n	8005688 <_svfiprintf_r+0x1c8>
 800552a:	6962      	ldr	r2, [r4, #20]
 800552c:	9b05      	ldr	r3, [sp, #20]
 800552e:	4694      	mov	ip, r2
 8005530:	4463      	add	r3, ip
 8005532:	6163      	str	r3, [r4, #20]
 8005534:	782b      	ldrb	r3, [r5, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d100      	bne.n	800553c <_svfiprintf_r+0x7c>
 800553a:	e0a5      	b.n	8005688 <_svfiprintf_r+0x1c8>
 800553c:	2201      	movs	r2, #1
 800553e:	2300      	movs	r3, #0
 8005540:	4252      	negs	r2, r2
 8005542:	6062      	str	r2, [r4, #4]
 8005544:	a904      	add	r1, sp, #16
 8005546:	3254      	adds	r2, #84	; 0x54
 8005548:	1852      	adds	r2, r2, r1
 800554a:	1c6e      	adds	r6, r5, #1
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	60e3      	str	r3, [r4, #12]
 8005550:	60a3      	str	r3, [r4, #8]
 8005552:	7013      	strb	r3, [r2, #0]
 8005554:	65a3      	str	r3, [r4, #88]	; 0x58
 8005556:	2205      	movs	r2, #5
 8005558:	7831      	ldrb	r1, [r6, #0]
 800555a:	4854      	ldr	r0, [pc, #336]	; (80056ac <_svfiprintf_r+0x1ec>)
 800555c:	f000 fa32 	bl	80059c4 <memchr>
 8005560:	1c75      	adds	r5, r6, #1
 8005562:	2800      	cmp	r0, #0
 8005564:	d11f      	bne.n	80055a6 <_svfiprintf_r+0xe6>
 8005566:	6822      	ldr	r2, [r4, #0]
 8005568:	06d3      	lsls	r3, r2, #27
 800556a:	d504      	bpl.n	8005576 <_svfiprintf_r+0xb6>
 800556c:	2353      	movs	r3, #83	; 0x53
 800556e:	a904      	add	r1, sp, #16
 8005570:	185b      	adds	r3, r3, r1
 8005572:	2120      	movs	r1, #32
 8005574:	7019      	strb	r1, [r3, #0]
 8005576:	0713      	lsls	r3, r2, #28
 8005578:	d504      	bpl.n	8005584 <_svfiprintf_r+0xc4>
 800557a:	2353      	movs	r3, #83	; 0x53
 800557c:	a904      	add	r1, sp, #16
 800557e:	185b      	adds	r3, r3, r1
 8005580:	212b      	movs	r1, #43	; 0x2b
 8005582:	7019      	strb	r1, [r3, #0]
 8005584:	7833      	ldrb	r3, [r6, #0]
 8005586:	2b2a      	cmp	r3, #42	; 0x2a
 8005588:	d016      	beq.n	80055b8 <_svfiprintf_r+0xf8>
 800558a:	0035      	movs	r5, r6
 800558c:	2100      	movs	r1, #0
 800558e:	200a      	movs	r0, #10
 8005590:	68e3      	ldr	r3, [r4, #12]
 8005592:	782a      	ldrb	r2, [r5, #0]
 8005594:	1c6e      	adds	r6, r5, #1
 8005596:	3a30      	subs	r2, #48	; 0x30
 8005598:	2a09      	cmp	r2, #9
 800559a:	d94e      	bls.n	800563a <_svfiprintf_r+0x17a>
 800559c:	2900      	cmp	r1, #0
 800559e:	d111      	bne.n	80055c4 <_svfiprintf_r+0x104>
 80055a0:	e017      	b.n	80055d2 <_svfiprintf_r+0x112>
 80055a2:	3501      	adds	r5, #1
 80055a4:	e7b0      	b.n	8005508 <_svfiprintf_r+0x48>
 80055a6:	4b41      	ldr	r3, [pc, #260]	; (80056ac <_svfiprintf_r+0x1ec>)
 80055a8:	6822      	ldr	r2, [r4, #0]
 80055aa:	1ac0      	subs	r0, r0, r3
 80055ac:	2301      	movs	r3, #1
 80055ae:	4083      	lsls	r3, r0
 80055b0:	4313      	orrs	r3, r2
 80055b2:	002e      	movs	r6, r5
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	e7ce      	b.n	8005556 <_svfiprintf_r+0x96>
 80055b8:	9b07      	ldr	r3, [sp, #28]
 80055ba:	1d19      	adds	r1, r3, #4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	9107      	str	r1, [sp, #28]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	db01      	blt.n	80055c8 <_svfiprintf_r+0x108>
 80055c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80055c6:	e004      	b.n	80055d2 <_svfiprintf_r+0x112>
 80055c8:	425b      	negs	r3, r3
 80055ca:	60e3      	str	r3, [r4, #12]
 80055cc:	2302      	movs	r3, #2
 80055ce:	4313      	orrs	r3, r2
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	782b      	ldrb	r3, [r5, #0]
 80055d4:	2b2e      	cmp	r3, #46	; 0x2e
 80055d6:	d10a      	bne.n	80055ee <_svfiprintf_r+0x12e>
 80055d8:	786b      	ldrb	r3, [r5, #1]
 80055da:	2b2a      	cmp	r3, #42	; 0x2a
 80055dc:	d135      	bne.n	800564a <_svfiprintf_r+0x18a>
 80055de:	9b07      	ldr	r3, [sp, #28]
 80055e0:	3502      	adds	r5, #2
 80055e2:	1d1a      	adds	r2, r3, #4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	9207      	str	r2, [sp, #28]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	db2b      	blt.n	8005644 <_svfiprintf_r+0x184>
 80055ec:	9309      	str	r3, [sp, #36]	; 0x24
 80055ee:	4e30      	ldr	r6, [pc, #192]	; (80056b0 <_svfiprintf_r+0x1f0>)
 80055f0:	2203      	movs	r2, #3
 80055f2:	0030      	movs	r0, r6
 80055f4:	7829      	ldrb	r1, [r5, #0]
 80055f6:	f000 f9e5 	bl	80059c4 <memchr>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d006      	beq.n	800560c <_svfiprintf_r+0x14c>
 80055fe:	2340      	movs	r3, #64	; 0x40
 8005600:	1b80      	subs	r0, r0, r6
 8005602:	4083      	lsls	r3, r0
 8005604:	6822      	ldr	r2, [r4, #0]
 8005606:	3501      	adds	r5, #1
 8005608:	4313      	orrs	r3, r2
 800560a:	6023      	str	r3, [r4, #0]
 800560c:	7829      	ldrb	r1, [r5, #0]
 800560e:	2206      	movs	r2, #6
 8005610:	4828      	ldr	r0, [pc, #160]	; (80056b4 <_svfiprintf_r+0x1f4>)
 8005612:	1c6e      	adds	r6, r5, #1
 8005614:	7621      	strb	r1, [r4, #24]
 8005616:	f000 f9d5 	bl	80059c4 <memchr>
 800561a:	2800      	cmp	r0, #0
 800561c:	d03c      	beq.n	8005698 <_svfiprintf_r+0x1d8>
 800561e:	4b26      	ldr	r3, [pc, #152]	; (80056b8 <_svfiprintf_r+0x1f8>)
 8005620:	2b00      	cmp	r3, #0
 8005622:	d125      	bne.n	8005670 <_svfiprintf_r+0x1b0>
 8005624:	2207      	movs	r2, #7
 8005626:	9b07      	ldr	r3, [sp, #28]
 8005628:	3307      	adds	r3, #7
 800562a:	4393      	bics	r3, r2
 800562c:	3308      	adds	r3, #8
 800562e:	9307      	str	r3, [sp, #28]
 8005630:	6963      	ldr	r3, [r4, #20]
 8005632:	9a04      	ldr	r2, [sp, #16]
 8005634:	189b      	adds	r3, r3, r2
 8005636:	6163      	str	r3, [r4, #20]
 8005638:	e765      	b.n	8005506 <_svfiprintf_r+0x46>
 800563a:	4343      	muls	r3, r0
 800563c:	0035      	movs	r5, r6
 800563e:	2101      	movs	r1, #1
 8005640:	189b      	adds	r3, r3, r2
 8005642:	e7a6      	b.n	8005592 <_svfiprintf_r+0xd2>
 8005644:	2301      	movs	r3, #1
 8005646:	425b      	negs	r3, r3
 8005648:	e7d0      	b.n	80055ec <_svfiprintf_r+0x12c>
 800564a:	2300      	movs	r3, #0
 800564c:	200a      	movs	r0, #10
 800564e:	001a      	movs	r2, r3
 8005650:	3501      	adds	r5, #1
 8005652:	6063      	str	r3, [r4, #4]
 8005654:	7829      	ldrb	r1, [r5, #0]
 8005656:	1c6e      	adds	r6, r5, #1
 8005658:	3930      	subs	r1, #48	; 0x30
 800565a:	2909      	cmp	r1, #9
 800565c:	d903      	bls.n	8005666 <_svfiprintf_r+0x1a6>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0c5      	beq.n	80055ee <_svfiprintf_r+0x12e>
 8005662:	9209      	str	r2, [sp, #36]	; 0x24
 8005664:	e7c3      	b.n	80055ee <_svfiprintf_r+0x12e>
 8005666:	4342      	muls	r2, r0
 8005668:	0035      	movs	r5, r6
 800566a:	2301      	movs	r3, #1
 800566c:	1852      	adds	r2, r2, r1
 800566e:	e7f1      	b.n	8005654 <_svfiprintf_r+0x194>
 8005670:	ab07      	add	r3, sp, #28
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	003a      	movs	r2, r7
 8005676:	0021      	movs	r1, r4
 8005678:	4b10      	ldr	r3, [pc, #64]	; (80056bc <_svfiprintf_r+0x1fc>)
 800567a:	9803      	ldr	r0, [sp, #12]
 800567c:	e000      	b.n	8005680 <_svfiprintf_r+0x1c0>
 800567e:	bf00      	nop
 8005680:	9004      	str	r0, [sp, #16]
 8005682:	9b04      	ldr	r3, [sp, #16]
 8005684:	3301      	adds	r3, #1
 8005686:	d1d3      	bne.n	8005630 <_svfiprintf_r+0x170>
 8005688:	89bb      	ldrh	r3, [r7, #12]
 800568a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800568c:	065b      	lsls	r3, r3, #25
 800568e:	d400      	bmi.n	8005692 <_svfiprintf_r+0x1d2>
 8005690:	e72d      	b.n	80054ee <_svfiprintf_r+0x2e>
 8005692:	2001      	movs	r0, #1
 8005694:	4240      	negs	r0, r0
 8005696:	e72a      	b.n	80054ee <_svfiprintf_r+0x2e>
 8005698:	ab07      	add	r3, sp, #28
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	003a      	movs	r2, r7
 800569e:	0021      	movs	r1, r4
 80056a0:	4b06      	ldr	r3, [pc, #24]	; (80056bc <_svfiprintf_r+0x1fc>)
 80056a2:	9803      	ldr	r0, [sp, #12]
 80056a4:	f000 f87c 	bl	80057a0 <_printf_i>
 80056a8:	e7ea      	b.n	8005680 <_svfiprintf_r+0x1c0>
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	08005d60 	.word	0x08005d60
 80056b0:	08005d66 	.word	0x08005d66
 80056b4:	08005d6a 	.word	0x08005d6a
 80056b8:	00000000 	.word	0x00000000
 80056bc:	080053fd 	.word	0x080053fd

080056c0 <_printf_common>:
 80056c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056c2:	0015      	movs	r5, r2
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	688a      	ldr	r2, [r1, #8]
 80056c8:	690b      	ldr	r3, [r1, #16]
 80056ca:	000c      	movs	r4, r1
 80056cc:	9000      	str	r0, [sp, #0]
 80056ce:	4293      	cmp	r3, r2
 80056d0:	da00      	bge.n	80056d4 <_printf_common+0x14>
 80056d2:	0013      	movs	r3, r2
 80056d4:	0022      	movs	r2, r4
 80056d6:	602b      	str	r3, [r5, #0]
 80056d8:	3243      	adds	r2, #67	; 0x43
 80056da:	7812      	ldrb	r2, [r2, #0]
 80056dc:	2a00      	cmp	r2, #0
 80056de:	d001      	beq.n	80056e4 <_printf_common+0x24>
 80056e0:	3301      	adds	r3, #1
 80056e2:	602b      	str	r3, [r5, #0]
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	069b      	lsls	r3, r3, #26
 80056e8:	d502      	bpl.n	80056f0 <_printf_common+0x30>
 80056ea:	682b      	ldr	r3, [r5, #0]
 80056ec:	3302      	adds	r3, #2
 80056ee:	602b      	str	r3, [r5, #0]
 80056f0:	6822      	ldr	r2, [r4, #0]
 80056f2:	2306      	movs	r3, #6
 80056f4:	0017      	movs	r7, r2
 80056f6:	401f      	ands	r7, r3
 80056f8:	421a      	tst	r2, r3
 80056fa:	d027      	beq.n	800574c <_printf_common+0x8c>
 80056fc:	0023      	movs	r3, r4
 80056fe:	3343      	adds	r3, #67	; 0x43
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	1e5a      	subs	r2, r3, #1
 8005704:	4193      	sbcs	r3, r2
 8005706:	6822      	ldr	r2, [r4, #0]
 8005708:	0692      	lsls	r2, r2, #26
 800570a:	d430      	bmi.n	800576e <_printf_common+0xae>
 800570c:	0022      	movs	r2, r4
 800570e:	9901      	ldr	r1, [sp, #4]
 8005710:	9800      	ldr	r0, [sp, #0]
 8005712:	9e08      	ldr	r6, [sp, #32]
 8005714:	3243      	adds	r2, #67	; 0x43
 8005716:	47b0      	blx	r6
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d025      	beq.n	8005768 <_printf_common+0xa8>
 800571c:	2306      	movs	r3, #6
 800571e:	6820      	ldr	r0, [r4, #0]
 8005720:	682a      	ldr	r2, [r5, #0]
 8005722:	68e1      	ldr	r1, [r4, #12]
 8005724:	2500      	movs	r5, #0
 8005726:	4003      	ands	r3, r0
 8005728:	2b04      	cmp	r3, #4
 800572a:	d103      	bne.n	8005734 <_printf_common+0x74>
 800572c:	1a8d      	subs	r5, r1, r2
 800572e:	43eb      	mvns	r3, r5
 8005730:	17db      	asrs	r3, r3, #31
 8005732:	401d      	ands	r5, r3
 8005734:	68a3      	ldr	r3, [r4, #8]
 8005736:	6922      	ldr	r2, [r4, #16]
 8005738:	4293      	cmp	r3, r2
 800573a:	dd01      	ble.n	8005740 <_printf_common+0x80>
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	18ed      	adds	r5, r5, r3
 8005740:	2700      	movs	r7, #0
 8005742:	42bd      	cmp	r5, r7
 8005744:	d120      	bne.n	8005788 <_printf_common+0xc8>
 8005746:	2000      	movs	r0, #0
 8005748:	e010      	b.n	800576c <_printf_common+0xac>
 800574a:	3701      	adds	r7, #1
 800574c:	68e3      	ldr	r3, [r4, #12]
 800574e:	682a      	ldr	r2, [r5, #0]
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	42bb      	cmp	r3, r7
 8005754:	ddd2      	ble.n	80056fc <_printf_common+0x3c>
 8005756:	0022      	movs	r2, r4
 8005758:	2301      	movs	r3, #1
 800575a:	9901      	ldr	r1, [sp, #4]
 800575c:	9800      	ldr	r0, [sp, #0]
 800575e:	9e08      	ldr	r6, [sp, #32]
 8005760:	3219      	adds	r2, #25
 8005762:	47b0      	blx	r6
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d1f0      	bne.n	800574a <_printf_common+0x8a>
 8005768:	2001      	movs	r0, #1
 800576a:	4240      	negs	r0, r0
 800576c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800576e:	2030      	movs	r0, #48	; 0x30
 8005770:	18e1      	adds	r1, r4, r3
 8005772:	3143      	adds	r1, #67	; 0x43
 8005774:	7008      	strb	r0, [r1, #0]
 8005776:	0021      	movs	r1, r4
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	3145      	adds	r1, #69	; 0x45
 800577c:	7809      	ldrb	r1, [r1, #0]
 800577e:	18a2      	adds	r2, r4, r2
 8005780:	3243      	adds	r2, #67	; 0x43
 8005782:	3302      	adds	r3, #2
 8005784:	7011      	strb	r1, [r2, #0]
 8005786:	e7c1      	b.n	800570c <_printf_common+0x4c>
 8005788:	0022      	movs	r2, r4
 800578a:	2301      	movs	r3, #1
 800578c:	9901      	ldr	r1, [sp, #4]
 800578e:	9800      	ldr	r0, [sp, #0]
 8005790:	9e08      	ldr	r6, [sp, #32]
 8005792:	321a      	adds	r2, #26
 8005794:	47b0      	blx	r6
 8005796:	1c43      	adds	r3, r0, #1
 8005798:	d0e6      	beq.n	8005768 <_printf_common+0xa8>
 800579a:	3701      	adds	r7, #1
 800579c:	e7d1      	b.n	8005742 <_printf_common+0x82>
	...

080057a0 <_printf_i>:
 80057a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057a2:	b08b      	sub	sp, #44	; 0x2c
 80057a4:	9206      	str	r2, [sp, #24]
 80057a6:	000a      	movs	r2, r1
 80057a8:	3243      	adds	r2, #67	; 0x43
 80057aa:	9307      	str	r3, [sp, #28]
 80057ac:	9005      	str	r0, [sp, #20]
 80057ae:	9204      	str	r2, [sp, #16]
 80057b0:	7e0a      	ldrb	r2, [r1, #24]
 80057b2:	000c      	movs	r4, r1
 80057b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057b6:	2a78      	cmp	r2, #120	; 0x78
 80057b8:	d807      	bhi.n	80057ca <_printf_i+0x2a>
 80057ba:	2a62      	cmp	r2, #98	; 0x62
 80057bc:	d809      	bhi.n	80057d2 <_printf_i+0x32>
 80057be:	2a00      	cmp	r2, #0
 80057c0:	d100      	bne.n	80057c4 <_printf_i+0x24>
 80057c2:	e0c1      	b.n	8005948 <_printf_i+0x1a8>
 80057c4:	2a58      	cmp	r2, #88	; 0x58
 80057c6:	d100      	bne.n	80057ca <_printf_i+0x2a>
 80057c8:	e08c      	b.n	80058e4 <_printf_i+0x144>
 80057ca:	0026      	movs	r6, r4
 80057cc:	3642      	adds	r6, #66	; 0x42
 80057ce:	7032      	strb	r2, [r6, #0]
 80057d0:	e022      	b.n	8005818 <_printf_i+0x78>
 80057d2:	0010      	movs	r0, r2
 80057d4:	3863      	subs	r0, #99	; 0x63
 80057d6:	2815      	cmp	r0, #21
 80057d8:	d8f7      	bhi.n	80057ca <_printf_i+0x2a>
 80057da:	f7fa fc95 	bl	8000108 <__gnu_thumb1_case_shi>
 80057de:	0016      	.short	0x0016
 80057e0:	fff6001f 	.word	0xfff6001f
 80057e4:	fff6fff6 	.word	0xfff6fff6
 80057e8:	001ffff6 	.word	0x001ffff6
 80057ec:	fff6fff6 	.word	0xfff6fff6
 80057f0:	fff6fff6 	.word	0xfff6fff6
 80057f4:	003600a8 	.word	0x003600a8
 80057f8:	fff6009a 	.word	0xfff6009a
 80057fc:	00b9fff6 	.word	0x00b9fff6
 8005800:	0036fff6 	.word	0x0036fff6
 8005804:	fff6fff6 	.word	0xfff6fff6
 8005808:	009e      	.short	0x009e
 800580a:	0026      	movs	r6, r4
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	3642      	adds	r6, #66	; 0x42
 8005810:	1d11      	adds	r1, r2, #4
 8005812:	6019      	str	r1, [r3, #0]
 8005814:	6813      	ldr	r3, [r2, #0]
 8005816:	7033      	strb	r3, [r6, #0]
 8005818:	2301      	movs	r3, #1
 800581a:	e0a7      	b.n	800596c <_printf_i+0x1cc>
 800581c:	6808      	ldr	r0, [r1, #0]
 800581e:	6819      	ldr	r1, [r3, #0]
 8005820:	1d0a      	adds	r2, r1, #4
 8005822:	0605      	lsls	r5, r0, #24
 8005824:	d50b      	bpl.n	800583e <_printf_i+0x9e>
 8005826:	680d      	ldr	r5, [r1, #0]
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	2d00      	cmp	r5, #0
 800582c:	da03      	bge.n	8005836 <_printf_i+0x96>
 800582e:	232d      	movs	r3, #45	; 0x2d
 8005830:	9a04      	ldr	r2, [sp, #16]
 8005832:	426d      	negs	r5, r5
 8005834:	7013      	strb	r3, [r2, #0]
 8005836:	4b61      	ldr	r3, [pc, #388]	; (80059bc <_printf_i+0x21c>)
 8005838:	270a      	movs	r7, #10
 800583a:	9303      	str	r3, [sp, #12]
 800583c:	e01b      	b.n	8005876 <_printf_i+0xd6>
 800583e:	680d      	ldr	r5, [r1, #0]
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	0641      	lsls	r1, r0, #25
 8005844:	d5f1      	bpl.n	800582a <_printf_i+0x8a>
 8005846:	b22d      	sxth	r5, r5
 8005848:	e7ef      	b.n	800582a <_printf_i+0x8a>
 800584a:	680d      	ldr	r5, [r1, #0]
 800584c:	6819      	ldr	r1, [r3, #0]
 800584e:	1d08      	adds	r0, r1, #4
 8005850:	6018      	str	r0, [r3, #0]
 8005852:	062e      	lsls	r6, r5, #24
 8005854:	d501      	bpl.n	800585a <_printf_i+0xba>
 8005856:	680d      	ldr	r5, [r1, #0]
 8005858:	e003      	b.n	8005862 <_printf_i+0xc2>
 800585a:	066d      	lsls	r5, r5, #25
 800585c:	d5fb      	bpl.n	8005856 <_printf_i+0xb6>
 800585e:	680d      	ldr	r5, [r1, #0]
 8005860:	b2ad      	uxth	r5, r5
 8005862:	4b56      	ldr	r3, [pc, #344]	; (80059bc <_printf_i+0x21c>)
 8005864:	2708      	movs	r7, #8
 8005866:	9303      	str	r3, [sp, #12]
 8005868:	2a6f      	cmp	r2, #111	; 0x6f
 800586a:	d000      	beq.n	800586e <_printf_i+0xce>
 800586c:	3702      	adds	r7, #2
 800586e:	0023      	movs	r3, r4
 8005870:	2200      	movs	r2, #0
 8005872:	3343      	adds	r3, #67	; 0x43
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	6863      	ldr	r3, [r4, #4]
 8005878:	60a3      	str	r3, [r4, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	db03      	blt.n	8005886 <_printf_i+0xe6>
 800587e:	2204      	movs	r2, #4
 8005880:	6821      	ldr	r1, [r4, #0]
 8005882:	4391      	bics	r1, r2
 8005884:	6021      	str	r1, [r4, #0]
 8005886:	2d00      	cmp	r5, #0
 8005888:	d102      	bne.n	8005890 <_printf_i+0xf0>
 800588a:	9e04      	ldr	r6, [sp, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00c      	beq.n	80058aa <_printf_i+0x10a>
 8005890:	9e04      	ldr	r6, [sp, #16]
 8005892:	0028      	movs	r0, r5
 8005894:	0039      	movs	r1, r7
 8005896:	f7fa fcc7 	bl	8000228 <__aeabi_uidivmod>
 800589a:	9b03      	ldr	r3, [sp, #12]
 800589c:	3e01      	subs	r6, #1
 800589e:	5c5b      	ldrb	r3, [r3, r1]
 80058a0:	7033      	strb	r3, [r6, #0]
 80058a2:	002b      	movs	r3, r5
 80058a4:	0005      	movs	r5, r0
 80058a6:	429f      	cmp	r7, r3
 80058a8:	d9f3      	bls.n	8005892 <_printf_i+0xf2>
 80058aa:	2f08      	cmp	r7, #8
 80058ac:	d109      	bne.n	80058c2 <_printf_i+0x122>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	07db      	lsls	r3, r3, #31
 80058b2:	d506      	bpl.n	80058c2 <_printf_i+0x122>
 80058b4:	6863      	ldr	r3, [r4, #4]
 80058b6:	6922      	ldr	r2, [r4, #16]
 80058b8:	4293      	cmp	r3, r2
 80058ba:	dc02      	bgt.n	80058c2 <_printf_i+0x122>
 80058bc:	2330      	movs	r3, #48	; 0x30
 80058be:	3e01      	subs	r6, #1
 80058c0:	7033      	strb	r3, [r6, #0]
 80058c2:	9b04      	ldr	r3, [sp, #16]
 80058c4:	1b9b      	subs	r3, r3, r6
 80058c6:	6123      	str	r3, [r4, #16]
 80058c8:	9b07      	ldr	r3, [sp, #28]
 80058ca:	0021      	movs	r1, r4
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	9805      	ldr	r0, [sp, #20]
 80058d0:	9b06      	ldr	r3, [sp, #24]
 80058d2:	aa09      	add	r2, sp, #36	; 0x24
 80058d4:	f7ff fef4 	bl	80056c0 <_printf_common>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d14c      	bne.n	8005976 <_printf_i+0x1d6>
 80058dc:	2001      	movs	r0, #1
 80058de:	4240      	negs	r0, r0
 80058e0:	b00b      	add	sp, #44	; 0x2c
 80058e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e4:	3145      	adds	r1, #69	; 0x45
 80058e6:	700a      	strb	r2, [r1, #0]
 80058e8:	4a34      	ldr	r2, [pc, #208]	; (80059bc <_printf_i+0x21c>)
 80058ea:	9203      	str	r2, [sp, #12]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	6821      	ldr	r1, [r4, #0]
 80058f0:	ca20      	ldmia	r2!, {r5}
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	0608      	lsls	r0, r1, #24
 80058f6:	d516      	bpl.n	8005926 <_printf_i+0x186>
 80058f8:	07cb      	lsls	r3, r1, #31
 80058fa:	d502      	bpl.n	8005902 <_printf_i+0x162>
 80058fc:	2320      	movs	r3, #32
 80058fe:	4319      	orrs	r1, r3
 8005900:	6021      	str	r1, [r4, #0]
 8005902:	2710      	movs	r7, #16
 8005904:	2d00      	cmp	r5, #0
 8005906:	d1b2      	bne.n	800586e <_printf_i+0xce>
 8005908:	2320      	movs	r3, #32
 800590a:	6822      	ldr	r2, [r4, #0]
 800590c:	439a      	bics	r2, r3
 800590e:	6022      	str	r2, [r4, #0]
 8005910:	e7ad      	b.n	800586e <_printf_i+0xce>
 8005912:	2220      	movs	r2, #32
 8005914:	6809      	ldr	r1, [r1, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	6022      	str	r2, [r4, #0]
 800591a:	0022      	movs	r2, r4
 800591c:	2178      	movs	r1, #120	; 0x78
 800591e:	3245      	adds	r2, #69	; 0x45
 8005920:	7011      	strb	r1, [r2, #0]
 8005922:	4a27      	ldr	r2, [pc, #156]	; (80059c0 <_printf_i+0x220>)
 8005924:	e7e1      	b.n	80058ea <_printf_i+0x14a>
 8005926:	0648      	lsls	r0, r1, #25
 8005928:	d5e6      	bpl.n	80058f8 <_printf_i+0x158>
 800592a:	b2ad      	uxth	r5, r5
 800592c:	e7e4      	b.n	80058f8 <_printf_i+0x158>
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	680d      	ldr	r5, [r1, #0]
 8005932:	1d10      	adds	r0, r2, #4
 8005934:	6949      	ldr	r1, [r1, #20]
 8005936:	6018      	str	r0, [r3, #0]
 8005938:	6813      	ldr	r3, [r2, #0]
 800593a:	062e      	lsls	r6, r5, #24
 800593c:	d501      	bpl.n	8005942 <_printf_i+0x1a2>
 800593e:	6019      	str	r1, [r3, #0]
 8005940:	e002      	b.n	8005948 <_printf_i+0x1a8>
 8005942:	066d      	lsls	r5, r5, #25
 8005944:	d5fb      	bpl.n	800593e <_printf_i+0x19e>
 8005946:	8019      	strh	r1, [r3, #0]
 8005948:	2300      	movs	r3, #0
 800594a:	9e04      	ldr	r6, [sp, #16]
 800594c:	6123      	str	r3, [r4, #16]
 800594e:	e7bb      	b.n	80058c8 <_printf_i+0x128>
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	1d11      	adds	r1, r2, #4
 8005954:	6019      	str	r1, [r3, #0]
 8005956:	6816      	ldr	r6, [r2, #0]
 8005958:	2100      	movs	r1, #0
 800595a:	0030      	movs	r0, r6
 800595c:	6862      	ldr	r2, [r4, #4]
 800595e:	f000 f831 	bl	80059c4 <memchr>
 8005962:	2800      	cmp	r0, #0
 8005964:	d001      	beq.n	800596a <_printf_i+0x1ca>
 8005966:	1b80      	subs	r0, r0, r6
 8005968:	6060      	str	r0, [r4, #4]
 800596a:	6863      	ldr	r3, [r4, #4]
 800596c:	6123      	str	r3, [r4, #16]
 800596e:	2300      	movs	r3, #0
 8005970:	9a04      	ldr	r2, [sp, #16]
 8005972:	7013      	strb	r3, [r2, #0]
 8005974:	e7a8      	b.n	80058c8 <_printf_i+0x128>
 8005976:	6923      	ldr	r3, [r4, #16]
 8005978:	0032      	movs	r2, r6
 800597a:	9906      	ldr	r1, [sp, #24]
 800597c:	9805      	ldr	r0, [sp, #20]
 800597e:	9d07      	ldr	r5, [sp, #28]
 8005980:	47a8      	blx	r5
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	d0aa      	beq.n	80058dc <_printf_i+0x13c>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	079b      	lsls	r3, r3, #30
 800598a:	d415      	bmi.n	80059b8 <_printf_i+0x218>
 800598c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800598e:	68e0      	ldr	r0, [r4, #12]
 8005990:	4298      	cmp	r0, r3
 8005992:	daa5      	bge.n	80058e0 <_printf_i+0x140>
 8005994:	0018      	movs	r0, r3
 8005996:	e7a3      	b.n	80058e0 <_printf_i+0x140>
 8005998:	0022      	movs	r2, r4
 800599a:	2301      	movs	r3, #1
 800599c:	9906      	ldr	r1, [sp, #24]
 800599e:	9805      	ldr	r0, [sp, #20]
 80059a0:	9e07      	ldr	r6, [sp, #28]
 80059a2:	3219      	adds	r2, #25
 80059a4:	47b0      	blx	r6
 80059a6:	1c43      	adds	r3, r0, #1
 80059a8:	d098      	beq.n	80058dc <_printf_i+0x13c>
 80059aa:	3501      	adds	r5, #1
 80059ac:	68e3      	ldr	r3, [r4, #12]
 80059ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059b0:	1a9b      	subs	r3, r3, r2
 80059b2:	42ab      	cmp	r3, r5
 80059b4:	dcf0      	bgt.n	8005998 <_printf_i+0x1f8>
 80059b6:	e7e9      	b.n	800598c <_printf_i+0x1ec>
 80059b8:	2500      	movs	r5, #0
 80059ba:	e7f7      	b.n	80059ac <_printf_i+0x20c>
 80059bc:	08005d71 	.word	0x08005d71
 80059c0:	08005d82 	.word	0x08005d82

080059c4 <memchr>:
 80059c4:	b2c9      	uxtb	r1, r1
 80059c6:	1882      	adds	r2, r0, r2
 80059c8:	4290      	cmp	r0, r2
 80059ca:	d101      	bne.n	80059d0 <memchr+0xc>
 80059cc:	2000      	movs	r0, #0
 80059ce:	4770      	bx	lr
 80059d0:	7803      	ldrb	r3, [r0, #0]
 80059d2:	428b      	cmp	r3, r1
 80059d4:	d0fb      	beq.n	80059ce <memchr+0xa>
 80059d6:	3001      	adds	r0, #1
 80059d8:	e7f6      	b.n	80059c8 <memchr+0x4>

080059da <memmove>:
 80059da:	b510      	push	{r4, lr}
 80059dc:	4288      	cmp	r0, r1
 80059de:	d902      	bls.n	80059e6 <memmove+0xc>
 80059e0:	188b      	adds	r3, r1, r2
 80059e2:	4298      	cmp	r0, r3
 80059e4:	d303      	bcc.n	80059ee <memmove+0x14>
 80059e6:	2300      	movs	r3, #0
 80059e8:	e007      	b.n	80059fa <memmove+0x20>
 80059ea:	5c8b      	ldrb	r3, [r1, r2]
 80059ec:	5483      	strb	r3, [r0, r2]
 80059ee:	3a01      	subs	r2, #1
 80059f0:	d2fb      	bcs.n	80059ea <memmove+0x10>
 80059f2:	bd10      	pop	{r4, pc}
 80059f4:	5ccc      	ldrb	r4, [r1, r3]
 80059f6:	54c4      	strb	r4, [r0, r3]
 80059f8:	3301      	adds	r3, #1
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d1fa      	bne.n	80059f4 <memmove+0x1a>
 80059fe:	e7f8      	b.n	80059f2 <memmove+0x18>

08005a00 <_free_r>:
 8005a00:	b570      	push	{r4, r5, r6, lr}
 8005a02:	0005      	movs	r5, r0
 8005a04:	2900      	cmp	r1, #0
 8005a06:	d010      	beq.n	8005a2a <_free_r+0x2a>
 8005a08:	1f0c      	subs	r4, r1, #4
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	da00      	bge.n	8005a12 <_free_r+0x12>
 8005a10:	18e4      	adds	r4, r4, r3
 8005a12:	0028      	movs	r0, r5
 8005a14:	f000 f918 	bl	8005c48 <__malloc_lock>
 8005a18:	4a1d      	ldr	r2, [pc, #116]	; (8005a90 <_free_r+0x90>)
 8005a1a:	6813      	ldr	r3, [r2, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d105      	bne.n	8005a2c <_free_r+0x2c>
 8005a20:	6063      	str	r3, [r4, #4]
 8005a22:	6014      	str	r4, [r2, #0]
 8005a24:	0028      	movs	r0, r5
 8005a26:	f000 f917 	bl	8005c58 <__malloc_unlock>
 8005a2a:	bd70      	pop	{r4, r5, r6, pc}
 8005a2c:	42a3      	cmp	r3, r4
 8005a2e:	d908      	bls.n	8005a42 <_free_r+0x42>
 8005a30:	6821      	ldr	r1, [r4, #0]
 8005a32:	1860      	adds	r0, r4, r1
 8005a34:	4283      	cmp	r3, r0
 8005a36:	d1f3      	bne.n	8005a20 <_free_r+0x20>
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	1841      	adds	r1, r0, r1
 8005a3e:	6021      	str	r1, [r4, #0]
 8005a40:	e7ee      	b.n	8005a20 <_free_r+0x20>
 8005a42:	001a      	movs	r2, r3
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <_free_r+0x4e>
 8005a4a:	42a3      	cmp	r3, r4
 8005a4c:	d9f9      	bls.n	8005a42 <_free_r+0x42>
 8005a4e:	6811      	ldr	r1, [r2, #0]
 8005a50:	1850      	adds	r0, r2, r1
 8005a52:	42a0      	cmp	r0, r4
 8005a54:	d10b      	bne.n	8005a6e <_free_r+0x6e>
 8005a56:	6820      	ldr	r0, [r4, #0]
 8005a58:	1809      	adds	r1, r1, r0
 8005a5a:	1850      	adds	r0, r2, r1
 8005a5c:	6011      	str	r1, [r2, #0]
 8005a5e:	4283      	cmp	r3, r0
 8005a60:	d1e0      	bne.n	8005a24 <_free_r+0x24>
 8005a62:	6818      	ldr	r0, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	1841      	adds	r1, r0, r1
 8005a68:	6011      	str	r1, [r2, #0]
 8005a6a:	6053      	str	r3, [r2, #4]
 8005a6c:	e7da      	b.n	8005a24 <_free_r+0x24>
 8005a6e:	42a0      	cmp	r0, r4
 8005a70:	d902      	bls.n	8005a78 <_free_r+0x78>
 8005a72:	230c      	movs	r3, #12
 8005a74:	602b      	str	r3, [r5, #0]
 8005a76:	e7d5      	b.n	8005a24 <_free_r+0x24>
 8005a78:	6821      	ldr	r1, [r4, #0]
 8005a7a:	1860      	adds	r0, r4, r1
 8005a7c:	4283      	cmp	r3, r0
 8005a7e:	d103      	bne.n	8005a88 <_free_r+0x88>
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	1841      	adds	r1, r0, r1
 8005a86:	6021      	str	r1, [r4, #0]
 8005a88:	6063      	str	r3, [r4, #4]
 8005a8a:	6054      	str	r4, [r2, #4]
 8005a8c:	e7ca      	b.n	8005a24 <_free_r+0x24>
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	20000214 	.word	0x20000214

08005a94 <sbrk_aligned>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	4e0f      	ldr	r6, [pc, #60]	; (8005ad4 <sbrk_aligned+0x40>)
 8005a98:	000d      	movs	r5, r1
 8005a9a:	6831      	ldr	r1, [r6, #0]
 8005a9c:	0004      	movs	r4, r0
 8005a9e:	2900      	cmp	r1, #0
 8005aa0:	d102      	bne.n	8005aa8 <sbrk_aligned+0x14>
 8005aa2:	f000 f8bf 	bl	8005c24 <_sbrk_r>
 8005aa6:	6030      	str	r0, [r6, #0]
 8005aa8:	0029      	movs	r1, r5
 8005aaa:	0020      	movs	r0, r4
 8005aac:	f000 f8ba 	bl	8005c24 <_sbrk_r>
 8005ab0:	1c43      	adds	r3, r0, #1
 8005ab2:	d00a      	beq.n	8005aca <sbrk_aligned+0x36>
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	1cc5      	adds	r5, r0, #3
 8005ab8:	439d      	bics	r5, r3
 8005aba:	42a8      	cmp	r0, r5
 8005abc:	d007      	beq.n	8005ace <sbrk_aligned+0x3a>
 8005abe:	1a29      	subs	r1, r5, r0
 8005ac0:	0020      	movs	r0, r4
 8005ac2:	f000 f8af 	bl	8005c24 <_sbrk_r>
 8005ac6:	1c43      	adds	r3, r0, #1
 8005ac8:	d101      	bne.n	8005ace <sbrk_aligned+0x3a>
 8005aca:	2501      	movs	r5, #1
 8005acc:	426d      	negs	r5, r5
 8005ace:	0028      	movs	r0, r5
 8005ad0:	bd70      	pop	{r4, r5, r6, pc}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	20000218 	.word	0x20000218

08005ad8 <_malloc_r>:
 8005ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ada:	2203      	movs	r2, #3
 8005adc:	1ccb      	adds	r3, r1, #3
 8005ade:	4393      	bics	r3, r2
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	0006      	movs	r6, r0
 8005ae4:	001f      	movs	r7, r3
 8005ae6:	2b0c      	cmp	r3, #12
 8005ae8:	d232      	bcs.n	8005b50 <_malloc_r+0x78>
 8005aea:	270c      	movs	r7, #12
 8005aec:	42b9      	cmp	r1, r7
 8005aee:	d831      	bhi.n	8005b54 <_malloc_r+0x7c>
 8005af0:	0030      	movs	r0, r6
 8005af2:	f000 f8a9 	bl	8005c48 <__malloc_lock>
 8005af6:	4d32      	ldr	r5, [pc, #200]	; (8005bc0 <_malloc_r+0xe8>)
 8005af8:	682b      	ldr	r3, [r5, #0]
 8005afa:	001c      	movs	r4, r3
 8005afc:	2c00      	cmp	r4, #0
 8005afe:	d12e      	bne.n	8005b5e <_malloc_r+0x86>
 8005b00:	0039      	movs	r1, r7
 8005b02:	0030      	movs	r0, r6
 8005b04:	f7ff ffc6 	bl	8005a94 <sbrk_aligned>
 8005b08:	0004      	movs	r4, r0
 8005b0a:	1c43      	adds	r3, r0, #1
 8005b0c:	d11e      	bne.n	8005b4c <_malloc_r+0x74>
 8005b0e:	682c      	ldr	r4, [r5, #0]
 8005b10:	0025      	movs	r5, r4
 8005b12:	2d00      	cmp	r5, #0
 8005b14:	d14a      	bne.n	8005bac <_malloc_r+0xd4>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	0029      	movs	r1, r5
 8005b1a:	18e3      	adds	r3, r4, r3
 8005b1c:	0030      	movs	r0, r6
 8005b1e:	9301      	str	r3, [sp, #4]
 8005b20:	f000 f880 	bl	8005c24 <_sbrk_r>
 8005b24:	9b01      	ldr	r3, [sp, #4]
 8005b26:	4283      	cmp	r3, r0
 8005b28:	d143      	bne.n	8005bb2 <_malloc_r+0xda>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	3703      	adds	r7, #3
 8005b2e:	1aff      	subs	r7, r7, r3
 8005b30:	2303      	movs	r3, #3
 8005b32:	439f      	bics	r7, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	2f0c      	cmp	r7, #12
 8005b38:	d200      	bcs.n	8005b3c <_malloc_r+0x64>
 8005b3a:	270c      	movs	r7, #12
 8005b3c:	0039      	movs	r1, r7
 8005b3e:	0030      	movs	r0, r6
 8005b40:	f7ff ffa8 	bl	8005a94 <sbrk_aligned>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d034      	beq.n	8005bb2 <_malloc_r+0xda>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	19df      	adds	r7, r3, r7
 8005b4c:	6027      	str	r7, [r4, #0]
 8005b4e:	e013      	b.n	8005b78 <_malloc_r+0xa0>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	dacb      	bge.n	8005aec <_malloc_r+0x14>
 8005b54:	230c      	movs	r3, #12
 8005b56:	2500      	movs	r5, #0
 8005b58:	6033      	str	r3, [r6, #0]
 8005b5a:	0028      	movs	r0, r5
 8005b5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b5e:	6822      	ldr	r2, [r4, #0]
 8005b60:	1bd1      	subs	r1, r2, r7
 8005b62:	d420      	bmi.n	8005ba6 <_malloc_r+0xce>
 8005b64:	290b      	cmp	r1, #11
 8005b66:	d917      	bls.n	8005b98 <_malloc_r+0xc0>
 8005b68:	19e2      	adds	r2, r4, r7
 8005b6a:	6027      	str	r7, [r4, #0]
 8005b6c:	42a3      	cmp	r3, r4
 8005b6e:	d111      	bne.n	8005b94 <_malloc_r+0xbc>
 8005b70:	602a      	str	r2, [r5, #0]
 8005b72:	6863      	ldr	r3, [r4, #4]
 8005b74:	6011      	str	r1, [r2, #0]
 8005b76:	6053      	str	r3, [r2, #4]
 8005b78:	0030      	movs	r0, r6
 8005b7a:	0025      	movs	r5, r4
 8005b7c:	f000 f86c 	bl	8005c58 <__malloc_unlock>
 8005b80:	2207      	movs	r2, #7
 8005b82:	350b      	adds	r5, #11
 8005b84:	1d23      	adds	r3, r4, #4
 8005b86:	4395      	bics	r5, r2
 8005b88:	1aea      	subs	r2, r5, r3
 8005b8a:	429d      	cmp	r5, r3
 8005b8c:	d0e5      	beq.n	8005b5a <_malloc_r+0x82>
 8005b8e:	1b5b      	subs	r3, r3, r5
 8005b90:	50a3      	str	r3, [r4, r2]
 8005b92:	e7e2      	b.n	8005b5a <_malloc_r+0x82>
 8005b94:	605a      	str	r2, [r3, #4]
 8005b96:	e7ec      	b.n	8005b72 <_malloc_r+0x9a>
 8005b98:	6862      	ldr	r2, [r4, #4]
 8005b9a:	42a3      	cmp	r3, r4
 8005b9c:	d101      	bne.n	8005ba2 <_malloc_r+0xca>
 8005b9e:	602a      	str	r2, [r5, #0]
 8005ba0:	e7ea      	b.n	8005b78 <_malloc_r+0xa0>
 8005ba2:	605a      	str	r2, [r3, #4]
 8005ba4:	e7e8      	b.n	8005b78 <_malloc_r+0xa0>
 8005ba6:	0023      	movs	r3, r4
 8005ba8:	6864      	ldr	r4, [r4, #4]
 8005baa:	e7a7      	b.n	8005afc <_malloc_r+0x24>
 8005bac:	002c      	movs	r4, r5
 8005bae:	686d      	ldr	r5, [r5, #4]
 8005bb0:	e7af      	b.n	8005b12 <_malloc_r+0x3a>
 8005bb2:	230c      	movs	r3, #12
 8005bb4:	0030      	movs	r0, r6
 8005bb6:	6033      	str	r3, [r6, #0]
 8005bb8:	f000 f84e 	bl	8005c58 <__malloc_unlock>
 8005bbc:	e7cd      	b.n	8005b5a <_malloc_r+0x82>
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	20000214 	.word	0x20000214

08005bc4 <_realloc_r>:
 8005bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bc6:	0007      	movs	r7, r0
 8005bc8:	000e      	movs	r6, r1
 8005bca:	0014      	movs	r4, r2
 8005bcc:	2900      	cmp	r1, #0
 8005bce:	d105      	bne.n	8005bdc <_realloc_r+0x18>
 8005bd0:	0011      	movs	r1, r2
 8005bd2:	f7ff ff81 	bl	8005ad8 <_malloc_r>
 8005bd6:	0005      	movs	r5, r0
 8005bd8:	0028      	movs	r0, r5
 8005bda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bdc:	2a00      	cmp	r2, #0
 8005bde:	d103      	bne.n	8005be8 <_realloc_r+0x24>
 8005be0:	f7ff ff0e 	bl	8005a00 <_free_r>
 8005be4:	0025      	movs	r5, r4
 8005be6:	e7f7      	b.n	8005bd8 <_realloc_r+0x14>
 8005be8:	f000 f83e 	bl	8005c68 <_malloc_usable_size_r>
 8005bec:	9001      	str	r0, [sp, #4]
 8005bee:	4284      	cmp	r4, r0
 8005bf0:	d803      	bhi.n	8005bfa <_realloc_r+0x36>
 8005bf2:	0035      	movs	r5, r6
 8005bf4:	0843      	lsrs	r3, r0, #1
 8005bf6:	42a3      	cmp	r3, r4
 8005bf8:	d3ee      	bcc.n	8005bd8 <_realloc_r+0x14>
 8005bfa:	0021      	movs	r1, r4
 8005bfc:	0038      	movs	r0, r7
 8005bfe:	f7ff ff6b 	bl	8005ad8 <_malloc_r>
 8005c02:	1e05      	subs	r5, r0, #0
 8005c04:	d0e8      	beq.n	8005bd8 <_realloc_r+0x14>
 8005c06:	9b01      	ldr	r3, [sp, #4]
 8005c08:	0022      	movs	r2, r4
 8005c0a:	429c      	cmp	r4, r3
 8005c0c:	d900      	bls.n	8005c10 <_realloc_r+0x4c>
 8005c0e:	001a      	movs	r2, r3
 8005c10:	0031      	movs	r1, r6
 8005c12:	0028      	movs	r0, r5
 8005c14:	f7ff fbc0 	bl	8005398 <memcpy>
 8005c18:	0031      	movs	r1, r6
 8005c1a:	0038      	movs	r0, r7
 8005c1c:	f7ff fef0 	bl	8005a00 <_free_r>
 8005c20:	e7da      	b.n	8005bd8 <_realloc_r+0x14>
	...

08005c24 <_sbrk_r>:
 8005c24:	2300      	movs	r3, #0
 8005c26:	b570      	push	{r4, r5, r6, lr}
 8005c28:	4d06      	ldr	r5, [pc, #24]	; (8005c44 <_sbrk_r+0x20>)
 8005c2a:	0004      	movs	r4, r0
 8005c2c:	0008      	movs	r0, r1
 8005c2e:	602b      	str	r3, [r5, #0]
 8005c30:	f7fb f94e 	bl	8000ed0 <_sbrk>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	d103      	bne.n	8005c40 <_sbrk_r+0x1c>
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d000      	beq.n	8005c40 <_sbrk_r+0x1c>
 8005c3e:	6023      	str	r3, [r4, #0]
 8005c40:	bd70      	pop	{r4, r5, r6, pc}
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	2000021c 	.word	0x2000021c

08005c48 <__malloc_lock>:
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	4802      	ldr	r0, [pc, #8]	; (8005c54 <__malloc_lock+0xc>)
 8005c4c:	f000 f814 	bl	8005c78 <__retarget_lock_acquire_recursive>
 8005c50:	bd10      	pop	{r4, pc}
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	20000220 	.word	0x20000220

08005c58 <__malloc_unlock>:
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	4802      	ldr	r0, [pc, #8]	; (8005c64 <__malloc_unlock+0xc>)
 8005c5c:	f000 f80d 	bl	8005c7a <__retarget_lock_release_recursive>
 8005c60:	bd10      	pop	{r4, pc}
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	20000220 	.word	0x20000220

08005c68 <_malloc_usable_size_r>:
 8005c68:	1f0b      	subs	r3, r1, #4
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	1f18      	subs	r0, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	da01      	bge.n	8005c76 <_malloc_usable_size_r+0xe>
 8005c72:	580b      	ldr	r3, [r1, r0]
 8005c74:	18c0      	adds	r0, r0, r3
 8005c76:	4770      	bx	lr

08005c78 <__retarget_lock_acquire_recursive>:
 8005c78:	4770      	bx	lr

08005c7a <__retarget_lock_release_recursive>:
 8005c7a:	4770      	bx	lr

08005c7c <_init>:
 8005c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c82:	bc08      	pop	{r3}
 8005c84:	469e      	mov	lr, r3
 8005c86:	4770      	bx	lr

08005c88 <_fini>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8e:	bc08      	pop	{r3}
 8005c90:	469e      	mov	lr, r3
 8005c92:	4770      	bx	lr

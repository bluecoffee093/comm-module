
STM32L072-nrf-hal-tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e44  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005f04  08005f04  00015f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060f4  080060f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080060f4  080060f4  000160f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060fc  080060fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060fc  080060fc  000160fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000070  08006174  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08006174  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fed0  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002402  00000000  00000000  0002ff68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00032370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  000331c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d74  00000000  00000000  00033f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010387  00000000  00000000  00049c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085970  00000000  00000000  0005a023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df993  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f8  00000000  00000000  000df9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005eec 	.word	0x08005eec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005eec 	.word	0x08005eec

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b097      	sub	sp, #92	; 0x5c
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char serial_buf[26];
	uint8_t tx_pld[NRF_MAX_PL] = {};
 80004c2:	2310      	movs	r3, #16
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	3304      	adds	r3, #4
 80004cc:	221c      	movs	r2, #28
 80004ce:	2100      	movs	r1, #0
 80004d0:	0018      	movs	r0, r3
 80004d2:	f005 f8a2 	bl	800561a <memset>
	int count = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	657b      	str	r3, [r7, #84]	; 0x54
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fecf 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f903 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 fabb 	bl	8000a5c <MX_GPIO_Init>
  MX_RTC_Init();
 80004e6:	f000 f979 	bl	80007dc <MX_RTC_Init>
  MX_SPI1_Init();
 80004ea:	f000 fa17 	bl	800091c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 fa85 	bl	80009fc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80004f2:	f000 fa4b 	bl	800098c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80004f6:	4b72      	ldr	r3, [pc, #456]	; (80006c0 <main+0x204>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	2120      	movs	r1, #32
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 fa52 	bl	80019a6 <HAL_GPIO_WritePin>
  init_tx();
 8000502:	f000 fb9d 	bl	8000c40 <init_tx>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000506:	4b6e      	ldr	r3, [pc, #440]	; (80006c0 <main+0x204>)
 8000508:	2201      	movs	r2, #1
 800050a:	2120      	movs	r1, #32
 800050c:	0018      	movs	r0, r3
 800050e:	f001 fa4a 	bl	80019a6 <HAL_GPIO_WritePin>
	  while(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin));
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	4b6a      	ldr	r3, [pc, #424]	; (80006c0 <main+0x204>)
 8000516:	2104      	movs	r1, #4
 8000518:	0018      	movs	r0, r3
 800051a:	f001 fa27 	bl	800196c <HAL_GPIO_ReadPin>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d1f8      	bne.n	8000514 <main+0x58>
	  HAL_Delay(100);
 8000522:	2064      	movs	r0, #100	; 0x64
 8000524:	f000 ff1a 	bl	800135c <HAL_Delay>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000528:	4b65      	ldr	r3, [pc, #404]	; (80006c0 <main+0x204>)
 800052a:	2200      	movs	r2, #0
 800052c:	2120      	movs	r1, #32
 800052e:	0018      	movs	r0, r3
 8000530:	f001 fa39 	bl	80019a6 <HAL_GPIO_WritePin>
	  sprintf(serial_buf, "BUTTON PRESS COUNT: %d  \r\n", count);
 8000534:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000536:	4963      	ldr	r1, [pc, #396]	; (80006c4 <main+0x208>)
 8000538:	2430      	movs	r4, #48	; 0x30
 800053a:	193b      	adds	r3, r7, r4
 800053c:	0018      	movs	r0, r3
 800053e:	f005 f875 	bl	800562c <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*) serial_buf, sizeof(serial_buf), HAL_MAX_DELAY);
 8000542:	2301      	movs	r3, #1
 8000544:	425b      	negs	r3, r3
 8000546:	1939      	adds	r1, r7, r4
 8000548:	485f      	ldr	r0, [pc, #380]	; (80006c8 <main+0x20c>)
 800054a:	221a      	movs	r2, #26
 800054c:	f003 fab4 	bl	8003ab8 <HAL_UART_Transmit>
	  char ibuf[10];

	  tx_pld[0] = 0xAB;
 8000550:	2410      	movs	r4, #16
 8000552:	193b      	adds	r3, r7, r4
 8000554:	22ab      	movs	r2, #171	; 0xab
 8000556:	701a      	strb	r2, [r3, #0]
	  sprintf(ibuf, "%d", count);
 8000558:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800055a:	495c      	ldr	r1, [pc, #368]	; (80006cc <main+0x210>)
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	0018      	movs	r0, r3
 8000560:	f005 f864 	bl	800562c <siprintf>
	  sprintf((char *)&tx_pld[1], "stm-msg no. %s", ibuf);
 8000564:	1d3a      	adds	r2, r7, #4
 8000566:	495a      	ldr	r1, [pc, #360]	; (80006d0 <main+0x214>)
 8000568:	193b      	adds	r3, r7, r4
 800056a:	3301      	adds	r3, #1
 800056c:	0018      	movs	r0, r3
 800056e:	f005 f85d 	bl	800562c <siprintf>
	  hal_nrf_write_tx_payload(tx_pld, sizeof(tx_pld));
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2120      	movs	r1, #32
 8000576:	0018      	movs	r0, r3
 8000578:	f005 f809 	bl	800558e <hal_nrf_write_tx_payload>

	  hal_nrf_get_clear_irq_flags();
 800057c:	f004 ffa4 	bl	80054c8 <hal_nrf_get_clear_irq_flags>

	  hal_nrf_set_power_mode(HAL_NRF_PWR_UP);
 8000580:	2001      	movs	r0, #1
 8000582:	f004 ffc3 	bl	800550c <hal_nrf_set_power_mode>
	  HAL_Delay(2);
 8000586:	2002      	movs	r0, #2
 8000588:	f000 fee8 	bl	800135c <HAL_Delay>
	  chip_enable();
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	015b      	lsls	r3, r3, #5
 8000590:	484b      	ldr	r0, [pc, #300]	; (80006c0 <main+0x204>)
 8000592:	2201      	movs	r2, #1
 8000594:	0019      	movs	r1, r3
 8000596:	f001 fa06 	bl	80019a6 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 800059a:	2001      	movs	r0, #1
 800059c:	f000 fede 	bl	800135c <HAL_Delay>
	  chip_disable();
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	015b      	lsls	r3, r3, #5
 80005a4:	4846      	ldr	r0, [pc, #280]	; (80006c0 <main+0x204>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	0019      	movs	r1, r3
 80005aa:	f001 f9fc 	bl	80019a6 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int break_flag = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	653b      	str	r3, [r7, #80]	; 0x50
	  for (int i=0; i<20; i++)
 80005b2:	2300      	movs	r3, #0
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005b6:	e05f      	b.n	8000678 <main+0x1bc>
	  {
		  status = hal_nrf_nop();
 80005b8:	f004 fc7c 	bl	8004eb4 <hal_nrf_nop>
 80005bc:	0003      	movs	r3, r0
 80005be:	001a      	movs	r2, r3
 80005c0:	4b44      	ldr	r3, [pc, #272]	; (80006d4 <main+0x218>)
 80005c2:	701a      	strb	r2, [r3, #0]
		  if(status & (uint8_t)_BIT(HAL_NRF_MAX_RT))
 80005c4:	4b43      	ldr	r3, [pc, #268]	; (80006d4 <main+0x218>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	001a      	movs	r2, r3
 80005cc:	2310      	movs	r3, #16
 80005ce:	4013      	ands	r3, r2
 80005d0:	d013      	beq.n	80005fa <main+0x13e>
		  {
			  sprintf(serial_buf, "MAX RETRIES DONE      \r\n");
 80005d2:	4a41      	ldr	r2, [pc, #260]	; (80006d8 <main+0x21c>)
 80005d4:	2430      	movs	r4, #48	; 0x30
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	0011      	movs	r1, r2
 80005da:	0018      	movs	r0, r3
 80005dc:	f005 f826 	bl	800562c <siprintf>
			  HAL_UART_Transmit(&huart2,(uint8_t*) serial_buf, sizeof(serial_buf), HAL_MAX_DELAY);
 80005e0:	2301      	movs	r3, #1
 80005e2:	425b      	negs	r3, r3
 80005e4:	1939      	adds	r1, r7, r4
 80005e6:	4838      	ldr	r0, [pc, #224]	; (80006c8 <main+0x20c>)
 80005e8:	221a      	movs	r2, #26
 80005ea:	f003 fa65 	bl	8003ab8 <HAL_UART_Transmit>
			  hal_nrf_clear_irq_flag(HAL_NRF_MAX_RT);
 80005ee:	2004      	movs	r0, #4
 80005f0:	f004 ff78 	bl	80054e4 <hal_nrf_clear_irq_flag>
			  break_flag++;
 80005f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80005f6:	3301      	adds	r3, #1
 80005f8:	653b      	str	r3, [r7, #80]	; 0x50
		  }
		  if(status & (uint8_t)_BIT(HAL_NRF_TX_DS))
 80005fa:	4b36      	ldr	r3, [pc, #216]	; (80006d4 <main+0x218>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	001a      	movs	r2, r3
 8000602:	2320      	movs	r3, #32
 8000604:	4013      	ands	r3, r2
 8000606:	d013      	beq.n	8000630 <main+0x174>
		  {
			  sprintf(serial_buf, "DATA SENT SUCCESSFULLY\r\n");
 8000608:	4a34      	ldr	r2, [pc, #208]	; (80006dc <main+0x220>)
 800060a:	2430      	movs	r4, #48	; 0x30
 800060c:	193b      	adds	r3, r7, r4
 800060e:	0011      	movs	r1, r2
 8000610:	0018      	movs	r0, r3
 8000612:	f005 f80b 	bl	800562c <siprintf>
			  HAL_UART_Transmit(&huart2,(uint8_t*) serial_buf, sizeof(serial_buf), HAL_MAX_DELAY);
 8000616:	2301      	movs	r3, #1
 8000618:	425b      	negs	r3, r3
 800061a:	1939      	adds	r1, r7, r4
 800061c:	482a      	ldr	r0, [pc, #168]	; (80006c8 <main+0x20c>)
 800061e:	221a      	movs	r2, #26
 8000620:	f003 fa4a 	bl	8003ab8 <HAL_UART_Transmit>
			  hal_nrf_clear_irq_flag(HAL_NRF_TX_DS);
 8000624:	2005      	movs	r0, #5
 8000626:	f004 ff5d 	bl	80054e4 <hal_nrf_clear_irq_flag>
			  break_flag++;
 800062a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800062c:	3301      	adds	r3, #1
 800062e:	653b      	str	r3, [r7, #80]	; 0x50
		  }
		  if(status & (uint8_t)_BIT(HAL_NRF_RX_DR))
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <main+0x218>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	001a      	movs	r2, r3
 8000638:	2340      	movs	r3, #64	; 0x40
 800063a:	4013      	ands	r3, r2
 800063c:	d013      	beq.n	8000666 <main+0x1aa>
		  {
			  sprintf(serial_buf, "NEW DATA ARRIVED\r\n");
 800063e:	4a28      	ldr	r2, [pc, #160]	; (80006e0 <main+0x224>)
 8000640:	2430      	movs	r4, #48	; 0x30
 8000642:	193b      	adds	r3, r7, r4
 8000644:	0011      	movs	r1, r2
 8000646:	0018      	movs	r0, r3
 8000648:	f004 fff0 	bl	800562c <siprintf>
			  HAL_UART_Transmit(&huart2,(uint8_t*) serial_buf, sizeof(serial_buf), HAL_MAX_DELAY);
 800064c:	2301      	movs	r3, #1
 800064e:	425b      	negs	r3, r3
 8000650:	1939      	adds	r1, r7, r4
 8000652:	481d      	ldr	r0, [pc, #116]	; (80006c8 <main+0x20c>)
 8000654:	221a      	movs	r2, #26
 8000656:	f003 fa2f 	bl	8003ab8 <HAL_UART_Transmit>
			  hal_nrf_clear_irq_flag(HAL_NRF_RX_DR);
 800065a:	2006      	movs	r0, #6
 800065c:	f004 ff42 	bl	80054e4 <hal_nrf_clear_irq_flag>
			  break_flag++;
 8000660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000662:	3301      	adds	r3, #1
 8000664:	653b      	str	r3, [r7, #80]	; 0x50
		  }
		  if(break_flag){break_flag = 0; break;}
 8000666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000668:	2b00      	cmp	r3, #0
 800066a:	d002      	beq.n	8000672 <main+0x1b6>
 800066c:	2300      	movs	r3, #0
 800066e:	653b      	str	r3, [r7, #80]	; 0x50
 8000670:	e005      	b.n	800067e <main+0x1c2>
	  for (int i=0; i<20; i++)
 8000672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000674:	3301      	adds	r3, #1
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800067a:	2b13      	cmp	r3, #19
 800067c:	dd9c      	ble.n	80005b8 <main+0xfc>
	  }
	  hal_nrf_set_power_mode(HAL_NRF_PWR_DOWN);
 800067e:	2000      	movs	r0, #0
 8000680:	f004 ff44 	bl	800550c <hal_nrf_set_power_mode>
	  count++;
 8000684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000686:	3301      	adds	r3, #1
 8000688:	657b      	str	r3, [r7, #84]	; 0x54
	  if(hal_nrf_get_tx_fifo_status() == 0x02)
 800068a:	f004 ff69 	bl	8005560 <hal_nrf_get_tx_fifo_status>
 800068e:	0003      	movs	r3, r0
 8000690:	2b02      	cmp	r3, #2
 8000692:	d10f      	bne.n	80006b4 <main+0x1f8>
	  {
		  sprintf(serial_buf, "TX FIFO FULL: FLUSHING\r\n");
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <main+0x228>)
 8000696:	2430      	movs	r4, #48	; 0x30
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0011      	movs	r1, r2
 800069c:	0018      	movs	r0, r3
 800069e:	f004 ffc5 	bl	800562c <siprintf>
		  HAL_UART_Transmit(&huart2,(uint8_t*) serial_buf, sizeof(serial_buf), HAL_MAX_DELAY);
 80006a2:	2301      	movs	r3, #1
 80006a4:	425b      	negs	r3, r3
 80006a6:	1939      	adds	r1, r7, r4
 80006a8:	4807      	ldr	r0, [pc, #28]	; (80006c8 <main+0x20c>)
 80006aa:	221a      	movs	r2, #26
 80006ac:	f003 fa04 	bl	8003ab8 <HAL_UART_Transmit>
		  hal_nrf_flush_tx();
 80006b0:	f004 fc5a 	bl	8004f68 <hal_nrf_flush_tx>
	  }
	  HAL_Delay(1000);
 80006b4:	23fa      	movs	r3, #250	; 0xfa
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fe4f 	bl	800135c <HAL_Delay>
  {
 80006be:	e722      	b.n	8000506 <main+0x4a>
 80006c0:	50000400 	.word	0x50000400
 80006c4:	08005f04 	.word	0x08005f04
 80006c8:	20000160 	.word	0x20000160
 80006cc:	08005f20 	.word	0x08005f20
 80006d0:	08005f24 	.word	0x08005f24
 80006d4:	200001e4 	.word	0x200001e4
 80006d8:	08005f34 	.word	0x08005f34
 80006dc:	08005f50 	.word	0x08005f50
 80006e0:	08005f6c 	.word	0x08005f6c
 80006e4:	08005f80 	.word	0x08005f80

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b09d      	sub	sp, #116	; 0x74
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	2438      	movs	r4, #56	; 0x38
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	0018      	movs	r0, r3
 80006f4:	2338      	movs	r3, #56	; 0x38
 80006f6:	001a      	movs	r2, r3
 80006f8:	2100      	movs	r1, #0
 80006fa:	f004 ff8e 	bl	800561a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fe:	2324      	movs	r3, #36	; 0x24
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	0018      	movs	r0, r3
 8000704:	2314      	movs	r3, #20
 8000706:	001a      	movs	r2, r3
 8000708:	2100      	movs	r1, #0
 800070a:	f004 ff86 	bl	800561a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800070e:	003b      	movs	r3, r7
 8000710:	0018      	movs	r0, r3
 8000712:	2324      	movs	r3, #36	; 0x24
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f004 ff7f 	bl	800561a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <SystemClock_Config+0xec>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a2d      	ldr	r2, [pc, #180]	; (80007d8 <SystemClock_Config+0xf0>)
 8000722:	401a      	ands	r2, r3
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <SystemClock_Config+0xec>)
 8000726:	2180      	movs	r1, #128	; 0x80
 8000728:	0109      	lsls	r1, r1, #4
 800072a:	430a      	orrs	r2, r1
 800072c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800072e:	0021      	movs	r1, r4
 8000730:	187b      	adds	r3, r7, r1
 8000732:	220a      	movs	r2, #10
 8000734:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2210      	movs	r2, #16
 8000740:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2201      	movs	r2, #1
 8000746:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2202      	movs	r2, #2
 800074c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2200      	movs	r2, #0
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	0312      	lsls	r2, r2, #12
 800075a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	0412      	lsls	r2, r2, #16
 8000762:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	187b      	adds	r3, r7, r1
 8000766:	0018      	movs	r0, r3
 8000768:	f001 f956 	bl	8001a18 <HAL_RCC_OscConfig>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000770:	f000 fbb2 	bl	8000ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	2124      	movs	r1, #36	; 0x24
 8000776:	187b      	adds	r3, r7, r1
 8000778:	220f      	movs	r2, #15
 800077a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2203      	movs	r2, #3
 8000780:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2101      	movs	r1, #1
 8000798:	0018      	movs	r0, r3
 800079a:	f001 fd11 	bl	80021c0 <HAL_RCC_ClockConfig>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007a2:	f000 fb99 	bl	8000ed8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 80007a6:	003b      	movs	r3, r7
 80007a8:	2222      	movs	r2, #34	; 0x22
 80007aa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007ac:	003b      	movs	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007b2:	003b      	movs	r3, r7
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	0292      	lsls	r2, r2, #10
 80007b8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ba:	003b      	movs	r3, r7
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 ff23 	bl	8002608 <HAL_RCCEx_PeriphCLKConfig>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80007c6:	f000 fb87 	bl	8000ed8 <Error_Handler>
  }
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b01d      	add	sp, #116	; 0x74
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	40007000 	.word	0x40007000
 80007d8:	ffffe7ff 	.word	0xffffe7ff

080007dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b090      	sub	sp, #64	; 0x40
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007e2:	232c      	movs	r3, #44	; 0x2c
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	0018      	movs	r0, r3
 80007e8:	2314      	movs	r3, #20
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f004 ff14 	bl	800561a <memset>
  RTC_DateTypeDef sDate = {0};
 80007f2:	2328      	movs	r3, #40	; 0x28
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80007fa:	003b      	movs	r3, r7
 80007fc:	0018      	movs	r0, r3
 80007fe:	2328      	movs	r3, #40	; 0x28
 8000800:	001a      	movs	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	f004 ff09 	bl	800561a <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000808:	4b41      	ldr	r3, [pc, #260]	; (8000910 <MX_RTC_Init+0x134>)
 800080a:	4a42      	ldr	r2, [pc, #264]	; (8000914 <MX_RTC_Init+0x138>)
 800080c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800080e:	4b40      	ldr	r3, [pc, #256]	; (8000910 <MX_RTC_Init+0x134>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 8000814:	4b3e      	ldr	r3, [pc, #248]	; (8000910 <MX_RTC_Init+0x134>)
 8000816:	221f      	movs	r2, #31
 8000818:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 800081a:	4b3d      	ldr	r3, [pc, #244]	; (8000910 <MX_RTC_Init+0x134>)
 800081c:	4a3e      	ldr	r2, [pc, #248]	; (8000918 <MX_RTC_Init+0x13c>)
 800081e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000820:	4b3b      	ldr	r3, [pc, #236]	; (8000910 <MX_RTC_Init+0x134>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000826:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <MX_RTC_Init+0x134>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800082c:	4b38      	ldr	r3, [pc, #224]	; (8000910 <MX_RTC_Init+0x134>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000832:	4b37      	ldr	r3, [pc, #220]	; (8000910 <MX_RTC_Init+0x134>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000838:	4b35      	ldr	r3, [pc, #212]	; (8000910 <MX_RTC_Init+0x134>)
 800083a:	0018      	movs	r0, r3
 800083c:	f002 f83a 	bl	80028b4 <HAL_RTC_Init>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000844:	f000 fb48 	bl	8000ed8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000848:	212c      	movs	r1, #44	; 0x2c
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2200      	movs	r2, #0
 8000854:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2200      	movs	r2, #0
 800085a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000868:	1879      	adds	r1, r7, r1
 800086a:	4b29      	ldr	r3, [pc, #164]	; (8000910 <MX_RTC_Init+0x134>)
 800086c:	2200      	movs	r2, #0
 800086e:	0018      	movs	r0, r3
 8000870:	f002 f8be 	bl	80029f0 <HAL_RTC_SetTime>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000878:	f000 fb2e 	bl	8000ed8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800087c:	2128      	movs	r1, #40	; 0x28
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2201      	movs	r2, #1
 8000888:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2201      	movs	r2, #1
 800088e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2200      	movs	r2, #0
 8000894:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000896:	1879      	adds	r1, r7, r1
 8000898:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_RTC_Init+0x134>)
 800089a:	2200      	movs	r2, #0
 800089c:	0018      	movs	r0, r3
 800089e:	f002 f96b 	bl	8002b78 <HAL_RTC_SetDate>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80008a6:	f000 fb17 	bl	8000ed8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80008aa:	003b      	movs	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80008b0:	003b      	movs	r3, r7
 80008b2:	2200      	movs	r2, #0
 80008b4:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80008b6:	003b      	movs	r3, r7
 80008b8:	2200      	movs	r2, #0
 80008ba:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80008bc:	003b      	movs	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008c2:	003b      	movs	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008c8:	003b      	movs	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80008ce:	003b      	movs	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80008d4:	003b      	movs	r3, r7
 80008d6:	22f0      	movs	r2, #240	; 0xf0
 80008d8:	0512      	lsls	r2, r2, #20
 80008da:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80008dc:	003b      	movs	r3, r7
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80008e2:	003b      	movs	r3, r7
 80008e4:	2220      	movs	r2, #32
 80008e6:	2101      	movs	r1, #1
 80008e8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80008ea:	003b      	movs	r3, r7
 80008ec:	2280      	movs	r2, #128	; 0x80
 80008ee:	0052      	lsls	r2, r2, #1
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80008f2:	0039      	movs	r1, r7
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_RTC_Init+0x134>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	0018      	movs	r0, r3
 80008fa:	f002 f9eb 	bl	8002cd4 <HAL_RTC_SetAlarm_IT>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8000902:	f000 fae9 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b010      	add	sp, #64	; 0x40
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	2000008c 	.word	0x2000008c
 8000914:	40002800 	.word	0x40002800
 8000918:	000003ff 	.word	0x000003ff

0800091c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_SPI1_Init+0x68>)
 8000922:	4a19      	ldr	r2, [pc, #100]	; (8000988 <MX_SPI1_Init+0x6c>)
 8000924:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_SPI1_Init+0x68>)
 8000928:	2282      	movs	r2, #130	; 0x82
 800092a:	0052      	lsls	r2, r2, #1
 800092c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_SPI1_Init+0x68>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_SPI1_Init+0x68>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_SPI1_Init+0x68>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_SPI1_Init+0x68>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_SPI1_Init+0x68>)
 8000948:	2280      	movs	r2, #128	; 0x80
 800094a:	0092      	lsls	r2, r2, #2
 800094c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <MX_SPI1_Init+0x68>)
 8000950:	2220      	movs	r2, #32
 8000952:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_SPI1_Init+0x68>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <MX_SPI1_Init+0x68>)
 800095c:	2200      	movs	r2, #0
 800095e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_SPI1_Init+0x68>)
 8000962:	2200      	movs	r2, #0
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <MX_SPI1_Init+0x68>)
 8000968:	2207      	movs	r2, #7
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <MX_SPI1_Init+0x68>)
 800096e:	0018      	movs	r0, r3
 8000970:	f002 fbd4 	bl	800311c <HAL_SPI_Init>
 8000974:	1e03      	subs	r3, r0, #0
 8000976:	d001      	beq.n	800097c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000978:	f000 faae 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	200000b0 	.word	0x200000b0
 8000988:	40013000 	.word	0x40013000

0800098c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_SPI2_Init+0x68>)
 8000992:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <MX_SPI2_Init+0x6c>)
 8000994:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_SPI2_Init+0x68>)
 8000998:	2282      	movs	r2, #130	; 0x82
 800099a:	0052      	lsls	r2, r2, #1
 800099c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_SPI2_Init+0x68>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_SPI2_Init+0x68>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_SPI2_Init+0x68>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_SPI2_Init+0x68>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_SPI2_Init+0x68>)
 80009b8:	2280      	movs	r2, #128	; 0x80
 80009ba:	0092      	lsls	r2, r2, #2
 80009bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <MX_SPI2_Init+0x68>)
 80009c0:	2220      	movs	r2, #32
 80009c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_SPI2_Init+0x68>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <MX_SPI2_Init+0x68>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_SPI2_Init+0x68>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009d6:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <MX_SPI2_Init+0x68>)
 80009d8:	2207      	movs	r2, #7
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <MX_SPI2_Init+0x68>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f002 fb9c 	bl	800311c <HAL_SPI_Init>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009e8:	f000 fa76 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	20000108 	.word	0x20000108
 80009f8:	40003800 	.word	0x40003800

080009fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <MX_USART2_UART_Init+0x5c>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a08:	22e1      	movs	r2, #225	; 0xe1
 8000a0a:	0252      	lsls	r2, r2, #9
 8000a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <MX_USART2_UART_Init+0x58>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f002 ffe5 	bl	8003a10 <HAL_UART_Init>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a4a:	f000 fa45 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000160 	.word	0x20000160
 8000a58:	40004400 	.word	0x40004400

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b08b      	sub	sp, #44	; 0x2c
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	2414      	movs	r4, #20
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	0018      	movs	r0, r3
 8000a68:	2314      	movs	r3, #20
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f004 fdd4 	bl	800561a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b6f      	ldr	r3, [pc, #444]	; (8000c30 <MX_GPIO_Init+0x1d4>)
 8000a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a76:	4b6e      	ldr	r3, [pc, #440]	; (8000c30 <MX_GPIO_Init+0x1d4>)
 8000a78:	2101      	movs	r1, #1
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a7e:	4b6c      	ldr	r3, [pc, #432]	; (8000c30 <MX_GPIO_Init+0x1d4>)
 8000a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a82:	2201      	movs	r2, #1
 8000a84:	4013      	ands	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	4b69      	ldr	r3, [pc, #420]	; (8000c30 <MX_GPIO_Init+0x1d4>)
 8000a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a8e:	4b68      	ldr	r3, [pc, #416]	; (8000c30 <MX_GPIO_Init+0x1d4>)
 8000a90:	2102      	movs	r1, #2
 8000a92:	430a      	orrs	r2, r1
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a96:	4b66      	ldr	r3, [pc, #408]	; (8000c30 <MX_GPIO_Init+0x1d4>)
 8000a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	4b63      	ldr	r3, [pc, #396]	; (8000c30 <MX_GPIO_Init+0x1d4>)
 8000aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000aa6:	4b62      	ldr	r3, [pc, #392]	; (8000c30 <MX_GPIO_Init+0x1d4>)
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aae:	4b60      	ldr	r3, [pc, #384]	; (8000c30 <MX_GPIO_Init+0x1d4>)
 8000ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	4b5d      	ldr	r3, [pc, #372]	; (8000c30 <MX_GPIO_Init+0x1d4>)
 8000abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000abe:	4b5c      	ldr	r3, [pc, #368]	; (8000c30 <MX_GPIO_Init+0x1d4>)
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ac6:	4b5a      	ldr	r3, [pc, #360]	; (8000c30 <MX_GPIO_Init+0x1d4>)
 8000ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	4013      	ands	r3, r2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin, GPIO_PIN_RESET);
 8000ad2:	4958      	ldr	r1, [pc, #352]	; (8000c34 <MX_GPIO_Init+0x1d8>)
 8000ad4:	23a0      	movs	r3, #160	; 0xa0
 8000ad6:	05db      	lsls	r3, r3, #23
 8000ad8:	2200      	movs	r2, #0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 ff63 	bl	80019a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|CE_Pin, GPIO_PIN_RESET);
 8000ae0:	2385      	movs	r3, #133	; 0x85
 8000ae2:	015b      	lsls	r3, r3, #5
 8000ae4:	4854      	ldr	r0, [pc, #336]	; (8000c38 <MX_GPIO_Init+0x1dc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	0019      	movs	r1, r3
 8000aea:	f000 ff5c 	bl	80019a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 8000aee:	4b52      	ldr	r3, [pc, #328]	; (8000c38 <MX_GPIO_Init+0x1dc>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	2140      	movs	r1, #64	; 0x40
 8000af4:	0018      	movs	r0, r3
 8000af6:	f000 ff56 	bl	80019a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 8000afa:	4b50      	ldr	r3, [pc, #320]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	2107      	movs	r1, #7
 8000b00:	0018      	movs	r0, r3
 8000b02:	f000 ff50 	bl	80019a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15_RESERVED_Pin PA12_RESERVED_Pin PA1_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin;
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	4a4a      	ldr	r2, [pc, #296]	; (8000c34 <MX_GPIO_Init+0x1d8>)
 8000b0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	2201      	movs	r2, #1
 8000b10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	193b      	adds	r3, r7, r4
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b18:	193b      	adds	r3, r7, r4
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	193a      	adds	r2, r7, r4
 8000b20:	23a0      	movs	r3, #160	; 0xa0
 8000b22:	05db      	lsls	r3, r3, #23
 8000b24:	0011      	movs	r1, r2
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fda2 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin SS_Pin LED2_Pin CE_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|SS_Pin|LED2_Pin|CE_Pin;
 8000b2c:	0021      	movs	r1, r4
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2287      	movs	r2, #135	; 0x87
 8000b32:	0152      	lsls	r2, r2, #5
 8000b34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	000c      	movs	r4, r1
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	4a3a      	ldr	r2, [pc, #232]	; (8000c38 <MX_GPIO_Init+0x1dc>)
 8000b4e:	0019      	movs	r1, r3
 8000b50:	0010      	movs	r0, r2
 8000b52:	f000 fd8d 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_RESERVED_Pin PB1_RESERVED_Pin PB0_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB4_RESERVED_Pin|PB1_RESERVED_Pin|PB0_RESERVED_Pin;
 8000b56:	0021      	movs	r1, r4
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2213      	movs	r2, #19
 8000b5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2288      	movs	r2, #136	; 0x88
 8000b62:	0352      	lsls	r2, r2, #13
 8000b64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	000c      	movs	r4, r1
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	4a31      	ldr	r2, [pc, #196]	; (8000c38 <MX_GPIO_Init+0x1dc>)
 8000b72:	0019      	movs	r1, r3
 8000b74:	0010      	movs	r0, r2
 8000b76:	f000 fd7b 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC13_RESERVED_Pin;
 8000b7a:	0021      	movs	r1, r4
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2280      	movs	r2, #128	; 0x80
 8000b80:	0192      	lsls	r2, r2, #6
 8000b82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2288      	movs	r2, #136	; 0x88
 8000b88:	0352      	lsls	r2, r2, #13
 8000b8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	000c      	movs	r4, r1
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PC13_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	4a29      	ldr	r2, [pc, #164]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000b98:	0019      	movs	r1, r3
 8000b9a:	0010      	movs	r0, r2
 8000b9c:	f000 fd68 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1_RESERVED_Pin PC0_RESERVED_Pin PC2_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	2207      	movs	r2, #7
 8000ba4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	2201      	movs	r2, #1
 8000baa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	4a20      	ldr	r2, [pc, #128]	; (8000c3c <MX_GPIO_Init+0x1e0>)
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	0010      	movs	r0, r2
 8000bc0:	f000 fd56 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	0092      	lsls	r2, r2, #2
 8000bca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	2284      	movs	r2, #132	; 0x84
 8000bd0:	0392      	lsls	r2, r2, #14
 8000bd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000bda:	193a      	adds	r2, r7, r4
 8000bdc:	23a0      	movs	r3, #160	; 0xa0
 8000bde:	05db      	lsls	r3, r3, #23
 8000be0:	0011      	movs	r1, r2
 8000be2:	0018      	movs	r0, r3
 8000be4:	f000 fd44 	bl	8001670 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2204      	movs	r2, #4
 8000bec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf4:	193b      	adds	r3, r7, r4
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <MX_GPIO_Init+0x1dc>)
 8000bfe:	0019      	movs	r1, r3
 8000c00:	0010      	movs	r0, r2
 8000c02:	f000 fd35 	bl	8001670 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2005      	movs	r0, #5
 8000c0c:	f000 fc76 	bl	80014fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000c10:	2005      	movs	r0, #5
 8000c12:	f000 fc88 	bl	8001526 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2007      	movs	r0, #7
 8000c1c:	f000 fc6e 	bl	80014fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c20:	2007      	movs	r0, #7
 8000c22:	f000 fc80 	bl	8001526 <HAL_NVIC_EnableIRQ>

}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b00b      	add	sp, #44	; 0x2c
 8000c2c:	bd90      	pop	{r4, r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	40021000 	.word	0x40021000
 8000c34:	00009002 	.word	0x00009002
 8000c38:	50000400 	.word	0x50000400
 8000c3c:	50000800 	.word	0x50000800

08000c40 <init_tx>:

/* USER CODE BEGIN 4 */
void init_tx(void)
{
 8000c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c42:	b08f      	sub	sp, #60	; 0x3c
 8000c44:	af04      	add	r7, sp, #16
  uint8_t addr[5];
  hal_nrf_init(&hspi2, HAL_MAX_DELAY);
 8000c46:	2301      	movs	r3, #1
 8000c48:	425a      	negs	r2, r3
 8000c4a:	4b4f      	ldr	r3, [pc, #316]	; (8000d88 <init_tx+0x148>)
 8000c4c:	0011      	movs	r1, r2
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f003 ffdc 	bl	8004c0c <hal_nrf_init>
  hal_nrf_flush_rx();
 8000c54:	f004 f964 	bl	8004f20 <hal_nrf_flush_rx>
  hal_nrf_flush_tx();
 8000c58:	f004 f986 	bl	8004f68 <hal_nrf_flush_tx>

  hal_nrf_set_rf_channel(CHANNEL);
 8000c5c:	2014      	movs	r0, #20
 8000c5e:	f004 f9d1 	bl	8005004 <hal_nrf_set_rf_channel>
  hal_nrf_set_datarate(HAL_NRF_1MBPS);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f004 fa12 	bl	800508c <hal_nrf_set_datarate>
  hal_nrf_set_crc_mode(HAL_NRF_CRC_16BIT);
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f004 fa56 	bl	800511a <hal_nrf_set_crc_mode>
  hal_nrf_set_irq_mode(HAL_NRF_MAX_RT, 1);
 8000c6e:	2101      	movs	r1, #1
 8000c70:	2004      	movs	r0, #4
 8000c72:	f004 fbc8 	bl	8005406 <hal_nrf_set_irq_mode>
  hal_nrf_set_irq_mode(HAL_NRF_TX_DS, 1);
 8000c76:	2101      	movs	r1, #1
 8000c78:	2005      	movs	r0, #5
 8000c7a:	f004 fbc4 	bl	8005406 <hal_nrf_set_irq_mode>
  hal_nrf_set_irq_mode(HAL_NRF_RX_DR, 1);
 8000c7e:	2101      	movs	r1, #1
 8000c80:	2006      	movs	r0, #6
 8000c82:	f004 fbc0 	bl	8005406 <hal_nrf_set_irq_mode>

  hal_nrf_set_operation_mode(HAL_NRF_PTX);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f004 f992 	bl	8004fb0 <hal_nrf_set_operation_mode>
  hal_nrf_config_tx(NULL, HAL_NRF_0DBM, 15, 4000);
 8000c8c:	23fa      	movs	r3, #250	; 0xfa
 8000c8e:	011b      	lsls	r3, r3, #4
 8000c90:	220f      	movs	r2, #15
 8000c92:	2103      	movs	r1, #3
 8000c94:	2000      	movs	r0, #0
 8000c96:	f004 fb84 	bl	80053a2 <hal_nrf_config_tx>
  char sp_buf[26];

  sprintf(sp_buf, "SETUP RETRY: %02X        \r\n", hal_nrf_read_reg(SETUP_RETR));
 8000c9a:	2004      	movs	r0, #4
 8000c9c:	f003 ffca 	bl	8004c34 <hal_nrf_read_reg>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	4939      	ldr	r1, [pc, #228]	; (8000d8c <init_tx+0x14c>)
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f004 fcbf 	bl	800562c <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)sp_buf, 26, HAL_MAX_DELAY);
 8000cae:	2301      	movs	r3, #1
 8000cb0:	425b      	negs	r3, r3
 8000cb2:	1d39      	adds	r1, r7, #4
 8000cb4:	4836      	ldr	r0, [pc, #216]	; (8000d90 <init_tx+0x150>)
 8000cb6:	221a      	movs	r2, #26
 8000cb8:	f002 fefe 	bl	8003ab8 <HAL_UART_Transmit>

  hal_nrf_get_address(HAL_NRF_PIPE0, addr);
 8000cbc:	2420      	movs	r4, #32
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f004 fb43 	bl	800534e <hal_nrf_get_address>
  sprintf(sp_buf, "P0 addr: %02X:%02X:%02X:%02X:%02X\r\n", addr[0], addr[1], addr[2], addr[3], addr[4]);
 8000cc8:	0021      	movs	r1, r4
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	001d      	movs	r5, r3
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	785b      	ldrb	r3, [r3, #1]
 8000cd4:	001e      	movs	r6, r3
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	789b      	ldrb	r3, [r3, #2]
 8000cda:	001a      	movs	r2, r3
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	78db      	ldrb	r3, [r3, #3]
 8000ce0:	001c      	movs	r4, r3
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	791b      	ldrb	r3, [r3, #4]
 8000ce6:	492b      	ldr	r1, [pc, #172]	; (8000d94 <init_tx+0x154>)
 8000ce8:	1d38      	adds	r0, r7, #4
 8000cea:	9302      	str	r3, [sp, #8]
 8000cec:	9401      	str	r4, [sp, #4]
 8000cee:	9200      	str	r2, [sp, #0]
 8000cf0:	0033      	movs	r3, r6
 8000cf2:	002a      	movs	r2, r5
 8000cf4:	f004 fc9a 	bl	800562c <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)sp_buf, 26, HAL_MAX_DELAY);
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	425b      	negs	r3, r3
 8000cfc:	1d39      	adds	r1, r7, #4
 8000cfe:	4824      	ldr	r0, [pc, #144]	; (8000d90 <init_tx+0x150>)
 8000d00:	221a      	movs	r2, #26
 8000d02:	f002 fed9 	bl	8003ab8 <HAL_UART_Transmit>

  hal_nrf_get_address(HAL_NRF_TX, addr);
 8000d06:	2120      	movs	r1, #32
 8000d08:	000c      	movs	r4, r1
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	2006      	movs	r0, #6
 8000d10:	f004 fb1d 	bl	800534e <hal_nrf_get_address>
  sprintf(sp_buf, "TX addr: %02X:%02X:%02X:%02X:%02X\r\n", addr[0], addr[1], addr[2], addr[3], addr[4]);
 8000d14:	0021      	movs	r1, r4
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	001d      	movs	r5, r3
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	785b      	ldrb	r3, [r3, #1]
 8000d20:	001e      	movs	r6, r3
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	789b      	ldrb	r3, [r3, #2]
 8000d26:	001a      	movs	r2, r3
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	78db      	ldrb	r3, [r3, #3]
 8000d2c:	001c      	movs	r4, r3
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	791b      	ldrb	r3, [r3, #4]
 8000d32:	4919      	ldr	r1, [pc, #100]	; (8000d98 <init_tx+0x158>)
 8000d34:	1d38      	adds	r0, r7, #4
 8000d36:	9302      	str	r3, [sp, #8]
 8000d38:	9401      	str	r4, [sp, #4]
 8000d3a:	9200      	str	r2, [sp, #0]
 8000d3c:	0033      	movs	r3, r6
 8000d3e:	002a      	movs	r2, r5
 8000d40:	f004 fc74 	bl	800562c <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*) sp_buf, 26, HAL_MAX_DELAY);
 8000d44:	2301      	movs	r3, #1
 8000d46:	425b      	negs	r3, r3
 8000d48:	1d39      	adds	r1, r7, #4
 8000d4a:	4811      	ldr	r0, [pc, #68]	; (8000d90 <init_tx+0x150>)
 8000d4c:	221a      	movs	r2, #26
 8000d4e:	f002 feb3 	bl	8003ab8 <HAL_UART_Transmit>

  sprintf(sp_buf, "CONFIG REGISTER: %02X    \r\n", hal_nrf_read_reg(CONFIG));
 8000d52:	2000      	movs	r0, #0
 8000d54:	f003 ff6e 	bl	8004c34 <hal_nrf_read_reg>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	001a      	movs	r2, r3
 8000d5c:	490f      	ldr	r1, [pc, #60]	; (8000d9c <init_tx+0x15c>)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	0018      	movs	r0, r3
 8000d62:	f004 fc63 	bl	800562c <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*) sp_buf, 26, HAL_MAX_DELAY);
 8000d66:	2301      	movs	r3, #1
 8000d68:	425b      	negs	r3, r3
 8000d6a:	1d39      	adds	r1, r7, #4
 8000d6c:	4808      	ldr	r0, [pc, #32]	; (8000d90 <init_tx+0x150>)
 8000d6e:	221a      	movs	r2, #26
 8000d70:	f002 fea2 	bl	8003ab8 <HAL_UART_Transmit>

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <init_tx+0x160>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	2120      	movs	r1, #32
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f000 fe13 	bl	80019a6 <HAL_GPIO_WritePin>
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b00b      	add	sp, #44	; 0x2c
 8000d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d88:	20000108 	.word	0x20000108
 8000d8c:	08005f9c 	.word	0x08005f9c
 8000d90:	20000160 	.word	0x20000160
 8000d94:	08005fb8 	.word	0x08005fb8
 8000d98:	08005fdc 	.word	0x08005fdc
 8000d9c:	08006000 	.word	0x08006000
 8000da0:	50000400 	.word	0x50000400

08000da4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b08b      	sub	sp, #44	; 0x2c
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	0002      	movs	r2, r0
 8000dac:	1dbb      	adds	r3, r7, #6
 8000dae:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == NRF_IRQ_Pin)
 8000db0:	1dbb      	adds	r3, r7, #6
 8000db2:	881a      	ldrh	r2, [r3, #0]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d000      	beq.n	8000dbe <HAL_GPIO_EXTI_Callback+0x1a>
 8000dbc:	e079      	b.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x10e>
	{
		char serial_buf[25] = {};
 8000dbe:	240c      	movs	r4, #12
 8000dc0:	193b      	adds	r3, r7, r4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	2215      	movs	r2, #21
 8000dca:	2100      	movs	r1, #0
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f004 fc24 	bl	800561a <memset>
		status = hal_nrf_nop();
 8000dd2:	f004 f86f 	bl	8004eb4 <hal_nrf_nop>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	001a      	movs	r2, r3
 8000dda:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x118>)
 8000ddc:	701a      	strb	r2, [r3, #0]
		sprintf(serial_buf, "INSIDE INTERRUPT      \r\n");
 8000dde:	4a38      	ldr	r2, [pc, #224]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000de0:	193b      	adds	r3, r7, r4
 8000de2:	0011      	movs	r1, r2
 8000de4:	0018      	movs	r0, r3
 8000de6:	f004 fc21 	bl	800562c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*) serial_buf, sizeof(serial_buf), HAL_MAX_DELAY);
 8000dea:	2301      	movs	r3, #1
 8000dec:	425b      	negs	r3, r3
 8000dee:	1939      	adds	r1, r7, r4
 8000df0:	4834      	ldr	r0, [pc, #208]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000df2:	2219      	movs	r2, #25
 8000df4:	f002 fe60 	bl	8003ab8 <HAL_UART_Transmit>
	    if(status & (uint8_t)_BIT(HAL_NRF_MAX_RT))
 8000df8:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x118>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	001a      	movs	r2, r3
 8000e00:	2310      	movs	r3, #16
 8000e02:	4013      	ands	r3, r2
 8000e04:	d00f      	beq.n	8000e26 <HAL_GPIO_EXTI_Callback+0x82>
	    {
		  sprintf(serial_buf, "MAX RETRIES DONE      \r\n");
 8000e06:	4a30      	ldr	r2, [pc, #192]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x124>)
 8000e08:	193b      	adds	r3, r7, r4
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f004 fc0d 	bl	800562c <siprintf>
		  HAL_UART_Transmit(&huart2,(uint8_t*) serial_buf, sizeof(serial_buf), HAL_MAX_DELAY);
 8000e12:	2301      	movs	r3, #1
 8000e14:	425b      	negs	r3, r3
 8000e16:	1939      	adds	r1, r7, r4
 8000e18:	482a      	ldr	r0, [pc, #168]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000e1a:	2219      	movs	r2, #25
 8000e1c:	f002 fe4c 	bl	8003ab8 <HAL_UART_Transmit>
		  hal_nrf_clear_irq_flag(HAL_NRF_MAX_RT);
 8000e20:	2004      	movs	r0, #4
 8000e22:	f004 fb5f 	bl	80054e4 <hal_nrf_clear_irq_flag>
	    }
	    if(status & (uint8_t)_BIT(HAL_NRF_TX_DS))
 8000e26:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x118>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	2320      	movs	r3, #32
 8000e30:	4013      	ands	r3, r2
 8000e32:	d010      	beq.n	8000e56 <HAL_GPIO_EXTI_Callback+0xb2>
	    {
		  sprintf(serial_buf, "DATA SENT SUCCESSFULLY\r\n");
 8000e34:	4a25      	ldr	r2, [pc, #148]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x128>)
 8000e36:	240c      	movs	r4, #12
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f004 fbf5 	bl	800562c <siprintf>
		  HAL_UART_Transmit(&huart2,(uint8_t*) serial_buf, sizeof(serial_buf), HAL_MAX_DELAY);
 8000e42:	2301      	movs	r3, #1
 8000e44:	425b      	negs	r3, r3
 8000e46:	1939      	adds	r1, r7, r4
 8000e48:	481e      	ldr	r0, [pc, #120]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000e4a:	2219      	movs	r2, #25
 8000e4c:	f002 fe34 	bl	8003ab8 <HAL_UART_Transmit>
		  hal_nrf_clear_irq_flag(HAL_NRF_TX_DS);
 8000e50:	2005      	movs	r0, #5
 8000e52:	f004 fb47 	bl	80054e4 <hal_nrf_clear_irq_flag>
	    }
	    if(status & (uint8_t)_BIT(HAL_NRF_RX_DR))
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x118>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	2340      	movs	r3, #64	; 0x40
 8000e60:	4013      	ands	r3, r2
 8000e62:	d010      	beq.n	8000e86 <HAL_GPIO_EXTI_Callback+0xe2>
	    {
		  sprintf(serial_buf, "NEW DATA ARRIVED\r\n");
 8000e64:	4a1a      	ldr	r2, [pc, #104]	; (8000ed0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000e66:	240c      	movs	r4, #12
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f004 fbdd 	bl	800562c <siprintf>
		  HAL_UART_Transmit(&huart2,(uint8_t*) serial_buf, sizeof(serial_buf), HAL_MAX_DELAY);
 8000e72:	2301      	movs	r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	1939      	adds	r1, r7, r4
 8000e78:	4812      	ldr	r0, [pc, #72]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000e7a:	2219      	movs	r2, #25
 8000e7c:	f002 fe1c 	bl	8003ab8 <HAL_UART_Transmit>
		  hal_nrf_clear_irq_flag(HAL_NRF_RX_DR);
 8000e80:	2006      	movs	r0, #6
 8000e82:	f004 fb2f 	bl	80054e4 <hal_nrf_clear_irq_flag>
	    }
	    sprintf(serial_buf, "STATUS REGISTER  :  %02X\r\n", hal_nrf_nop());
 8000e86:	f004 f815 	bl	8004eb4 <hal_nrf_nop>
 8000e8a:	0003      	movs	r3, r0
 8000e8c:	001a      	movs	r2, r3
 8000e8e:	4911      	ldr	r1, [pc, #68]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x130>)
 8000e90:	240c      	movs	r4, #12
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	0018      	movs	r0, r3
 8000e96:	f004 fbc9 	bl	800562c <siprintf>
	    HAL_UART_Transmit(&huart2,(uint8_t*) serial_buf, sizeof(serial_buf), HAL_MAX_DELAY);
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	425b      	negs	r3, r3
 8000e9e:	1939      	adds	r1, r7, r4
 8000ea0:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000ea2:	2219      	movs	r2, #25
 8000ea4:	f002 fe08 	bl	8003ab8 <HAL_UART_Transmit>
	    hal_nrf_get_clear_irq_flags();
 8000ea8:	f004 fb0e 	bl	80054c8 <hal_nrf_get_clear_irq_flags>
	    HAL_Delay(10);
 8000eac:	200a      	movs	r0, #10
 8000eae:	f000 fa55 	bl	800135c <HAL_Delay>
	 }
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b00b      	add	sp, #44	; 0x2c
 8000eb8:	bd90      	pop	{r4, r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	200001e4 	.word	0x200001e4
 8000ec0:	0800601c 	.word	0x0800601c
 8000ec4:	20000160 	.word	0x20000160
 8000ec8:	08005f34 	.word	0x08005f34
 8000ecc:	08005f50 	.word	0x08005f50
 8000ed0:	08005f6c 	.word	0x08005f6c
 8000ed4:	08006038 	.word	0x08006038

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <Error_Handler+0x8>
	...

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <HAL_MspInit+0x24>)
 8000eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_MspInit+0x24>)
 8000eee:	2101      	movs	r1, #1
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <HAL_MspInit+0x24>)
 8000ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_MspInit+0x24>)
 8000efa:	2180      	movs	r1, #128	; 0x80
 8000efc:	0549      	lsls	r1, r1, #21
 8000efe:	430a      	orrs	r2, r1
 8000f00:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_RTC_MspInit+0x38>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d10e      	bne.n	8000f3c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_RTC_MspInit+0x3c>)
 8000f20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_RTC_MspInit+0x3c>)
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	02c9      	lsls	r1, r1, #11
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2002      	movs	r0, #2
 8000f32:	f000 fae3 	bl	80014fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000f36:	2002      	movs	r0, #2
 8000f38:	f000 faf5 	bl	8001526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b002      	add	sp, #8
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40002800 	.word	0x40002800
 8000f48:	40021000 	.word	0x40021000

08000f4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b08b      	sub	sp, #44	; 0x2c
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	2414      	movs	r4, #20
 8000f56:	193b      	adds	r3, r7, r4
 8000f58:	0018      	movs	r0, r3
 8000f5a:	2314      	movs	r3, #20
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	f004 fb5b 	bl	800561a <memset>
  if(hspi->Instance==SPI1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a40      	ldr	r2, [pc, #256]	; (800106c <HAL_SPI_MspInit+0x120>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d14b      	bne.n	8001006 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f6e:	4b40      	ldr	r3, [pc, #256]	; (8001070 <HAL_SPI_MspInit+0x124>)
 8000f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f72:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <HAL_SPI_MspInit+0x124>)
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	0149      	lsls	r1, r1, #5
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7c:	4b3c      	ldr	r3, [pc, #240]	; (8001070 <HAL_SPI_MspInit+0x124>)
 8000f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f80:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <HAL_SPI_MspInit+0x124>)
 8000f82:	2102      	movs	r1, #2
 8000f84:	430a      	orrs	r2, r1
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f88:	4b39      	ldr	r3, [pc, #228]	; (8001070 <HAL_SPI_MspInit+0x124>)
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f94:	4b36      	ldr	r3, [pc, #216]	; (8001070 <HAL_SPI_MspInit+0x124>)
 8000f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f98:	4b35      	ldr	r3, [pc, #212]	; (8001070 <HAL_SPI_MspInit+0x124>)
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fa0:	4b33      	ldr	r3, [pc, #204]	; (8001070 <HAL_SPI_MspInit+0x124>)
 8000fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = PB3_RESERVED_Pin;
 8000fac:	193b      	adds	r3, r7, r4
 8000fae:	2208      	movs	r2, #8
 8000fb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	193b      	adds	r3, r7, r4
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	193b      	adds	r3, r7, r4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	193b      	adds	r3, r7, r4
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PB3_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8000fca:	193b      	adds	r3, r7, r4
 8000fcc:	4a29      	ldr	r2, [pc, #164]	; (8001074 <HAL_SPI_MspInit+0x128>)
 8000fce:	0019      	movs	r1, r3
 8000fd0:	0010      	movs	r0, r2
 8000fd2:	f000 fb4d 	bl	8001670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin;
 8000fd6:	0021      	movs	r1, r4
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	22c0      	movs	r2, #192	; 0xc0
 8000fdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	2203      	movs	r2, #3
 8000fee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	187a      	adds	r2, r7, r1
 8000ff8:	23a0      	movs	r3, #160	; 0xa0
 8000ffa:	05db      	lsls	r3, r3, #23
 8000ffc:	0011      	movs	r1, r2
 8000ffe:	0018      	movs	r0, r3
 8001000:	f000 fb36 	bl	8001670 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001004:	e02e      	b.n	8001064 <HAL_SPI_MspInit+0x118>
  else if(hspi->Instance==SPI2)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <HAL_SPI_MspInit+0x12c>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d129      	bne.n	8001064 <HAL_SPI_MspInit+0x118>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <HAL_SPI_MspInit+0x124>)
 8001012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_SPI_MspInit+0x124>)
 8001016:	2180      	movs	r1, #128	; 0x80
 8001018:	01c9      	lsls	r1, r1, #7
 800101a:	430a      	orrs	r2, r1
 800101c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_SPI_MspInit+0x124>)
 8001020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_SPI_MspInit+0x124>)
 8001024:	2102      	movs	r1, #2
 8001026:	430a      	orrs	r2, r1
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_SPI_MspInit+0x124>)
 800102c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102e:	2202      	movs	r2, #2
 8001030:	4013      	ands	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13;
 8001036:	2114      	movs	r1, #20
 8001038:	187b      	adds	r3, r7, r1
 800103a:	22e0      	movs	r2, #224	; 0xe0
 800103c:	0212      	lsls	r2, r2, #8
 800103e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2202      	movs	r2, #2
 8001044:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	187b      	adds	r3, r7, r1
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	187b      	adds	r3, r7, r1
 800104e:	2203      	movs	r2, #3
 8001050:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001052:	187b      	adds	r3, r7, r1
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	187b      	adds	r3, r7, r1
 800105a:	4a06      	ldr	r2, [pc, #24]	; (8001074 <HAL_SPI_MspInit+0x128>)
 800105c:	0019      	movs	r1, r3
 800105e:	0010      	movs	r0, r2
 8001060:	f000 fb06 	bl	8001670 <HAL_GPIO_Init>
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b00b      	add	sp, #44	; 0x2c
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	40013000 	.word	0x40013000
 8001070:	40021000 	.word	0x40021000
 8001074:	50000400 	.word	0x50000400
 8001078:	40003800 	.word	0x40003800

0800107c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	240c      	movs	r4, #12
 8001086:	193b      	adds	r3, r7, r4
 8001088:	0018      	movs	r0, r3
 800108a:	2314      	movs	r3, #20
 800108c:	001a      	movs	r2, r3
 800108e:	2100      	movs	r1, #0
 8001090:	f004 fac3 	bl	800561a <memset>
  if(huart->Instance==USART2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a1c      	ldr	r2, [pc, #112]	; (800110c <HAL_UART_MspInit+0x90>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d131      	bne.n	8001102 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <HAL_UART_MspInit+0x94>)
 80010a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <HAL_UART_MspInit+0x94>)
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	0289      	lsls	r1, r1, #10
 80010a8:	430a      	orrs	r2, r1
 80010aa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <HAL_UART_MspInit+0x94>)
 80010ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <HAL_UART_MspInit+0x94>)
 80010b2:	2101      	movs	r1, #1
 80010b4:	430a      	orrs	r2, r1
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_UART_MspInit+0x94>)
 80010ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010bc:	2201      	movs	r2, #1
 80010be:	4013      	ands	r3, r2
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010c4:	0021      	movs	r1, r4
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	220c      	movs	r2, #12
 80010ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	2202      	movs	r2, #2
 80010d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2203      	movs	r2, #3
 80010dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2204      	movs	r2, #4
 80010e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	187a      	adds	r2, r7, r1
 80010e6:	23a0      	movs	r3, #160	; 0xa0
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	0011      	movs	r1, r2
 80010ec:	0018      	movs	r0, r3
 80010ee:	f000 fabf 	bl	8001670 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	201c      	movs	r0, #28
 80010f8:	f000 fa00 	bl	80014fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010fc:	201c      	movs	r0, #28
 80010fe:	f000 fa12 	bl	8001526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	b009      	add	sp, #36	; 0x24
 8001108:	bd90      	pop	{r4, r7, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	40004400 	.word	0x40004400
 8001110:	40021000 	.word	0x40021000

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001138:	f000 f8f4 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <RTC_IRQHandler+0x14>)
 800114a:	0018      	movs	r0, r3
 800114c:	f001 ff0e 	bl	8002f6c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	2000008c 	.word	0x2000008c

0800115c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_RESERVED_Pin);
 8001160:	2001      	movs	r0, #1
 8001162:	f000 fc3d 	bl	80019e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_RESERVED_Pin);
 8001166:	2002      	movs	r0, #2
 8001168:	f000 fc3a 	bl	80019e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB4_RESERVED_Pin);
 8001176:	2010      	movs	r0, #16
 8001178:	f000 fc32 	bl	80019e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	0018      	movs	r0, r3
 8001182:	f000 fc2d 	bl	80019e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PC13_RESERVED_Pin);
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	019b      	lsls	r3, r3, #6
 800118a:	0018      	movs	r0, r3
 800118c:	f000 fc28 	bl	80019e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <USART2_IRQHandler+0x14>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f002 fd32 	bl	8003c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	20000160 	.word	0x20000160

080011b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <_sbrk+0x5c>)
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <_sbrk+0x60>)
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <_sbrk+0x64>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <_sbrk+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	18d3      	adds	r3, r2, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d207      	bcs.n	80011f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e0:	f004 f9e8 	bl	80055b4 <__errno>
 80011e4:	0003      	movs	r3, r0
 80011e6:	220c      	movs	r2, #12
 80011e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	425b      	negs	r3, r3
 80011ee:	e009      	b.n	8001204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	18d2      	adds	r2, r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <_sbrk+0x64>)
 8001200:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	0018      	movs	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	b006      	add	sp, #24
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20005000 	.word	0x20005000
 8001210:	00000400 	.word	0x00000400
 8001214:	200001e8 	.word	0x200001e8
 8001218:	20000208 	.word	0x20000208

0800121c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800122a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <LoopForever+0x6>)
  ldr r1, =_edata
 800122e:	490e      	ldr	r1, [pc, #56]	; (8001268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001230:	4a0e      	ldr	r2, [pc, #56]	; (800126c <LoopForever+0xe>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001244:	4c0b      	ldr	r4, [pc, #44]	; (8001274 <LoopForever+0x16>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001252:	f7ff ffe3 	bl	800121c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001256:	f004 f9b3 	bl	80055c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125a:	f7ff f92f 	bl	80004bc <main>

0800125e <LoopForever>:

LoopForever:
    b LoopForever
 800125e:	e7fe      	b.n	800125e <LoopForever>
   ldr   r0, =_estack
 8001260:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800126c:	08006104 	.word	0x08006104
  ldr r2, =_sbss
 8001270:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001274:	20000208 	.word	0x20000208

08001278 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC1_COMP_IRQHandler>
	...

0800127c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_Init+0x3c>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_Init+0x3c>)
 800128e:	2140      	movs	r1, #64	; 0x40
 8001290:	430a      	orrs	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001294:	2000      	movs	r0, #0
 8001296:	f000 f811 	bl	80012bc <HAL_InitTick>
 800129a:	1e03      	subs	r3, r0, #0
 800129c:	d003      	beq.n	80012a6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	e001      	b.n	80012aa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012a6:	f7ff fe1d 	bl	8000ee4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781b      	ldrb	r3, [r3, #0]
}
 80012ae:	0018      	movs	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b002      	add	sp, #8
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	40022000 	.word	0x40022000

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_InitTick+0x5c>)
 80012c6:	681c      	ldr	r4, [r3, #0]
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_InitTick+0x60>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	0019      	movs	r1, r3
 80012ce:	23fa      	movs	r3, #250	; 0xfa
 80012d0:	0098      	lsls	r0, r3, #2
 80012d2:	f7fe ff23 	bl	800011c <__udivsi3>
 80012d6:	0003      	movs	r3, r0
 80012d8:	0019      	movs	r1, r3
 80012da:	0020      	movs	r0, r4
 80012dc:	f7fe ff1e 	bl	800011c <__udivsi3>
 80012e0:	0003      	movs	r3, r0
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 f92f 	bl	8001546 <HAL_SYSTICK_Config>
 80012e8:	1e03      	subs	r3, r0, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e00f      	b.n	8001310 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d80b      	bhi.n	800130e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	2301      	movs	r3, #1
 80012fa:	425b      	negs	r3, r3
 80012fc:	2200      	movs	r2, #0
 80012fe:	0018      	movs	r0, r3
 8001300:	f000 f8fc 	bl	80014fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_InitTick+0x64>)
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
}
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	b003      	add	sp, #12
 8001316:	bd90      	pop	{r4, r7, pc}
 8001318:	20000000 	.word	0x20000000
 800131c:	20000008 	.word	0x20000008
 8001320:	20000004 	.word	0x20000004

08001324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_IncTick+0x1c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	001a      	movs	r2, r3
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_IncTick+0x20>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	18d2      	adds	r2, r2, r3
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <HAL_IncTick+0x20>)
 8001336:	601a      	str	r2, [r3, #0]
}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	20000008 	.word	0x20000008
 8001344:	200001ec 	.word	0x200001ec

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b02      	ldr	r3, [pc, #8]	; (8001358 <HAL_GetTick+0x10>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	200001ec 	.word	0x200001ec

0800135c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff fff0 	bl	8001348 <HAL_GetTick>
 8001368:	0003      	movs	r3, r0
 800136a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3301      	adds	r3, #1
 8001374:	d005      	beq.n	8001382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_Delay+0x44>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	001a      	movs	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	189b      	adds	r3, r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	f7ff ffe0 	bl	8001348 <HAL_GetTick>
 8001388:	0002      	movs	r2, r0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	429a      	cmp	r2, r3
 8001392:	d8f7      	bhi.n	8001384 <HAL_Delay+0x28>
  {
  }
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b004      	add	sp, #16
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	20000008 	.word	0x20000008

080013a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	0002      	movs	r2, r0
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	1dfb      	adds	r3, r7, #7
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b7f      	cmp	r3, #127	; 0x7f
 80013b6:	d809      	bhi.n	80013cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	001a      	movs	r2, r3
 80013be:	231f      	movs	r3, #31
 80013c0:	401a      	ands	r2, r3
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_EnableIRQ+0x30>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	4091      	lsls	r1, r2
 80013c8:	000a      	movs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
  }
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b002      	add	sp, #8
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	0002      	movs	r2, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b7f      	cmp	r3, #127	; 0x7f
 80013ec:	d828      	bhi.n	8001440 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ee:	4a2f      	ldr	r2, [pc, #188]	; (80014ac <__NVIC_SetPriority+0xd4>)
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	33c0      	adds	r3, #192	; 0xc0
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	589b      	ldr	r3, [r3, r2]
 80013fe:	1dfa      	adds	r2, r7, #7
 8001400:	7812      	ldrb	r2, [r2, #0]
 8001402:	0011      	movs	r1, r2
 8001404:	2203      	movs	r2, #3
 8001406:	400a      	ands	r2, r1
 8001408:	00d2      	lsls	r2, r2, #3
 800140a:	21ff      	movs	r1, #255	; 0xff
 800140c:	4091      	lsls	r1, r2
 800140e:	000a      	movs	r2, r1
 8001410:	43d2      	mvns	r2, r2
 8001412:	401a      	ands	r2, r3
 8001414:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	019b      	lsls	r3, r3, #6
 800141a:	22ff      	movs	r2, #255	; 0xff
 800141c:	401a      	ands	r2, r3
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	0018      	movs	r0, r3
 8001424:	2303      	movs	r3, #3
 8001426:	4003      	ands	r3, r0
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800142c:	481f      	ldr	r0, [pc, #124]	; (80014ac <__NVIC_SetPriority+0xd4>)
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b25b      	sxtb	r3, r3
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	430a      	orrs	r2, r1
 8001438:	33c0      	adds	r3, #192	; 0xc0
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800143e:	e031      	b.n	80014a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001440:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <__NVIC_SetPriority+0xd8>)
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	0019      	movs	r1, r3
 8001448:	230f      	movs	r3, #15
 800144a:	400b      	ands	r3, r1
 800144c:	3b08      	subs	r3, #8
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3306      	adds	r3, #6
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	18d3      	adds	r3, r2, r3
 8001456:	3304      	adds	r3, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	1dfa      	adds	r2, r7, #7
 800145c:	7812      	ldrb	r2, [r2, #0]
 800145e:	0011      	movs	r1, r2
 8001460:	2203      	movs	r2, #3
 8001462:	400a      	ands	r2, r1
 8001464:	00d2      	lsls	r2, r2, #3
 8001466:	21ff      	movs	r1, #255	; 0xff
 8001468:	4091      	lsls	r1, r2
 800146a:	000a      	movs	r2, r1
 800146c:	43d2      	mvns	r2, r2
 800146e:	401a      	ands	r2, r3
 8001470:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	019b      	lsls	r3, r3, #6
 8001476:	22ff      	movs	r2, #255	; 0xff
 8001478:	401a      	ands	r2, r3
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	0018      	movs	r0, r3
 8001480:	2303      	movs	r3, #3
 8001482:	4003      	ands	r3, r0
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001488:	4809      	ldr	r0, [pc, #36]	; (80014b0 <__NVIC_SetPriority+0xd8>)
 800148a:	1dfb      	adds	r3, r7, #7
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	001c      	movs	r4, r3
 8001490:	230f      	movs	r3, #15
 8001492:	4023      	ands	r3, r4
 8001494:	3b08      	subs	r3, #8
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	430a      	orrs	r2, r1
 800149a:	3306      	adds	r3, #6
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	18c3      	adds	r3, r0, r3
 80014a0:	3304      	adds	r3, #4
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b003      	add	sp, #12
 80014aa:	bd90      	pop	{r4, r7, pc}
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	1e5a      	subs	r2, r3, #1
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	045b      	lsls	r3, r3, #17
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d301      	bcc.n	80014cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c8:	2301      	movs	r3, #1
 80014ca:	e010      	b.n	80014ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <SysTick_Config+0x44>)
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	3a01      	subs	r2, #1
 80014d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d4:	2301      	movs	r3, #1
 80014d6:	425b      	negs	r3, r3
 80014d8:	2103      	movs	r1, #3
 80014da:	0018      	movs	r0, r3
 80014dc:	f7ff ff7c 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <SysTick_Config+0x44>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <SysTick_Config+0x44>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	e000e010 	.word	0xe000e010

080014fc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	210f      	movs	r1, #15
 8001508:	187b      	adds	r3, r7, r1
 800150a:	1c02      	adds	r2, r0, #0
 800150c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	187b      	adds	r3, r7, r1
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b25b      	sxtb	r3, r3
 8001516:	0011      	movs	r1, r2
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff ff5d 	bl	80013d8 <__NVIC_SetPriority>
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b004      	add	sp, #16
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	0002      	movs	r2, r0
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b25b      	sxtb	r3, r3
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff ff33 	bl	80013a4 <__NVIC_EnableIRQ>
}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b002      	add	sp, #8
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff ffaf 	bl	80014b4 <SysTick_Config>
 8001556:	0003      	movs	r3, r0
}
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001568:	230f      	movs	r3, #15
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2225      	movs	r2, #37	; 0x25
 8001574:	5c9b      	ldrb	r3, [r3, r2]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d008      	beq.n	800158e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2204      	movs	r2, #4
 8001580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2224      	movs	r2, #36	; 0x24
 8001586:	2100      	movs	r1, #0
 8001588:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e024      	b.n	80015d8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	210e      	movs	r1, #14
 800159a:	438a      	bics	r2, r1
 800159c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2101      	movs	r1, #1
 80015aa:	438a      	bics	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	221c      	movs	r2, #28
 80015b4:	401a      	ands	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	2101      	movs	r1, #1
 80015bc:	4091      	lsls	r1, r2
 80015be:	000a      	movs	r2, r1
 80015c0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2225      	movs	r2, #37	; 0x25
 80015c6:	2101      	movs	r1, #1
 80015c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2224      	movs	r2, #36	; 0x24
 80015ce:	2100      	movs	r1, #0
 80015d0:	5499      	strb	r1, [r3, r2]

    return status;
 80015d2:	230f      	movs	r3, #15
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80015d8:	0018      	movs	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	b004      	add	sp, #16
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e8:	210f      	movs	r1, #15
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2225      	movs	r2, #37	; 0x25
 80015f4:	5c9b      	ldrb	r3, [r3, r2]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d006      	beq.n	800160a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2204      	movs	r2, #4
 8001600:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001602:	187b      	adds	r3, r7, r1
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	e02a      	b.n	8001660 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	210e      	movs	r1, #14
 8001616:	438a      	bics	r2, r1
 8001618:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2101      	movs	r1, #1
 8001626:	438a      	bics	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	221c      	movs	r2, #28
 8001630:	401a      	ands	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	2101      	movs	r1, #1
 8001638:	4091      	lsls	r1, r2
 800163a:	000a      	movs	r2, r1
 800163c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2225      	movs	r2, #37	; 0x25
 8001642:	2101      	movs	r1, #1
 8001644:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2224      	movs	r2, #36	; 0x24
 800164a:	2100      	movs	r1, #0
 800164c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001652:	2b00      	cmp	r3, #0
 8001654:	d004      	beq.n	8001660 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	0010      	movs	r0, r2
 800165e:	4798      	blx	r3
    }
  }
  return status;
 8001660:	230f      	movs	r3, #15
 8001662:	18fb      	adds	r3, r7, r3
 8001664:	781b      	ldrb	r3, [r3, #0]
}
 8001666:	0018      	movs	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	b004      	add	sp, #16
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001686:	e155      	b.n	8001934 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2101      	movs	r1, #1
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	4091      	lsls	r1, r2
 8001692:	000a      	movs	r2, r1
 8001694:	4013      	ands	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d100      	bne.n	80016a0 <HAL_GPIO_Init+0x30>
 800169e:	e146      	b.n	800192e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2203      	movs	r2, #3
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d005      	beq.n	80016b8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2203      	movs	r2, #3
 80016b2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d130      	bne.n	800171a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	409a      	lsls	r2, r3
 80016c6:	0013      	movs	r3, r2
 80016c8:	43da      	mvns	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	409a      	lsls	r2, r3
 80016da:	0013      	movs	r3, r2
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ee:	2201      	movs	r2, #1
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
 80016f4:	0013      	movs	r3, r2
 80016f6:	43da      	mvns	r2, r3
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	091b      	lsrs	r3, r3, #4
 8001704:	2201      	movs	r2, #1
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
 800170c:	0013      	movs	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2203      	movs	r2, #3
 8001720:	4013      	ands	r3, r2
 8001722:	2b03      	cmp	r3, #3
 8001724:	d017      	beq.n	8001756 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	2203      	movs	r2, #3
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	43da      	mvns	r2, r3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	409a      	lsls	r2, r3
 8001748:	0013      	movs	r3, r2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2203      	movs	r2, #3
 800175c:	4013      	ands	r3, r2
 800175e:	2b02      	cmp	r3, #2
 8001760:	d123      	bne.n	80017aa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	08da      	lsrs	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3208      	adds	r2, #8
 800176a:	0092      	lsls	r2, r2, #2
 800176c:	58d3      	ldr	r3, [r2, r3]
 800176e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2207      	movs	r2, #7
 8001774:	4013      	ands	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	220f      	movs	r2, #15
 800177a:	409a      	lsls	r2, r3
 800177c:	0013      	movs	r3, r2
 800177e:	43da      	mvns	r2, r3
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	691a      	ldr	r2, [r3, #16]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	2107      	movs	r1, #7
 800178e:	400b      	ands	r3, r1
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	409a      	lsls	r2, r3
 8001794:	0013      	movs	r3, r2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	08da      	lsrs	r2, r3, #3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3208      	adds	r2, #8
 80017a4:	0092      	lsls	r2, r2, #2
 80017a6:	6939      	ldr	r1, [r7, #16]
 80017a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	2203      	movs	r2, #3
 80017b6:	409a      	lsls	r2, r3
 80017b8:	0013      	movs	r3, r2
 80017ba:	43da      	mvns	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2203      	movs	r2, #3
 80017c8:	401a      	ands	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	409a      	lsls	r2, r3
 80017d0:	0013      	movs	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	23c0      	movs	r3, #192	; 0xc0
 80017e4:	029b      	lsls	r3, r3, #10
 80017e6:	4013      	ands	r3, r2
 80017e8:	d100      	bne.n	80017ec <HAL_GPIO_Init+0x17c>
 80017ea:	e0a0      	b.n	800192e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ec:	4b57      	ldr	r3, [pc, #348]	; (800194c <HAL_GPIO_Init+0x2dc>)
 80017ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f0:	4b56      	ldr	r3, [pc, #344]	; (800194c <HAL_GPIO_Init+0x2dc>)
 80017f2:	2101      	movs	r1, #1
 80017f4:	430a      	orrs	r2, r1
 80017f6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80017f8:	4a55      	ldr	r2, [pc, #340]	; (8001950 <HAL_GPIO_Init+0x2e0>)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	589b      	ldr	r3, [r3, r2]
 8001804:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2203      	movs	r2, #3
 800180a:	4013      	ands	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	409a      	lsls	r2, r3
 8001812:	0013      	movs	r3, r2
 8001814:	43da      	mvns	r2, r3
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	23a0      	movs	r3, #160	; 0xa0
 8001820:	05db      	lsls	r3, r3, #23
 8001822:	429a      	cmp	r2, r3
 8001824:	d01f      	beq.n	8001866 <HAL_GPIO_Init+0x1f6>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_GPIO_Init+0x2e4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d019      	beq.n	8001862 <HAL_GPIO_Init+0x1f2>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a49      	ldr	r2, [pc, #292]	; (8001958 <HAL_GPIO_Init+0x2e8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_GPIO_Init+0x1ee>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a48      	ldr	r2, [pc, #288]	; (800195c <HAL_GPIO_Init+0x2ec>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d00d      	beq.n	800185a <HAL_GPIO_Init+0x1ea>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a47      	ldr	r2, [pc, #284]	; (8001960 <HAL_GPIO_Init+0x2f0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d007      	beq.n	8001856 <HAL_GPIO_Init+0x1e6>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a46      	ldr	r2, [pc, #280]	; (8001964 <HAL_GPIO_Init+0x2f4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d101      	bne.n	8001852 <HAL_GPIO_Init+0x1e2>
 800184e:	2305      	movs	r3, #5
 8001850:	e00a      	b.n	8001868 <HAL_GPIO_Init+0x1f8>
 8001852:	2306      	movs	r3, #6
 8001854:	e008      	b.n	8001868 <HAL_GPIO_Init+0x1f8>
 8001856:	2304      	movs	r3, #4
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x1f8>
 800185a:	2303      	movs	r3, #3
 800185c:	e004      	b.n	8001868 <HAL_GPIO_Init+0x1f8>
 800185e:	2302      	movs	r3, #2
 8001860:	e002      	b.n	8001868 <HAL_GPIO_Init+0x1f8>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_GPIO_Init+0x1f8>
 8001866:	2300      	movs	r3, #0
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	2103      	movs	r1, #3
 800186c:	400a      	ands	r2, r1
 800186e:	0092      	lsls	r2, r2, #2
 8001870:	4093      	lsls	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001878:	4935      	ldr	r1, [pc, #212]	; (8001950 <HAL_GPIO_Init+0x2e0>)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_GPIO_Init+0x2f8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	43da      	mvns	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	025b      	lsls	r3, r3, #9
 800189e:	4013      	ands	r3, r2
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <HAL_GPIO_Init+0x2f8>)
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_GPIO_Init+0x2f8>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	43da      	mvns	r2, r3
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	029b      	lsls	r3, r3, #10
 80018c8:	4013      	ands	r3, r2
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_GPIO_Init+0x2f8>)
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <HAL_GPIO_Init+0x2f8>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43da      	mvns	r2, r3
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	035b      	lsls	r3, r3, #13
 80018f2:	4013      	ands	r3, r2
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <HAL_GPIO_Init+0x2f8>)
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_GPIO_Init+0x2f8>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	43da      	mvns	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	039b      	lsls	r3, r3, #14
 800191c:	4013      	ands	r3, r2
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_GPIO_Init+0x2f8>)
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	40da      	lsrs	r2, r3
 800193c:	1e13      	subs	r3, r2, #0
 800193e:	d000      	beq.n	8001942 <HAL_GPIO_Init+0x2d2>
 8001940:	e6a2      	b.n	8001688 <HAL_GPIO_Init+0x18>
  }
}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	46c0      	nop			; (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	b006      	add	sp, #24
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000
 8001950:	40010000 	.word	0x40010000
 8001954:	50000400 	.word	0x50000400
 8001958:	50000800 	.word	0x50000800
 800195c:	50000c00 	.word	0x50000c00
 8001960:	50001000 	.word	0x50001000
 8001964:	50001c00 	.word	0x50001c00
 8001968:	40010400 	.word	0x40010400

0800196c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	000a      	movs	r2, r1
 8001976:	1cbb      	adds	r3, r7, #2
 8001978:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	1cba      	adds	r2, r7, #2
 8001980:	8812      	ldrh	r2, [r2, #0]
 8001982:	4013      	ands	r3, r2
 8001984:	d004      	beq.n	8001990 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001986:	230f      	movs	r3, #15
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
 800198e:	e003      	b.n	8001998 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001990:	230f      	movs	r3, #15
 8001992:	18fb      	adds	r3, r7, r3
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001998:	230f      	movs	r3, #15
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	781b      	ldrb	r3, [r3, #0]
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b004      	add	sp, #16
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	0008      	movs	r0, r1
 80019b0:	0011      	movs	r1, r2
 80019b2:	1cbb      	adds	r3, r7, #2
 80019b4:	1c02      	adds	r2, r0, #0
 80019b6:	801a      	strh	r2, [r3, #0]
 80019b8:	1c7b      	adds	r3, r7, #1
 80019ba:	1c0a      	adds	r2, r1, #0
 80019bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019be:	1c7b      	adds	r3, r7, #1
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d004      	beq.n	80019d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c6:	1cbb      	adds	r3, r7, #2
 80019c8:	881a      	ldrh	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80019ce:	e003      	b.n	80019d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80019d0:	1cbb      	adds	r3, r7, #2
 80019d2:	881a      	ldrh	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	0002      	movs	r2, r0
 80019e8:	1dbb      	adds	r3, r7, #6
 80019ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	1dba      	adds	r2, r7, #6
 80019f2:	8812      	ldrh	r2, [r2, #0]
 80019f4:	4013      	ands	r3, r2
 80019f6:	d008      	beq.n	8001a0a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80019fa:	1dba      	adds	r2, r7, #6
 80019fc:	8812      	ldrh	r2, [r2, #0]
 80019fe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a00:	1dbb      	adds	r3, r7, #6
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7ff f9cd 	bl	8000da4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	40010400 	.word	0x40010400

08001a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a18:	b5b0      	push	{r4, r5, r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d102      	bne.n	8001a2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	f000 fbbf 	bl	80021aa <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a2c:	4bc9      	ldr	r3, [pc, #804]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	220c      	movs	r2, #12
 8001a32:	4013      	ands	r3, r2
 8001a34:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a36:	4bc7      	ldr	r3, [pc, #796]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	025b      	lsls	r3, r3, #9
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <HAL_RCC_OscConfig+0x36>
 8001a4c:	e07e      	b.n	8001b4c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d007      	beq.n	8001a64 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	d112      	bne.n	8001a80 <HAL_RCC_OscConfig+0x68>
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	025b      	lsls	r3, r3, #9
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d10d      	bne.n	8001a80 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	4bbb      	ldr	r3, [pc, #748]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	029b      	lsls	r3, r3, #10
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d100      	bne.n	8001a72 <HAL_RCC_OscConfig+0x5a>
 8001a70:	e06b      	b.n	8001b4a <HAL_RCC_OscConfig+0x132>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d167      	bne.n	8001b4a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f000 fb95 	bl	80021aa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	025b      	lsls	r3, r3, #9
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_OscConfig+0x84>
 8001a8c:	4bb1      	ldr	r3, [pc, #708]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4bb0      	ldr	r3, [pc, #704]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	0249      	lsls	r1, r1, #9
 8001a96:	430a      	orrs	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	e027      	b.n	8001aec <HAL_RCC_OscConfig+0xd4>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	23a0      	movs	r3, #160	; 0xa0
 8001aa2:	02db      	lsls	r3, r3, #11
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d10e      	bne.n	8001ac6 <HAL_RCC_OscConfig+0xae>
 8001aa8:	4baa      	ldr	r3, [pc, #680]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4ba9      	ldr	r3, [pc, #676]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001aae:	2180      	movs	r1, #128	; 0x80
 8001ab0:	02c9      	lsls	r1, r1, #11
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	4ba7      	ldr	r3, [pc, #668]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4ba6      	ldr	r3, [pc, #664]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001abc:	2180      	movs	r1, #128	; 0x80
 8001abe:	0249      	lsls	r1, r1, #9
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	e012      	b.n	8001aec <HAL_RCC_OscConfig+0xd4>
 8001ac6:	4ba3      	ldr	r3, [pc, #652]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4ba2      	ldr	r3, [pc, #648]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001acc:	49a2      	ldr	r1, [pc, #648]	; (8001d58 <HAL_RCC_OscConfig+0x340>)
 8001ace:	400a      	ands	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	4ba0      	ldr	r3, [pc, #640]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	025b      	lsls	r3, r3, #9
 8001ada:	4013      	ands	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4b9c      	ldr	r3, [pc, #624]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b9b      	ldr	r3, [pc, #620]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001ae6:	499d      	ldr	r1, [pc, #628]	; (8001d5c <HAL_RCC_OscConfig+0x344>)
 8001ae8:	400a      	ands	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d015      	beq.n	8001b20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fc28 	bl	8001348 <HAL_GetTick>
 8001af8:	0003      	movs	r3, r0
 8001afa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001afc:	e009      	b.n	8001b12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001afe:	f7ff fc23 	bl	8001348 <HAL_GetTick>
 8001b02:	0002      	movs	r2, r0
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b64      	cmp	r3, #100	; 0x64
 8001b0a:	d902      	bls.n	8001b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	f000 fb4c 	bl	80021aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b12:	4b90      	ldr	r3, [pc, #576]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	029b      	lsls	r3, r3, #10
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d0ef      	beq.n	8001afe <HAL_RCC_OscConfig+0xe6>
 8001b1e:	e015      	b.n	8001b4c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fc12 	bl	8001348 <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2a:	f7ff fc0d 	bl	8001348 <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b64      	cmp	r3, #100	; 0x64
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e336      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b3c:	4b85      	ldr	r3, [pc, #532]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	029b      	lsls	r3, r3, #10
 8001b44:	4013      	ands	r3, r2
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x112>
 8001b48:	e000      	b.n	8001b4c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2202      	movs	r2, #2
 8001b52:	4013      	ands	r3, r2
 8001b54:	d100      	bne.n	8001b58 <HAL_RCC_OscConfig+0x140>
 8001b56:	e099      	b.n	8001c8c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	2220      	movs	r2, #32
 8001b62:	4013      	ands	r3, r2
 8001b64:	d009      	beq.n	8001b7a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001b66:	4b7b      	ldr	r3, [pc, #492]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b7a      	ldr	r3, [pc, #488]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001b6c:	2120      	movs	r1, #32
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	2220      	movs	r2, #32
 8001b76:	4393      	bics	r3, r2
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	d13e      	bne.n	8001c04 <HAL_RCC_OscConfig+0x1ec>
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d13b      	bne.n	8001c04 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001b8c:	4b71      	ldr	r3, [pc, #452]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2204      	movs	r2, #4
 8001b92:	4013      	ands	r3, r2
 8001b94:	d004      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x188>
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e304      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b6c      	ldr	r3, [pc, #432]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4a6e      	ldr	r2, [pc, #440]	; (8001d60 <HAL_RCC_OscConfig+0x348>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	0019      	movs	r1, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	021a      	lsls	r2, r3, #8
 8001bb0:	4b68      	ldr	r3, [pc, #416]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001bb6:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2209      	movs	r2, #9
 8001bbc:	4393      	bics	r3, r2
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bc8:	f000 fc42 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 8001bcc:	0001      	movs	r1, r0
 8001bce:	4b61      	ldr	r3, [pc, #388]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	4a62      	ldr	r2, [pc, #392]	; (8001d64 <HAL_RCC_OscConfig+0x34c>)
 8001bda:	5cd3      	ldrb	r3, [r2, r3]
 8001bdc:	000a      	movs	r2, r1
 8001bde:	40da      	lsrs	r2, r3
 8001be0:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <HAL_RCC_OscConfig+0x350>)
 8001be2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001be4:	4b61      	ldr	r3, [pc, #388]	; (8001d6c <HAL_RCC_OscConfig+0x354>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2513      	movs	r5, #19
 8001bea:	197c      	adds	r4, r7, r5
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7ff fb65 	bl	80012bc <HAL_InitTick>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001bf6:	197b      	adds	r3, r7, r5
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d046      	beq.n	8001c8c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001bfe:	197b      	adds	r3, r7, r5
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	e2d2      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d027      	beq.n	8001c5a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c0a:	4b52      	ldr	r3, [pc, #328]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2209      	movs	r2, #9
 8001c10:	4393      	bics	r3, r2
 8001c12:	0019      	movs	r1, r3
 8001c14:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fb94 	bl	8001348 <HAL_GetTick>
 8001c20:	0003      	movs	r3, r0
 8001c22:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c26:	f7ff fb8f 	bl	8001348 <HAL_GetTick>
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e2b8      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c38:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d0f1      	beq.n	8001c26 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c42:	4b44      	ldr	r3, [pc, #272]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4a46      	ldr	r2, [pc, #280]	; (8001d60 <HAL_RCC_OscConfig+0x348>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	021a      	lsls	r2, r3, #8
 8001c52:	4b40      	ldr	r3, [pc, #256]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001c54:	430a      	orrs	r2, r1
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	e018      	b.n	8001c8c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5a:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001c60:	2101      	movs	r1, #1
 8001c62:	438a      	bics	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7ff fb6f 	bl	8001348 <HAL_GetTick>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c70:	f7ff fb6a 	bl	8001348 <HAL_GetTick>
 8001c74:	0002      	movs	r2, r0
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e293      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c82:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2204      	movs	r2, #4
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d1f1      	bne.n	8001c70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2210      	movs	r2, #16
 8001c92:	4013      	ands	r3, r2
 8001c94:	d100      	bne.n	8001c98 <HAL_RCC_OscConfig+0x280>
 8001c96:	e0a2      	b.n	8001dde <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d140      	bne.n	8001d20 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c9e:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d005      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x29e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e279      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb6:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4a2d      	ldr	r2, [pc, #180]	; (8001d70 <HAL_RCC_OscConfig+0x358>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc4:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cca:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	0a19      	lsrs	r1, r3, #8
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	061a      	lsls	r2, r3, #24
 8001cd8:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	0b5b      	lsrs	r3, r3, #13
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	2280      	movs	r2, #128	; 0x80
 8001ce8:	0212      	lsls	r2, r2, #8
 8001cea:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	400b      	ands	r3, r1
 8001cf6:	491b      	ldr	r1, [pc, #108]	; (8001d64 <HAL_RCC_OscConfig+0x34c>)
 8001cf8:	5ccb      	ldrb	r3, [r1, r3]
 8001cfa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_RCC_OscConfig+0x350>)
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d00:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <HAL_RCC_OscConfig+0x354>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2513      	movs	r5, #19
 8001d06:	197c      	adds	r4, r7, r5
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f7ff fad7 	bl	80012bc <HAL_InitTick>
 8001d0e:	0003      	movs	r3, r0
 8001d10:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d12:	197b      	adds	r3, r7, r5
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d061      	beq.n	8001dde <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001d1a:	197b      	adds	r3, r7, r5
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	e244      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d040      	beq.n	8001daa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_OscConfig+0x33c>)
 8001d2e:	2180      	movs	r1, #128	; 0x80
 8001d30:	0049      	lsls	r1, r1, #1
 8001d32:	430a      	orrs	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7ff fb07 	bl	8001348 <HAL_GetTick>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d3e:	e019      	b.n	8001d74 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d40:	f7ff fb02 	bl	8001348 <HAL_GetTick>
 8001d44:	0002      	movs	r2, r0
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d912      	bls.n	8001d74 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e22b      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	40021000 	.word	0x40021000
 8001d58:	fffeffff 	.word	0xfffeffff
 8001d5c:	fffbffff 	.word	0xfffbffff
 8001d60:	ffffe0ff 	.word	0xffffe0ff
 8001d64:	08006054 	.word	0x08006054
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004
 8001d70:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d74:	4bca      	ldr	r3, [pc, #808]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d0df      	beq.n	8001d40 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d80:	4bc7      	ldr	r3, [pc, #796]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	4ac7      	ldr	r2, [pc, #796]	; (80020a4 <HAL_RCC_OscConfig+0x68c>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	0019      	movs	r1, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d8e:	4bc4      	ldr	r3, [pc, #784]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001d90:	430a      	orrs	r2, r1
 8001d92:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d94:	4bc2      	ldr	r3, [pc, #776]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	0a19      	lsrs	r1, r3, #8
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	061a      	lsls	r2, r3, #24
 8001da2:	4bbf      	ldr	r3, [pc, #764]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001da4:	430a      	orrs	r2, r1
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	e019      	b.n	8001dde <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001daa:	4bbd      	ldr	r3, [pc, #756]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4bbc      	ldr	r3, [pc, #752]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001db0:	49bd      	ldr	r1, [pc, #756]	; (80020a8 <HAL_RCC_OscConfig+0x690>)
 8001db2:	400a      	ands	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff fac7 	bl	8001348 <HAL_GetTick>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fac2 	bl	8001348 <HAL_GetTick>
 8001dc4:	0002      	movs	r2, r0
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1eb      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dd2:	4bb3      	ldr	r3, [pc, #716]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2208      	movs	r2, #8
 8001de4:	4013      	ands	r3, r2
 8001de6:	d036      	beq.n	8001e56 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d019      	beq.n	8001e24 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df0:	4bab      	ldr	r3, [pc, #684]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001df2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001df4:	4baa      	ldr	r3, [pc, #680]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001df6:	2101      	movs	r1, #1
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfc:	f7ff faa4 	bl	8001348 <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e06:	f7ff fa9f 	bl	8001348 <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e1c8      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e18:	4ba1      	ldr	r3, [pc, #644]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d0f1      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3ee>
 8001e22:	e018      	b.n	8001e56 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e24:	4b9e      	ldr	r3, [pc, #632]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001e26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e28:	4b9d      	ldr	r3, [pc, #628]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	438a      	bics	r2, r1
 8001e2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e30:	f7ff fa8a 	bl	8001348 <HAL_GetTick>
 8001e34:	0003      	movs	r3, r0
 8001e36:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3a:	f7ff fa85 	bl	8001348 <HAL_GetTick>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e1ae      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e4c:	4b94      	ldr	r3, [pc, #592]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e50:	2202      	movs	r2, #2
 8001e52:	4013      	ands	r3, r2
 8001e54:	d1f1      	bne.n	8001e3a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d100      	bne.n	8001e62 <HAL_RCC_OscConfig+0x44a>
 8001e60:	e0ae      	b.n	8001fc0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e62:	2023      	movs	r0, #35	; 0x23
 8001e64:	183b      	adds	r3, r7, r0
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6a:	4b8d      	ldr	r3, [pc, #564]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	055b      	lsls	r3, r3, #21
 8001e72:	4013      	ands	r3, r2
 8001e74:	d109      	bne.n	8001e8a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	4b8a      	ldr	r3, [pc, #552]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e7a:	4b89      	ldr	r3, [pc, #548]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001e7c:	2180      	movs	r1, #128	; 0x80
 8001e7e:	0549      	lsls	r1, r1, #21
 8001e80:	430a      	orrs	r2, r1
 8001e82:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e84:	183b      	adds	r3, r7, r0
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b88      	ldr	r3, [pc, #544]	; (80020ac <HAL_RCC_OscConfig+0x694>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4013      	ands	r3, r2
 8001e94:	d11a      	bne.n	8001ecc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e96:	4b85      	ldr	r3, [pc, #532]	; (80020ac <HAL_RCC_OscConfig+0x694>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b84      	ldr	r3, [pc, #528]	; (80020ac <HAL_RCC_OscConfig+0x694>)
 8001e9c:	2180      	movs	r1, #128	; 0x80
 8001e9e:	0049      	lsls	r1, r1, #1
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea4:	f7ff fa50 	bl	8001348 <HAL_GetTick>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eae:	f7ff fa4b 	bl	8001348 <HAL_GetTick>
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b64      	cmp	r3, #100	; 0x64
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e174      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	4b7a      	ldr	r3, [pc, #488]	; (80020ac <HAL_RCC_OscConfig+0x694>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x4d0>
 8001ed8:	4b71      	ldr	r3, [pc, #452]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001eda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001edc:	4b70      	ldr	r3, [pc, #448]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	0049      	lsls	r1, r1, #1
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	651a      	str	r2, [r3, #80]	; 0x50
 8001ee6:	e031      	b.n	8001f4c <HAL_RCC_OscConfig+0x534>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10c      	bne.n	8001f0a <HAL_RCC_OscConfig+0x4f2>
 8001ef0:	4b6b      	ldr	r3, [pc, #428]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001ef2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001ef6:	496c      	ldr	r1, [pc, #432]	; (80020a8 <HAL_RCC_OscConfig+0x690>)
 8001ef8:	400a      	ands	r2, r1
 8001efa:	651a      	str	r2, [r3, #80]	; 0x50
 8001efc:	4b68      	ldr	r3, [pc, #416]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001efe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f00:	4b67      	ldr	r3, [pc, #412]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001f02:	496b      	ldr	r1, [pc, #428]	; (80020b0 <HAL_RCC_OscConfig+0x698>)
 8001f04:	400a      	ands	r2, r1
 8001f06:	651a      	str	r2, [r3, #80]	; 0x50
 8001f08:	e020      	b.n	8001f4c <HAL_RCC_OscConfig+0x534>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	23a0      	movs	r3, #160	; 0xa0
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d10e      	bne.n	8001f34 <HAL_RCC_OscConfig+0x51c>
 8001f16:	4b62      	ldr	r3, [pc, #392]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f1a:	4b61      	ldr	r3, [pc, #388]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	00c9      	lsls	r1, r1, #3
 8001f20:	430a      	orrs	r2, r1
 8001f22:	651a      	str	r2, [r3, #80]	; 0x50
 8001f24:	4b5e      	ldr	r3, [pc, #376]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001f26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f28:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001f2a:	2180      	movs	r1, #128	; 0x80
 8001f2c:	0049      	lsls	r1, r1, #1
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	651a      	str	r2, [r3, #80]	; 0x50
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0x534>
 8001f34:	4b5a      	ldr	r3, [pc, #360]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001f36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f38:	4b59      	ldr	r3, [pc, #356]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001f3a:	495b      	ldr	r1, [pc, #364]	; (80020a8 <HAL_RCC_OscConfig+0x690>)
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	651a      	str	r2, [r3, #80]	; 0x50
 8001f40:	4b57      	ldr	r3, [pc, #348]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001f42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f44:	4b56      	ldr	r3, [pc, #344]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001f46:	495a      	ldr	r1, [pc, #360]	; (80020b0 <HAL_RCC_OscConfig+0x698>)
 8001f48:	400a      	ands	r2, r1
 8001f4a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d015      	beq.n	8001f80 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f54:	f7ff f9f8 	bl	8001348 <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f5c:	e009      	b.n	8001f72 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7ff f9f3 	bl	8001348 <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	4a52      	ldr	r2, [pc, #328]	; (80020b4 <HAL_RCC_OscConfig+0x69c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e11b      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f72:	4b4b      	ldr	r3, [pc, #300]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001f74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d0ef      	beq.n	8001f5e <HAL_RCC_OscConfig+0x546>
 8001f7e:	e014      	b.n	8001faa <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f80:	f7ff f9e2 	bl	8001348 <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f88:	e009      	b.n	8001f9e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7ff f9dd 	bl	8001348 <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	4a47      	ldr	r2, [pc, #284]	; (80020b4 <HAL_RCC_OscConfig+0x69c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e105      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f9e:	4b40      	ldr	r3, [pc, #256]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001fa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d1ef      	bne.n	8001f8a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001faa:	2323      	movs	r3, #35	; 0x23
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb4:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fb8:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001fba:	493f      	ldr	r1, [pc, #252]	; (80020b8 <HAL_RCC_OscConfig+0x6a0>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d049      	beq.n	800205e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d026      	beq.n	8002020 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001fd2:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001fd8:	2101      	movs	r1, #1
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	4b30      	ldr	r3, [pc, #192]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe2:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fea:	4b34      	ldr	r3, [pc, #208]	; (80020bc <HAL_RCC_OscConfig+0x6a4>)
 8001fec:	6a1a      	ldr	r2, [r3, #32]
 8001fee:	4b33      	ldr	r3, [pc, #204]	; (80020bc <HAL_RCC_OscConfig+0x6a4>)
 8001ff0:	2180      	movs	r1, #128	; 0x80
 8001ff2:	0189      	lsls	r1, r1, #6
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff f9a6 	bl	8001348 <HAL_GetTick>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002002:	f7ff f9a1 	bl	8001348 <HAL_GetTick>
 8002006:	0002      	movs	r2, r0
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e0ca      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002014:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2202      	movs	r2, #2
 800201a:	4013      	ands	r3, r2
 800201c:	d0f1      	beq.n	8002002 <HAL_RCC_OscConfig+0x5ea>
 800201e:	e01e      	b.n	800205e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002020:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8002026:	2101      	movs	r1, #1
 8002028:	438a      	bics	r2, r1
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_RCC_OscConfig+0x6a4>)
 800202e:	6a1a      	ldr	r2, [r3, #32]
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <HAL_RCC_OscConfig+0x6a4>)
 8002032:	4923      	ldr	r1, [pc, #140]	; (80020c0 <HAL_RCC_OscConfig+0x6a8>)
 8002034:	400a      	ands	r2, r1
 8002036:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7ff f986 	bl	8001348 <HAL_GetTick>
 800203c:	0003      	movs	r3, r0
 800203e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002042:	f7ff f981 	bl	8001348 <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e0aa      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2202      	movs	r2, #2
 800205a:	4013      	ands	r3, r2
 800205c:	d1f1      	bne.n	8002042 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	2b00      	cmp	r3, #0
 8002064:	d100      	bne.n	8002068 <HAL_RCC_OscConfig+0x650>
 8002066:	e09f      	b.n	80021a8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d100      	bne.n	8002070 <HAL_RCC_OscConfig+0x658>
 800206e:	e078      	b.n	8002162 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	2b02      	cmp	r3, #2
 8002076:	d159      	bne.n	800212c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_RCC_OscConfig+0x688>)
 800207e:	4911      	ldr	r1, [pc, #68]	; (80020c4 <HAL_RCC_OscConfig+0x6ac>)
 8002080:	400a      	ands	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff f960 	bl	8001348 <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800208c:	e01c      	b.n	80020c8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208e:	f7ff f95b 	bl	8001348 <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d915      	bls.n	80020c8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e084      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
 80020a0:	40021000 	.word	0x40021000
 80020a4:	ffff1fff 	.word	0xffff1fff
 80020a8:	fffffeff 	.word	0xfffffeff
 80020ac:	40007000 	.word	0x40007000
 80020b0:	fffffbff 	.word	0xfffffbff
 80020b4:	00001388 	.word	0x00001388
 80020b8:	efffffff 	.word	0xefffffff
 80020bc:	40010000 	.word	0x40010000
 80020c0:	ffffdfff 	.word	0xffffdfff
 80020c4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020c8:	4b3a      	ldr	r3, [pc, #232]	; (80021b4 <HAL_RCC_OscConfig+0x79c>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	049b      	lsls	r3, r3, #18
 80020d0:	4013      	ands	r3, r2
 80020d2:	d1dc      	bne.n	800208e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d4:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <HAL_RCC_OscConfig+0x79c>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a37      	ldr	r2, [pc, #220]	; (80021b8 <HAL_RCC_OscConfig+0x7a0>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ec:	431a      	orrs	r2, r3
 80020ee:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <HAL_RCC_OscConfig+0x79c>)
 80020f0:	430a      	orrs	r2, r1
 80020f2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f4:	4b2f      	ldr	r3, [pc, #188]	; (80021b4 <HAL_RCC_OscConfig+0x79c>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <HAL_RCC_OscConfig+0x79c>)
 80020fa:	2180      	movs	r1, #128	; 0x80
 80020fc:	0449      	lsls	r1, r1, #17
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7ff f921 	bl	8001348 <HAL_GetTick>
 8002106:	0003      	movs	r3, r0
 8002108:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210c:	f7ff f91c 	bl	8001348 <HAL_GetTick>
 8002110:	0002      	movs	r2, r0
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e045      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800211e:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_RCC_OscConfig+0x79c>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	049b      	lsls	r3, r3, #18
 8002126:	4013      	ands	r3, r2
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0x6f4>
 800212a:	e03d      	b.n	80021a8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212c:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_RCC_OscConfig+0x79c>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_RCC_OscConfig+0x79c>)
 8002132:	4922      	ldr	r1, [pc, #136]	; (80021bc <HAL_RCC_OscConfig+0x7a4>)
 8002134:	400a      	ands	r2, r1
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff f906 	bl	8001348 <HAL_GetTick>
 800213c:	0003      	movs	r3, r0
 800213e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002142:	f7ff f901 	bl	8001348 <HAL_GetTick>
 8002146:	0002      	movs	r2, r0
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e02a      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_RCC_OscConfig+0x79c>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	049b      	lsls	r3, r3, #18
 800215c:	4013      	ands	r3, r2
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_OscConfig+0x72a>
 8002160:	e022      	b.n	80021a8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e01d      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_RCC_OscConfig+0x79c>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	025b      	lsls	r3, r3, #9
 800217a:	401a      	ands	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	429a      	cmp	r2, r3
 8002182:	d10f      	bne.n	80021a4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	23f0      	movs	r3, #240	; 0xf0
 8002188:	039b      	lsls	r3, r3, #14
 800218a:	401a      	ands	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d107      	bne.n	80021a4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	23c0      	movs	r3, #192	; 0xc0
 8002198:	041b      	lsls	r3, r3, #16
 800219a:	401a      	ands	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	0018      	movs	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b00a      	add	sp, #40	; 0x28
 80021b0:	bdb0      	pop	{r4, r5, r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	40021000 	.word	0x40021000
 80021b8:	ff02ffff 	.word	0xff02ffff
 80021bc:	feffffff 	.word	0xfeffffff

080021c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c0:	b5b0      	push	{r4, r5, r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e128      	b.n	8002426 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021d4:	4b96      	ldr	r3, [pc, #600]	; (8002430 <HAL_RCC_ClockConfig+0x270>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2201      	movs	r2, #1
 80021da:	4013      	ands	r3, r2
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d91e      	bls.n	8002220 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b93      	ldr	r3, [pc, #588]	; (8002430 <HAL_RCC_ClockConfig+0x270>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2201      	movs	r2, #1
 80021e8:	4393      	bics	r3, r2
 80021ea:	0019      	movs	r1, r3
 80021ec:	4b90      	ldr	r3, [pc, #576]	; (8002430 <HAL_RCC_ClockConfig+0x270>)
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021f4:	f7ff f8a8 	bl	8001348 <HAL_GetTick>
 80021f8:	0003      	movs	r3, r0
 80021fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fc:	e009      	b.n	8002212 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fe:	f7ff f8a3 	bl	8001348 <HAL_GetTick>
 8002202:	0002      	movs	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	4a8a      	ldr	r2, [pc, #552]	; (8002434 <HAL_RCC_ClockConfig+0x274>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e109      	b.n	8002426 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b87      	ldr	r3, [pc, #540]	; (8002430 <HAL_RCC_ClockConfig+0x270>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	4013      	ands	r3, r2
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d1ee      	bne.n	80021fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2202      	movs	r2, #2
 8002226:	4013      	ands	r3, r2
 8002228:	d009      	beq.n	800223e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800222a:	4b83      	ldr	r3, [pc, #524]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	22f0      	movs	r2, #240	; 0xf0
 8002230:	4393      	bics	r3, r2
 8002232:	0019      	movs	r1, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	4b7f      	ldr	r3, [pc, #508]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 800223a:	430a      	orrs	r2, r1
 800223c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2201      	movs	r2, #1
 8002244:	4013      	ands	r3, r2
 8002246:	d100      	bne.n	800224a <HAL_RCC_ClockConfig+0x8a>
 8002248:	e089      	b.n	800235e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002252:	4b79      	ldr	r3, [pc, #484]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	029b      	lsls	r3, r3, #10
 800225a:	4013      	ands	r3, r2
 800225c:	d120      	bne.n	80022a0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0e1      	b.n	8002426 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800226a:	4b73      	ldr	r3, [pc, #460]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	049b      	lsls	r3, r3, #18
 8002272:	4013      	ands	r3, r2
 8002274:	d114      	bne.n	80022a0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e0d5      	b.n	8002426 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d106      	bne.n	8002290 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002282:	4b6d      	ldr	r3, [pc, #436]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2204      	movs	r2, #4
 8002288:	4013      	ands	r3, r2
 800228a:	d109      	bne.n	80022a0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0ca      	b.n	8002426 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002290:	4b69      	ldr	r3, [pc, #420]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4013      	ands	r3, r2
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0c2      	b.n	8002426 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a0:	4b65      	ldr	r3, [pc, #404]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2203      	movs	r2, #3
 80022a6:	4393      	bics	r3, r2
 80022a8:	0019      	movs	r1, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	4b62      	ldr	r3, [pc, #392]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 80022b0:	430a      	orrs	r2, r1
 80022b2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b4:	f7ff f848 	bl	8001348 <HAL_GetTick>
 80022b8:	0003      	movs	r3, r0
 80022ba:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d111      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022c4:	e009      	b.n	80022da <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c6:	f7ff f83f 	bl	8001348 <HAL_GetTick>
 80022ca:	0002      	movs	r2, r0
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	4a58      	ldr	r2, [pc, #352]	; (8002434 <HAL_RCC_ClockConfig+0x274>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e0a5      	b.n	8002426 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022da:	4b57      	ldr	r3, [pc, #348]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	220c      	movs	r2, #12
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d1ef      	bne.n	80022c6 <HAL_RCC_ClockConfig+0x106>
 80022e6:	e03a      	b.n	800235e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d111      	bne.n	8002314 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f0:	e009      	b.n	8002306 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f2:	f7ff f829 	bl	8001348 <HAL_GetTick>
 80022f6:	0002      	movs	r2, r0
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	4a4d      	ldr	r2, [pc, #308]	; (8002434 <HAL_RCC_ClockConfig+0x274>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e08f      	b.n	8002426 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002306:	4b4c      	ldr	r3, [pc, #304]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	220c      	movs	r2, #12
 800230c:	4013      	ands	r3, r2
 800230e:	2b0c      	cmp	r3, #12
 8002310:	d1ef      	bne.n	80022f2 <HAL_RCC_ClockConfig+0x132>
 8002312:	e024      	b.n	800235e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d11b      	bne.n	8002354 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800231c:	e009      	b.n	8002332 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231e:	f7ff f813 	bl	8001348 <HAL_GetTick>
 8002322:	0002      	movs	r2, r0
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	4a42      	ldr	r2, [pc, #264]	; (8002434 <HAL_RCC_ClockConfig+0x274>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e079      	b.n	8002426 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002332:	4b41      	ldr	r3, [pc, #260]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	220c      	movs	r2, #12
 8002338:	4013      	ands	r3, r2
 800233a:	2b04      	cmp	r3, #4
 800233c:	d1ef      	bne.n	800231e <HAL_RCC_ClockConfig+0x15e>
 800233e:	e00e      	b.n	800235e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7ff f802 	bl	8001348 <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	4a3a      	ldr	r2, [pc, #232]	; (8002434 <HAL_RCC_ClockConfig+0x274>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e068      	b.n	8002426 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002354:	4b38      	ldr	r3, [pc, #224]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	220c      	movs	r2, #12
 800235a:	4013      	ands	r3, r2
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800235e:	4b34      	ldr	r3, [pc, #208]	; (8002430 <HAL_RCC_ClockConfig+0x270>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2201      	movs	r2, #1
 8002364:	4013      	ands	r3, r2
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d21e      	bcs.n	80023aa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236c:	4b30      	ldr	r3, [pc, #192]	; (8002430 <HAL_RCC_ClockConfig+0x270>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2201      	movs	r2, #1
 8002372:	4393      	bics	r3, r2
 8002374:	0019      	movs	r1, r3
 8002376:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <HAL_RCC_ClockConfig+0x270>)
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800237e:	f7fe ffe3 	bl	8001348 <HAL_GetTick>
 8002382:	0003      	movs	r3, r0
 8002384:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	e009      	b.n	800239c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002388:	f7fe ffde 	bl	8001348 <HAL_GetTick>
 800238c:	0002      	movs	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	4a28      	ldr	r2, [pc, #160]	; (8002434 <HAL_RCC_ClockConfig+0x274>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e044      	b.n	8002426 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_RCC_ClockConfig+0x270>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2201      	movs	r2, #1
 80023a2:	4013      	ands	r3, r2
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d1ee      	bne.n	8002388 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2204      	movs	r2, #4
 80023b0:	4013      	ands	r3, r2
 80023b2:	d009      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b4:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a20      	ldr	r2, [pc, #128]	; (800243c <HAL_RCC_ClockConfig+0x27c>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 80023c4:	430a      	orrs	r2, r1
 80023c6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2208      	movs	r2, #8
 80023ce:	4013      	ands	r3, r2
 80023d0:	d00a      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4a1a      	ldr	r2, [pc, #104]	; (8002440 <HAL_RCC_ClockConfig+0x280>)
 80023d8:	4013      	ands	r3, r2
 80023da:	0019      	movs	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	00da      	lsls	r2, r3, #3
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 80023e4:	430a      	orrs	r2, r1
 80023e6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023e8:	f000 f832 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 80023ec:	0001      	movs	r1, r0
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_RCC_ClockConfig+0x278>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	220f      	movs	r2, #15
 80023f6:	4013      	ands	r3, r2
 80023f8:	4a12      	ldr	r2, [pc, #72]	; (8002444 <HAL_RCC_ClockConfig+0x284>)
 80023fa:	5cd3      	ldrb	r3, [r2, r3]
 80023fc:	000a      	movs	r2, r1
 80023fe:	40da      	lsrs	r2, r3
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_RCC_ClockConfig+0x288>)
 8002402:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_RCC_ClockConfig+0x28c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	250b      	movs	r5, #11
 800240a:	197c      	adds	r4, r7, r5
 800240c:	0018      	movs	r0, r3
 800240e:	f7fe ff55 	bl	80012bc <HAL_InitTick>
 8002412:	0003      	movs	r3, r0
 8002414:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002416:	197b      	adds	r3, r7, r5
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800241e:	197b      	adds	r3, r7, r5
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	e000      	b.n	8002426 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	0018      	movs	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	b004      	add	sp, #16
 800242c:	bdb0      	pop	{r4, r5, r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	40022000 	.word	0x40022000
 8002434:	00001388 	.word	0x00001388
 8002438:	40021000 	.word	0x40021000
 800243c:	fffff8ff 	.word	0xfffff8ff
 8002440:	ffffc7ff 	.word	0xffffc7ff
 8002444:	08006054 	.word	0x08006054
 8002448:	20000000 	.word	0x20000000
 800244c:	20000004 	.word	0x20000004

08002450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002450:	b5b0      	push	{r4, r5, r7, lr}
 8002452:	b08e      	sub	sp, #56	; 0x38
 8002454:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002456:	4b4c      	ldr	r3, [pc, #304]	; (8002588 <HAL_RCC_GetSysClockFreq+0x138>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800245c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800245e:	230c      	movs	r3, #12
 8002460:	4013      	ands	r3, r2
 8002462:	2b0c      	cmp	r3, #12
 8002464:	d014      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x40>
 8002466:	d900      	bls.n	800246a <HAL_RCC_GetSysClockFreq+0x1a>
 8002468:	e07b      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x112>
 800246a:	2b04      	cmp	r3, #4
 800246c:	d002      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x24>
 800246e:	2b08      	cmp	r3, #8
 8002470:	d00b      	beq.n	800248a <HAL_RCC_GetSysClockFreq+0x3a>
 8002472:	e076      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002474:	4b44      	ldr	r3, [pc, #272]	; (8002588 <HAL_RCC_GetSysClockFreq+0x138>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2210      	movs	r2, #16
 800247a:	4013      	ands	r3, r2
 800247c:	d002      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800247e:	4b43      	ldr	r3, [pc, #268]	; (800258c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002480:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002482:	e07c      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002484:	4b42      	ldr	r3, [pc, #264]	; (8002590 <HAL_RCC_GetSysClockFreq+0x140>)
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002488:	e079      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800248a:	4b42      	ldr	r3, [pc, #264]	; (8002594 <HAL_RCC_GetSysClockFreq+0x144>)
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800248e:	e076      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	0c9a      	lsrs	r2, r3, #18
 8002494:	230f      	movs	r3, #15
 8002496:	401a      	ands	r2, r3
 8002498:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_GetSysClockFreq+0x148>)
 800249a:	5c9b      	ldrb	r3, [r3, r2]
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a0:	0d9a      	lsrs	r2, r3, #22
 80024a2:	2303      	movs	r3, #3
 80024a4:	4013      	ands	r3, r2
 80024a6:	3301      	adds	r3, #1
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024aa:	4b37      	ldr	r3, [pc, #220]	; (8002588 <HAL_RCC_GetSysClockFreq+0x138>)
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	025b      	lsls	r3, r3, #9
 80024b2:	4013      	ands	r3, r2
 80024b4:	d01a      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	4a35      	ldr	r2, [pc, #212]	; (8002594 <HAL_RCC_GetSysClockFreq+0x144>)
 80024c0:	2300      	movs	r3, #0
 80024c2:	69b8      	ldr	r0, [r7, #24]
 80024c4:	69f9      	ldr	r1, [r7, #28]
 80024c6:	f7fd fed5 	bl	8000274 <__aeabi_lmul>
 80024ca:	0002      	movs	r2, r0
 80024cc:	000b      	movs	r3, r1
 80024ce:	0010      	movs	r0, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f7fd fea9 	bl	8000234 <__aeabi_uldivmod>
 80024e2:	0002      	movs	r2, r0
 80024e4:	000b      	movs	r3, r1
 80024e6:	0013      	movs	r3, r2
 80024e8:	637b      	str	r3, [r7, #52]	; 0x34
 80024ea:	e037      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80024ec:	4b26      	ldr	r3, [pc, #152]	; (8002588 <HAL_RCC_GetSysClockFreq+0x138>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2210      	movs	r2, #16
 80024f2:	4013      	ands	r3, r2
 80024f4:	d01a      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80024f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4a23      	ldr	r2, [pc, #140]	; (800258c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002500:	2300      	movs	r3, #0
 8002502:	68b8      	ldr	r0, [r7, #8]
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	f7fd feb5 	bl	8000274 <__aeabi_lmul>
 800250a:	0002      	movs	r2, r0
 800250c:	000b      	movs	r3, r1
 800250e:	0010      	movs	r0, r2
 8002510:	0019      	movs	r1, r3
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	603b      	str	r3, [r7, #0]
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f7fd fe89 	bl	8000234 <__aeabi_uldivmod>
 8002522:	0002      	movs	r2, r0
 8002524:	000b      	movs	r3, r1
 8002526:	0013      	movs	r3, r2
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
 800252a:	e017      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	0018      	movs	r0, r3
 8002530:	2300      	movs	r3, #0
 8002532:	0019      	movs	r1, r3
 8002534:	4a16      	ldr	r2, [pc, #88]	; (8002590 <HAL_RCC_GetSysClockFreq+0x140>)
 8002536:	2300      	movs	r3, #0
 8002538:	f7fd fe9c 	bl	8000274 <__aeabi_lmul>
 800253c:	0002      	movs	r2, r0
 800253e:	000b      	movs	r3, r1
 8002540:	0010      	movs	r0, r2
 8002542:	0019      	movs	r1, r3
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	001c      	movs	r4, r3
 8002548:	2300      	movs	r3, #0
 800254a:	001d      	movs	r5, r3
 800254c:	0022      	movs	r2, r4
 800254e:	002b      	movs	r3, r5
 8002550:	f7fd fe70 	bl	8000234 <__aeabi_uldivmod>
 8002554:	0002      	movs	r2, r0
 8002556:	000b      	movs	r3, r1
 8002558:	0013      	movs	r3, r2
 800255a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800255c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002560:	e00d      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCC_GetSysClockFreq+0x138>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	0b5b      	lsrs	r3, r3, #13
 8002568:	2207      	movs	r2, #7
 800256a:	4013      	ands	r3, r2
 800256c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	3301      	adds	r3, #1
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	0212      	lsls	r2, r2, #8
 8002576:	409a      	lsls	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800257c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002580:	0018      	movs	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	b00e      	add	sp, #56	; 0x38
 8002586:	bdb0      	pop	{r4, r5, r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	003d0900 	.word	0x003d0900
 8002590:	00f42400 	.word	0x00f42400
 8002594:	007a1200 	.word	0x007a1200
 8002598:	0800606c 	.word	0x0800606c

0800259c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a0:	4b02      	ldr	r3, [pc, #8]	; (80025ac <HAL_RCC_GetHCLKFreq+0x10>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	0018      	movs	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	20000000 	.word	0x20000000

080025b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025b4:	f7ff fff2 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025b8:	0001      	movs	r1, r0
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	2207      	movs	r2, #7
 80025c2:	4013      	ands	r3, r2
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	40d9      	lsrs	r1, r3
 80025ca:	000b      	movs	r3, r1
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	40021000 	.word	0x40021000
 80025d8:	08006064 	.word	0x08006064

080025dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025e0:	f7ff ffdc 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025e4:	0001      	movs	r1, r0
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	0adb      	lsrs	r3, r3, #11
 80025ec:	2207      	movs	r2, #7
 80025ee:	4013      	ands	r3, r2
 80025f0:	4a04      	ldr	r2, [pc, #16]	; (8002604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	40d9      	lsrs	r1, r3
 80025f6:	000b      	movs	r3, r1
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	40021000 	.word	0x40021000
 8002604:	08006064 	.word	0x08006064

08002608 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002610:	2017      	movs	r0, #23
 8002612:	183b      	adds	r3, r7, r0
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2220      	movs	r2, #32
 800261e:	4013      	ands	r3, r2
 8002620:	d100      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002622:	e0c2      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002624:	4b98      	ldr	r3, [pc, #608]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	055b      	lsls	r3, r3, #21
 800262c:	4013      	ands	r3, r2
 800262e:	d109      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002630:	4b95      	ldr	r3, [pc, #596]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002634:	4b94      	ldr	r3, [pc, #592]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002636:	2180      	movs	r1, #128	; 0x80
 8002638:	0549      	lsls	r1, r1, #21
 800263a:	430a      	orrs	r2, r1
 800263c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800263e:	183b      	adds	r3, r7, r0
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002644:	4b91      	ldr	r3, [pc, #580]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4013      	ands	r3, r2
 800264e:	d11a      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002650:	4b8e      	ldr	r3, [pc, #568]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b8d      	ldr	r3, [pc, #564]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002656:	2180      	movs	r1, #128	; 0x80
 8002658:	0049      	lsls	r1, r1, #1
 800265a:	430a      	orrs	r2, r1
 800265c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800265e:	f7fe fe73 	bl	8001348 <HAL_GetTick>
 8002662:	0003      	movs	r3, r0
 8002664:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	e008      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002668:	f7fe fe6e 	bl	8001348 <HAL_GetTick>
 800266c:	0002      	movs	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	; 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e102      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	4b84      	ldr	r3, [pc, #528]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4013      	ands	r3, r2
 8002684:	d0f0      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002686:	4b80      	ldr	r3, [pc, #512]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	23c0      	movs	r3, #192	; 0xc0
 800268c:	039b      	lsls	r3, r3, #14
 800268e:	4013      	ands	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	23c0      	movs	r3, #192	; 0xc0
 8002698:	039b      	lsls	r3, r3, #14
 800269a:	4013      	ands	r3, r2
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d013      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	23c0      	movs	r3, #192	; 0xc0
 80026a8:	029b      	lsls	r3, r3, #10
 80026aa:	401a      	ands	r2, r3
 80026ac:	23c0      	movs	r3, #192	; 0xc0
 80026ae:	029b      	lsls	r3, r3, #10
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d10a      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80026b4:	4b74      	ldr	r3, [pc, #464]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	029b      	lsls	r3, r3, #10
 80026bc:	401a      	ands	r2, r3
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	029b      	lsls	r3, r3, #10
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d101      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e0da      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80026ca:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026ce:	23c0      	movs	r3, #192	; 0xc0
 80026d0:	029b      	lsls	r3, r3, #10
 80026d2:	4013      	ands	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d03b      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	23c0      	movs	r3, #192	; 0xc0
 80026e2:	029b      	lsls	r3, r3, #10
 80026e4:	4013      	ands	r3, r2
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d033      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2220      	movs	r2, #32
 80026f2:	4013      	ands	r3, r2
 80026f4:	d02e      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80026f6:	4b64      	ldr	r3, [pc, #400]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80026f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fa:	4a65      	ldr	r2, [pc, #404]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002700:	4b61      	ldr	r3, [pc, #388]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002702:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002704:	4b60      	ldr	r3, [pc, #384]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002706:	2180      	movs	r1, #128	; 0x80
 8002708:	0309      	lsls	r1, r1, #12
 800270a:	430a      	orrs	r2, r1
 800270c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800270e:	4b5e      	ldr	r3, [pc, #376]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002712:	4b5d      	ldr	r3, [pc, #372]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002714:	495f      	ldr	r1, [pc, #380]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002716:	400a      	ands	r2, r1
 8002718:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800271a:	4b5b      	ldr	r3, [pc, #364]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4013      	ands	r3, r2
 8002728:	d014      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7fe fe0d 	bl	8001348 <HAL_GetTick>
 800272e:	0003      	movs	r3, r0
 8002730:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002732:	e009      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7fe fe08 	bl	8001348 <HAL_GetTick>
 8002738:	0002      	movs	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	4a56      	ldr	r2, [pc, #344]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d901      	bls.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e09b      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002748:	4b4f      	ldr	r3, [pc, #316]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800274a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4013      	ands	r3, r2
 8002752:	d0ef      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	23c0      	movs	r3, #192	; 0xc0
 800275a:	029b      	lsls	r3, r3, #10
 800275c:	401a      	ands	r2, r3
 800275e:	23c0      	movs	r3, #192	; 0xc0
 8002760:	029b      	lsls	r3, r3, #10
 8002762:	429a      	cmp	r2, r3
 8002764:	d10c      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002766:	4b48      	ldr	r3, [pc, #288]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a4c      	ldr	r2, [pc, #304]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800276c:	4013      	ands	r3, r2
 800276e:	0019      	movs	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	23c0      	movs	r3, #192	; 0xc0
 8002776:	039b      	lsls	r3, r3, #14
 8002778:	401a      	ands	r2, r3
 800277a:	4b43      	ldr	r3, [pc, #268]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800277c:	430a      	orrs	r2, r1
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002782:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	23c0      	movs	r3, #192	; 0xc0
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	401a      	ands	r2, r3
 800278e:	4b3e      	ldr	r3, [pc, #248]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002790:	430a      	orrs	r2, r1
 8002792:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002794:	2317      	movs	r3, #23
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d105      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279e:	4b3a      	ldr	r3, [pc, #232]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027a2:	4b39      	ldr	r3, [pc, #228]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027a4:	493e      	ldr	r1, [pc, #248]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80027a6:	400a      	ands	r2, r1
 80027a8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2201      	movs	r2, #1
 80027b0:	4013      	ands	r3, r2
 80027b2:	d009      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027b4:	4b34      	ldr	r3, [pc, #208]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b8:	2203      	movs	r2, #3
 80027ba:	4393      	bics	r3, r2
 80027bc:	0019      	movs	r1, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	4b31      	ldr	r3, [pc, #196]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027c4:	430a      	orrs	r2, r1
 80027c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2202      	movs	r2, #2
 80027ce:	4013      	ands	r3, r2
 80027d0:	d009      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027d2:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d6:	220c      	movs	r2, #12
 80027d8:	4393      	bics	r3, r2
 80027da:	0019      	movs	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027e2:	430a      	orrs	r2, r1
 80027e4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2204      	movs	r2, #4
 80027ec:	4013      	ands	r3, r2
 80027ee:	d009      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027f0:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80027f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f4:	4a2b      	ldr	r2, [pc, #172]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	0019      	movs	r1, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002800:	430a      	orrs	r2, r1
 8002802:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2208      	movs	r2, #8
 800280a:	4013      	ands	r3, r2
 800280c:	d009      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800280e:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	4a25      	ldr	r2, [pc, #148]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002814:	4013      	ands	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800281e:	430a      	orrs	r2, r1
 8002820:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4013      	ands	r3, r2
 800282c:	d009      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	4a17      	ldr	r2, [pc, #92]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002834:	4013      	ands	r3, r2
 8002836:	0019      	movs	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699a      	ldr	r2, [r3, #24]
 800283c:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800283e:	430a      	orrs	r2, r1
 8002840:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2240      	movs	r2, #64	; 0x40
 8002848:	4013      	ands	r3, r2
 800284a:	d009      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800284e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002850:	4a16      	ldr	r2, [pc, #88]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002852:	4013      	ands	r3, r2
 8002854:	0019      	movs	r1, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1a      	ldr	r2, [r3, #32]
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800285c:	430a      	orrs	r2, r1
 800285e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2280      	movs	r2, #128	; 0x80
 8002866:	4013      	ands	r3, r2
 8002868:	d009      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002870:	4013      	ands	r3, r2
 8002872:	0019      	movs	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69da      	ldr	r2, [r3, #28]
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800287a:	430a      	orrs	r2, r1
 800287c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	b006      	add	sp, #24
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000
 800288c:	40007000 	.word	0x40007000
 8002890:	fffcffff 	.word	0xfffcffff
 8002894:	fff7ffff 	.word	0xfff7ffff
 8002898:	00001388 	.word	0x00001388
 800289c:	ffcfffff 	.word	0xffcfffff
 80028a0:	efffffff 	.word	0xefffffff
 80028a4:	fffff3ff 	.word	0xfffff3ff
 80028a8:	ffffcfff 	.word	0xffffcfff
 80028ac:	fbffffff 	.word	0xfbffffff
 80028b0:	fff3ffff 	.word	0xfff3ffff

080028b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e08e      	b.n	80029e4 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2221      	movs	r2, #33	; 0x21
 80028ca:	5c9b      	ldrb	r3, [r3, r2]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	2100      	movs	r1, #0
 80028d8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f7fe fb15 	bl	8000f0c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2221      	movs	r2, #33	; 0x21
 80028e6:	2102      	movs	r1, #2
 80028e8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	22ca      	movs	r2, #202	; 0xca
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2253      	movs	r2, #83	; 0x53
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	0018      	movs	r0, r3
 80028fe:	f000 fbb2 	bl	8003066 <RTC_EnterInitMode>
 8002902:	1e03      	subs	r3, r0, #0
 8002904:	d009      	beq.n	800291a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	22ff      	movs	r2, #255	; 0xff
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2221      	movs	r2, #33	; 0x21
 8002912:	2104      	movs	r1, #4
 8002914:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e064      	b.n	80029e4 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4931      	ldr	r1, [pc, #196]	; (80029ec <HAL_RTC_Init+0x138>)
 8002926:	400a      	ands	r2, r1
 8002928:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6899      	ldr	r1, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68d2      	ldr	r2, [r2, #12]
 8002950:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6919      	ldr	r1, [r3, #16]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	041a      	lsls	r2, r3, #16
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2180      	movs	r1, #128	; 0x80
 8002972:	438a      	bics	r2, r1
 8002974:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2103      	movs	r1, #3
 8002982:	438a      	bics	r2, r1
 8002984:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2220      	movs	r2, #32
 80029a6:	4013      	ands	r3, r2
 80029a8:	d113      	bne.n	80029d2 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f000 fb33 	bl	8003018 <HAL_RTC_WaitForSynchro>
 80029b2:	1e03      	subs	r3, r0, #0
 80029b4:	d00d      	beq.n	80029d2 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	22ff      	movs	r2, #255	; 0xff
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2221      	movs	r2, #33	; 0x21
 80029c2:	2104      	movs	r1, #4
 80029c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	2100      	movs	r1, #0
 80029cc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e008      	b.n	80029e4 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	22ff      	movs	r2, #255	; 0xff
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2221      	movs	r2, #33	; 0x21
 80029de:	2101      	movs	r1, #1
 80029e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029e2:	2300      	movs	r3, #0
  }
}
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b002      	add	sp, #8
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	ff8fffbf 	.word	0xff8fffbf

080029f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80029f0:	b590      	push	{r4, r7, lr}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	5c9b      	ldrb	r3, [r3, r2]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_RTC_SetTime+0x1a>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e0ad      	b.n	8002b66 <HAL_RTC_SetTime+0x176>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	2101      	movs	r1, #1
 8002a10:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2221      	movs	r2, #33	; 0x21
 8002a16:	2102      	movs	r1, #2
 8002a18:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d125      	bne.n	8002a6c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2240      	movs	r2, #64	; 0x40
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d102      	bne.n	8002a32 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 fb3f 	bl	80030ba <RTC_ByteToBcd2>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	785b      	ldrb	r3, [r3, #1]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f000 fb38 	bl	80030ba <RTC_ByteToBcd2>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002a4e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	789b      	ldrb	r3, [r3, #2]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f000 fb30 	bl	80030ba <RTC_ByteToBcd2>
 8002a5a:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002a5c:	0022      	movs	r2, r4
 8002a5e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	78db      	ldrb	r3, [r3, #3]
 8002a64:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	e017      	b.n	8002a9c <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2240      	movs	r2, #64	; 0x40
 8002a74:	4013      	ands	r3, r2
 8002a76:	d102      	bne.n	8002a7e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	785b      	ldrb	r3, [r3, #1]
 8002a88:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002a8a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002a90:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	78db      	ldrb	r3, [r3, #3]
 8002a96:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	22ca      	movs	r2, #202	; 0xca
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2253      	movs	r2, #83	; 0x53
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f000 fad9 	bl	8003066 <RTC_EnterInitMode>
 8002ab4:	1e03      	subs	r3, r0, #0
 8002ab6:	d00d      	beq.n	8002ad4 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	22ff      	movs	r2, #255	; 0xff
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2221      	movs	r2, #33	; 0x21
 8002ac4:	2104      	movs	r1, #4
 8002ac6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	2100      	movs	r1, #0
 8002ace:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e048      	b.n	8002b66 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4925      	ldr	r1, [pc, #148]	; (8002b70 <HAL_RTC_SetTime+0x180>)
 8002adc:	400a      	ands	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4922      	ldr	r1, [pc, #136]	; (8002b74 <HAL_RTC_SetTime+0x184>)
 8002aec:	400a      	ands	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6899      	ldr	r1, [r3, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2180      	movs	r1, #128	; 0x80
 8002b14:	438a      	bics	r2, r1
 8002b16:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	4013      	ands	r3, r2
 8002b22:	d113      	bne.n	8002b4c <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 fa76 	bl	8003018 <HAL_RTC_WaitForSynchro>
 8002b2c:	1e03      	subs	r3, r0, #0
 8002b2e:	d00d      	beq.n	8002b4c <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	22ff      	movs	r2, #255	; 0xff
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2221      	movs	r2, #33	; 0x21
 8002b3c:	2104      	movs	r1, #4
 8002b3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	2100      	movs	r1, #0
 8002b46:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e00c      	b.n	8002b66 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	22ff      	movs	r2, #255	; 0xff
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2221      	movs	r2, #33	; 0x21
 8002b58:	2101      	movs	r1, #1
 8002b5a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	2100      	movs	r1, #0
 8002b62:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b64:	2300      	movs	r3, #0
  }
}
 8002b66:	0018      	movs	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b007      	add	sp, #28
 8002b6c:	bd90      	pop	{r4, r7, pc}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	007f7f7f 	.word	0x007f7f7f
 8002b74:	fffbffff 	.word	0xfffbffff

08002b78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	5c9b      	ldrb	r3, [r3, r2]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_RTC_SetDate+0x1a>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e099      	b.n	8002cc6 <HAL_RTC_SetDate+0x14e>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2220      	movs	r2, #32
 8002b96:	2101      	movs	r1, #1
 8002b98:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2221      	movs	r2, #33	; 0x21
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10e      	bne.n	8002bc6 <HAL_RTC_SetDate+0x4e>
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	785b      	ldrb	r3, [r3, #1]
 8002bac:	001a      	movs	r2, r3
 8002bae:	2310      	movs	r3, #16
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	785b      	ldrb	r3, [r3, #1]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	4393      	bics	r3, r2
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	330a      	adds	r3, #10
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d11c      	bne.n	8002c06 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	78db      	ldrb	r3, [r3, #3]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 fa72 	bl	80030ba <RTC_ByteToBcd2>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	785b      	ldrb	r3, [r3, #1]
 8002bde:	0018      	movs	r0, r3
 8002be0:	f000 fa6b 	bl	80030ba <RTC_ByteToBcd2>
 8002be4:	0003      	movs	r3, r0
 8002be6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002be8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	789b      	ldrb	r3, [r3, #2]
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 fa63 	bl	80030ba <RTC_ByteToBcd2>
 8002bf4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002bf6:	0022      	movs	r2, r4
 8002bf8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e00e      	b.n	8002c24 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	78db      	ldrb	r3, [r3, #3]
 8002c0a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	785b      	ldrb	r3, [r3, #1]
 8002c10:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c12:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002c18:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	22ca      	movs	r2, #202	; 0xca
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2253      	movs	r2, #83	; 0x53
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 fa15 	bl	8003066 <RTC_EnterInitMode>
 8002c3c:	1e03      	subs	r3, r0, #0
 8002c3e:	d00d      	beq.n	8002c5c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	22ff      	movs	r2, #255	; 0xff
 8002c46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2221      	movs	r2, #33	; 0x21
 8002c4c:	2104      	movs	r1, #4
 8002c4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	2100      	movs	r1, #0
 8002c56:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e034      	b.n	8002cc6 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	491b      	ldr	r1, [pc, #108]	; (8002cd0 <HAL_RTC_SetDate+0x158>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2180      	movs	r1, #128	; 0x80
 8002c74:	438a      	bics	r2, r1
 8002c76:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	4013      	ands	r3, r2
 8002c82:	d113      	bne.n	8002cac <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 f9c6 	bl	8003018 <HAL_RTC_WaitForSynchro>
 8002c8c:	1e03      	subs	r3, r0, #0
 8002c8e:	d00d      	beq.n	8002cac <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	22ff      	movs	r2, #255	; 0xff
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2221      	movs	r2, #33	; 0x21
 8002c9c:	2104      	movs	r1, #4
 8002c9e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e00c      	b.n	8002cc6 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	22ff      	movs	r2, #255	; 0xff
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2221      	movs	r2, #33	; 0x21
 8002cb8:	2101      	movs	r1, #1
 8002cba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
  }
}
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b007      	add	sp, #28
 8002ccc:	bd90      	pop	{r4, r7, pc}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	00ffff3f 	.word	0x00ffff3f

08002cd4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b089      	sub	sp, #36	; 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	5c9b      	ldrb	r3, [r3, r2]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_RTC_SetAlarm_IT+0x1a>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e130      	b.n	8002f50 <HAL_RTC_SetAlarm_IT+0x27c>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2221      	movs	r2, #33	; 0x21
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d136      	bne.n	8002d72 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2240      	movs	r2, #64	; 0x40
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d102      	bne.n	8002d16 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2200      	movs	r2, #0
 8002d14:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f000 f9cd 	bl	80030ba <RTC_ByteToBcd2>
 8002d20:	0003      	movs	r3, r0
 8002d22:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	785b      	ldrb	r3, [r3, #1]
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f000 f9c6 	bl	80030ba <RTC_ByteToBcd2>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002d32:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	789b      	ldrb	r3, [r3, #2]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 f9be 	bl	80030ba <RTC_ByteToBcd2>
 8002d3e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002d40:	0022      	movs	r2, r4
 8002d42:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	78db      	ldrb	r3, [r3, #3]
 8002d48:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2220      	movs	r2, #32
 8002d52:	5c9b      	ldrb	r3, [r3, r2]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f000 f9b0 	bl	80030ba <RTC_ByteToBcd2>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002d5e:	0022      	movs	r2, r4
 8002d60:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002d66:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	e022      	b.n	8002db8 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2240      	movs	r2, #64	; 0x40
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d102      	bne.n	8002d84 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2200      	movs	r2, #0
 8002d82:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	785b      	ldrb	r3, [r3, #1]
 8002d8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002d90:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002d96:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	78db      	ldrb	r3, [r3, #3]
 8002d9c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002d9e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2120      	movs	r1, #32
 8002da4:	5c5b      	ldrb	r3, [r3, r1]
 8002da6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002da8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002dae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	22ca      	movs	r2, #202	; 0xca
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2253      	movs	r2, #83	; 0x53
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d14e      	bne.n	8002e7e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	495b      	ldr	r1, [pc, #364]	; (8002f58 <HAL_RTC_SetAlarm_IT+0x284>)
 8002dec:	400a      	ands	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	22ff      	movs	r2, #255	; 0xff
 8002df8:	401a      	ands	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4957      	ldr	r1, [pc, #348]	; (8002f5c <HAL_RTC_SetAlarm_IT+0x288>)
 8002e00:	430a      	orrs	r2, r1
 8002e02:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002e04:	f7fe faa0 	bl	8001348 <HAL_GetTick>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002e0c:	e016      	b.n	8002e3c <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e0e:	f7fe fa9b 	bl	8001348 <HAL_GetTick>
 8002e12:	0002      	movs	r2, r0
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	1ad2      	subs	r2, r2, r3
 8002e18:	23fa      	movs	r3, #250	; 0xfa
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d90d      	bls.n	8002e3c <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	22ff      	movs	r2, #255	; 0xff
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2221      	movs	r2, #33	; 0x21
 8002e2c:	2103      	movs	r1, #3
 8002e2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	2100      	movs	r1, #0
 8002e36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e089      	b.n	8002f50 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	4013      	ands	r3, r2
 8002e46:	d0e2      	beq.n	8002e0e <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2180      	movs	r1, #128	; 0x80
 8002e64:	0049      	lsls	r1, r1, #1
 8002e66:	430a      	orrs	r2, r1
 8002e68:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2180      	movs	r1, #128	; 0x80
 8002e76:	0149      	lsls	r1, r1, #5
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	e04d      	b.n	8002f1a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4935      	ldr	r1, [pc, #212]	; (8002f60 <HAL_RTC_SetAlarm_IT+0x28c>)
 8002e8a:	400a      	ands	r2, r1
 8002e8c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	22ff      	movs	r2, #255	; 0xff
 8002e96:	401a      	ands	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4931      	ldr	r1, [pc, #196]	; (8002f64 <HAL_RTC_SetAlarm_IT+0x290>)
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002ea2:	f7fe fa51 	bl	8001348 <HAL_GetTick>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002eaa:	e016      	b.n	8002eda <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002eac:	f7fe fa4c 	bl	8001348 <HAL_GetTick>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	1ad2      	subs	r2, r2, r3
 8002eb6:	23fa      	movs	r3, #250	; 0xfa
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d90d      	bls.n	8002eda <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	22ff      	movs	r2, #255	; 0xff
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2221      	movs	r2, #33	; 0x21
 8002eca:	2103      	movs	r1, #3
 8002ecc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e03a      	b.n	8002f50 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d0e2      	beq.n	8002eac <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2180      	movs	r1, #128	; 0x80
 8002f02:	0089      	lsls	r1, r1, #2
 8002f04:	430a      	orrs	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2180      	movs	r1, #128	; 0x80
 8002f14:	0189      	lsls	r1, r1, #6
 8002f16:	430a      	orrs	r2, r1
 8002f18:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <HAL_RTC_SetAlarm_IT+0x294>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_RTC_SetAlarm_IT+0x294>)
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	0289      	lsls	r1, r1, #10
 8002f24:	430a      	orrs	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002f28:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <HAL_RTC_SetAlarm_IT+0x294>)
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_RTC_SetAlarm_IT+0x294>)
 8002f2e:	2180      	movs	r1, #128	; 0x80
 8002f30:	0289      	lsls	r1, r1, #10
 8002f32:	430a      	orrs	r2, r1
 8002f34:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	22ff      	movs	r2, #255	; 0xff
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2221      	movs	r2, #33	; 0x21
 8002f42:	2101      	movs	r1, #1
 8002f44:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	0018      	movs	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b009      	add	sp, #36	; 0x24
 8002f56:	bd90      	pop	{r4, r7, pc}
 8002f58:	fffffeff 	.word	0xfffffeff
 8002f5c:	fffffe7f 	.word	0xfffffe7f
 8002f60:	fffffdff 	.word	0xfffffdff
 8002f64:	fffffd7f 	.word	0xfffffd7f
 8002f68:	40010400 	.word	0x40010400

08002f6c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	015b      	lsls	r3, r3, #5
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d014      	beq.n	8002fac <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d00d      	beq.n	8002fac <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	0018      	movs	r0, r3
 8002f94:	f000 f838 	bl	8003008 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	22ff      	movs	r2, #255	; 0xff
 8002fa0:	401a      	ands	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4915      	ldr	r1, [pc, #84]	; (8002ffc <HAL_RTC_AlarmIRQHandler+0x90>)
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	019b      	lsls	r3, r3, #6
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d014      	beq.n	8002fe4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d00d      	beq.n	8002fe4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f000 f89d 	bl	800310a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	22ff      	movs	r2, #255	; 0xff
 8002fd8:	401a      	ands	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4908      	ldr	r1, [pc, #32]	; (8003000 <HAL_RTC_AlarmIRQHandler+0x94>)
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002fe4:	4b07      	ldr	r3, [pc, #28]	; (8003004 <HAL_RTC_AlarmIRQHandler+0x98>)
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	0292      	lsls	r2, r2, #10
 8002fea:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2221      	movs	r2, #33	; 0x21
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	5499      	strb	r1, [r3, r2]
}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b002      	add	sp, #8
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	fffffe7f 	.word	0xfffffe7f
 8003000:	fffffd7f 	.word	0xfffffd7f
 8003004:	40010400 	.word	0x40010400

08003008 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	b002      	add	sp, #8
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	21a0      	movs	r1, #160	; 0xa0
 800302c:	438a      	bics	r2, r1
 800302e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003030:	f7fe f98a 	bl	8001348 <HAL_GetTick>
 8003034:	0003      	movs	r3, r0
 8003036:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003038:	e00a      	b.n	8003050 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800303a:	f7fe f985 	bl	8001348 <HAL_GetTick>
 800303e:	0002      	movs	r2, r0
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1ad2      	subs	r2, r2, r3
 8003044:	23fa      	movs	r3, #250	; 0xfa
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	429a      	cmp	r2, r3
 800304a:	d901      	bls.n	8003050 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e006      	b.n	800305e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	4013      	ands	r3, r2
 800305a:	d0ee      	beq.n	800303a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b004      	add	sp, #16
 8003064:	bd80      	pop	{r7, pc}

08003066 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2240      	movs	r2, #64	; 0x40
 8003076:	4013      	ands	r3, r2
 8003078:	d11a      	bne.n	80030b0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2201      	movs	r2, #1
 8003080:	4252      	negs	r2, r2
 8003082:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003084:	f7fe f960 	bl	8001348 <HAL_GetTick>
 8003088:	0003      	movs	r3, r0
 800308a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800308c:	e00a      	b.n	80030a4 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800308e:	f7fe f95b 	bl	8001348 <HAL_GetTick>
 8003092:	0002      	movs	r2, r0
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1ad2      	subs	r2, r2, r3
 8003098:	23fa      	movs	r3, #250	; 0xfa
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	429a      	cmp	r2, r3
 800309e:	d901      	bls.n	80030a4 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e006      	b.n	80030b2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2240      	movs	r2, #64	; 0x40
 80030ac:	4013      	ands	r3, r2
 80030ae:	d0ee      	beq.n	800308e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	0018      	movs	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b004      	add	sp, #16
 80030b8:	bd80      	pop	{r7, pc}

080030ba <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	0002      	movs	r2, r0
 80030c2:	1dfb      	adds	r3, r7, #7
 80030c4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80030ca:	230b      	movs	r3, #11
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	1dfa      	adds	r2, r7, #7
 80030d0:	7812      	ldrb	r2, [r2, #0]
 80030d2:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80030d4:	e008      	b.n	80030e8 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3301      	adds	r3, #1
 80030da:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80030dc:	220b      	movs	r2, #11
 80030de:	18bb      	adds	r3, r7, r2
 80030e0:	18ba      	adds	r2, r7, r2
 80030e2:	7812      	ldrb	r2, [r2, #0]
 80030e4:	3a0a      	subs	r2, #10
 80030e6:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80030e8:	210b      	movs	r1, #11
 80030ea:	187b      	adds	r3, r7, r1
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b09      	cmp	r3, #9
 80030f0:	d8f1      	bhi.n	80030d6 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	187b      	adds	r3, r7, r1
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	b2db      	uxtb	r3, r3
}
 8003102:	0018      	movs	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	b004      	add	sp, #16
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	46bd      	mov	sp, r7
 8003116:	b002      	add	sp, #8
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e083      	b.n	8003236 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	2382      	movs	r3, #130	; 0x82
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	429a      	cmp	r2, r3
 8003140:	d009      	beq.n	8003156 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	61da      	str	r2, [r3, #28]
 8003148:	e005      	b.n	8003156 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2251      	movs	r2, #81	; 0x51
 8003160:	5c9b      	ldrb	r3, [r3, r2]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d107      	bne.n	8003178 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2250      	movs	r2, #80	; 0x50
 800316c:	2100      	movs	r1, #0
 800316e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	0018      	movs	r0, r3
 8003174:	f7fd feea 	bl	8000f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2251      	movs	r2, #81	; 0x51
 800317c:	2102      	movs	r1, #2
 800317e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2140      	movs	r1, #64	; 0x40
 800318c:	438a      	bics	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	2382      	movs	r3, #130	; 0x82
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	401a      	ands	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6899      	ldr	r1, [r3, #8]
 800319e:	2384      	movs	r3, #132	; 0x84
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	400b      	ands	r3, r1
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68d9      	ldr	r1, [r3, #12]
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	400b      	ands	r3, r1
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2102      	movs	r1, #2
 80031b8:	400b      	ands	r3, r1
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	2101      	movs	r1, #1
 80031c2:	400b      	ands	r3, r1
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6999      	ldr	r1, [r3, #24]
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	400b      	ands	r3, r1
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	2138      	movs	r1, #56	; 0x38
 80031d8:	400b      	ands	r3, r1
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	400b      	ands	r3, r1
 80031e4:	431a      	orrs	r2, r3
 80031e6:	0011      	movs	r1, r2
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	019b      	lsls	r3, r3, #6
 80031f0:	401a      	ands	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	0c1b      	lsrs	r3, r3, #16
 8003200:	2204      	movs	r2, #4
 8003202:	4013      	ands	r3, r2
 8003204:	0019      	movs	r1, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	2210      	movs	r2, #16
 800320c:	401a      	ands	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69da      	ldr	r2, [r3, #28]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4907      	ldr	r1, [pc, #28]	; (8003240 <HAL_SPI_Init+0x124>)
 8003222:	400a      	ands	r2, r1
 8003224:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2251      	movs	r2, #81	; 0x51
 8003230:	2101      	movs	r1, #1
 8003232:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	0018      	movs	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	b002      	add	sp, #8
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	fffff7ff 	.word	0xfffff7ff

08003244 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	1dbb      	adds	r3, r7, #6
 8003252:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003254:	231f      	movs	r3, #31
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2250      	movs	r2, #80	; 0x50
 8003260:	5c9b      	ldrb	r3, [r3, r2]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_SPI_Transmit+0x26>
 8003266:	2302      	movs	r3, #2
 8003268:	e13e      	b.n	80034e8 <HAL_SPI_Transmit+0x2a4>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2250      	movs	r2, #80	; 0x50
 800326e:	2101      	movs	r1, #1
 8003270:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003272:	f7fe f869 	bl	8001348 <HAL_GetTick>
 8003276:	0003      	movs	r3, r0
 8003278:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800327a:	2316      	movs	r3, #22
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	1dba      	adds	r2, r7, #6
 8003280:	8812      	ldrh	r2, [r2, #0]
 8003282:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2251      	movs	r2, #81	; 0x51
 8003288:	5c9b      	ldrb	r3, [r3, r2]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d004      	beq.n	800329a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003290:	231f      	movs	r3, #31
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	2202      	movs	r2, #2
 8003296:	701a      	strb	r2, [r3, #0]
    goto error;
 8003298:	e11b      	b.n	80034d2 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_SPI_Transmit+0x64>
 80032a0:	1dbb      	adds	r3, r7, #6
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d104      	bne.n	80032b2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80032a8:	231f      	movs	r3, #31
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	2201      	movs	r2, #1
 80032ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80032b0:	e10f      	b.n	80034d2 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2251      	movs	r2, #81	; 0x51
 80032b6:	2103      	movs	r1, #3
 80032b8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1dba      	adds	r2, r7, #6
 80032ca:	8812      	ldrh	r2, [r2, #0]
 80032cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1dba      	adds	r2, r7, #6
 80032d2:	8812      	ldrh	r2, [r2, #0]
 80032d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d110      	bne.n	8003322 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2140      	movs	r1, #64	; 0x40
 800330c:	438a      	bics	r2, r1
 800330e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2180      	movs	r1, #128	; 0x80
 800331c:	01c9      	lsls	r1, r1, #7
 800331e:	430a      	orrs	r2, r1
 8003320:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2240      	movs	r2, #64	; 0x40
 800332a:	4013      	ands	r3, r2
 800332c:	2b40      	cmp	r3, #64	; 0x40
 800332e:	d007      	beq.n	8003340 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2140      	movs	r1, #64	; 0x40
 800333c:	430a      	orrs	r2, r1
 800333e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	429a      	cmp	r2, r3
 800334a:	d14e      	bne.n	80033ea <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d004      	beq.n	800335e <HAL_SPI_Transmit+0x11a>
 8003354:	2316      	movs	r3, #22
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d13f      	bne.n	80033de <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	881a      	ldrh	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	1c9a      	adds	r2, r3, #2
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003382:	e02c      	b.n	80033de <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2202      	movs	r2, #2
 800338c:	4013      	ands	r3, r2
 800338e:	2b02      	cmp	r3, #2
 8003390:	d112      	bne.n	80033b8 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	881a      	ldrh	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	1c9a      	adds	r2, r3, #2
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80033b6:	e012      	b.n	80033de <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033b8:	f7fd ffc6 	bl	8001348 <HAL_GetTick>
 80033bc:	0002      	movs	r2, r0
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d802      	bhi.n	80033ce <HAL_SPI_Transmit+0x18a>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	3301      	adds	r3, #1
 80033cc:	d102      	bne.n	80033d4 <HAL_SPI_Transmit+0x190>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d104      	bne.n	80033de <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80033d4:	231f      	movs	r3, #31
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	2203      	movs	r2, #3
 80033da:	701a      	strb	r2, [r3, #0]
          goto error;
 80033dc:	e079      	b.n	80034d2 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1cd      	bne.n	8003384 <HAL_SPI_Transmit+0x140>
 80033e8:	e04f      	b.n	800348a <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <HAL_SPI_Transmit+0x1b8>
 80033f2:	2316      	movs	r3, #22
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d141      	bne.n	8003480 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	7812      	ldrb	r2, [r2, #0]
 8003408:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003422:	e02d      	b.n	8003480 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2202      	movs	r2, #2
 800342c:	4013      	ands	r3, r2
 800342e:	2b02      	cmp	r3, #2
 8003430:	d113      	bne.n	800345a <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	330c      	adds	r3, #12
 800343c:	7812      	ldrb	r2, [r2, #0]
 800343e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	86da      	strh	r2, [r3, #54]	; 0x36
 8003458:	e012      	b.n	8003480 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800345a:	f7fd ff75 	bl	8001348 <HAL_GetTick>
 800345e:	0002      	movs	r2, r0
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d802      	bhi.n	8003470 <HAL_SPI_Transmit+0x22c>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	3301      	adds	r3, #1
 800346e:	d102      	bne.n	8003476 <HAL_SPI_Transmit+0x232>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d104      	bne.n	8003480 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8003476:	231f      	movs	r3, #31
 8003478:	18fb      	adds	r3, r7, r3
 800347a:	2203      	movs	r2, #3
 800347c:	701a      	strb	r2, [r3, #0]
          goto error;
 800347e:	e028      	b.n	80034d2 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1cc      	bne.n	8003424 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	6839      	ldr	r1, [r7, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	0018      	movs	r0, r3
 8003492:	f000 fa77 	bl	8003984 <SPI_EndRxTxTransaction>
 8003496:	1e03      	subs	r3, r0, #0
 8003498:	d002      	beq.n	80034a0 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10a      	bne.n	80034be <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d004      	beq.n	80034d0 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 80034c6:	231f      	movs	r3, #31
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e000      	b.n	80034d2 <HAL_SPI_Transmit+0x28e>
  }

error:
 80034d0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2251      	movs	r2, #81	; 0x51
 80034d6:	2101      	movs	r1, #1
 80034d8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2250      	movs	r2, #80	; 0x50
 80034de:	2100      	movs	r1, #0
 80034e0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80034e2:	231f      	movs	r3, #31
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	781b      	ldrb	r3, [r3, #0]
}
 80034e8:	0018      	movs	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b008      	add	sp, #32
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08c      	sub	sp, #48	; 0x30
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	001a      	movs	r2, r3
 80034fe:	1cbb      	adds	r3, r7, #2
 8003500:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003502:	2301      	movs	r3, #1
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003506:	232b      	movs	r3, #43	; 0x2b
 8003508:	18fb      	adds	r3, r7, r3
 800350a:	2200      	movs	r2, #0
 800350c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2250      	movs	r2, #80	; 0x50
 8003512:	5c9b      	ldrb	r3, [r3, r2]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_SPI_TransmitReceive+0x2c>
 8003518:	2302      	movs	r3, #2
 800351a:	e1a0      	b.n	800385e <HAL_SPI_TransmitReceive+0x36e>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2250      	movs	r2, #80	; 0x50
 8003520:	2101      	movs	r1, #1
 8003522:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003524:	f7fd ff10 	bl	8001348 <HAL_GetTick>
 8003528:	0003      	movs	r3, r0
 800352a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800352c:	2023      	movs	r0, #35	; 0x23
 800352e:	183b      	adds	r3, r7, r0
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	2151      	movs	r1, #81	; 0x51
 8003534:	5c52      	ldrb	r2, [r2, r1]
 8003536:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800353e:	231a      	movs	r3, #26
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	1cba      	adds	r2, r7, #2
 8003544:	8812      	ldrh	r2, [r2, #0]
 8003546:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003548:	183b      	adds	r3, r7, r0
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d011      	beq.n	8003574 <HAL_SPI_TransmitReceive+0x84>
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	2382      	movs	r3, #130	; 0x82
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	429a      	cmp	r2, r3
 8003558:	d107      	bne.n	800356a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d103      	bne.n	800356a <HAL_SPI_TransmitReceive+0x7a>
 8003562:	183b      	adds	r3, r7, r0
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b04      	cmp	r3, #4
 8003568:	d004      	beq.n	8003574 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800356a:	232b      	movs	r3, #43	; 0x2b
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	2202      	movs	r2, #2
 8003570:	701a      	strb	r2, [r3, #0]
    goto error;
 8003572:	e169      	b.n	8003848 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <HAL_SPI_TransmitReceive+0x98>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_SPI_TransmitReceive+0x98>
 8003580:	1cbb      	adds	r3, r7, #2
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d104      	bne.n	8003592 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003588:	232b      	movs	r3, #43	; 0x2b
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	2201      	movs	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003590:	e15a      	b.n	8003848 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2251      	movs	r2, #81	; 0x51
 8003596:	5c9b      	ldrb	r3, [r3, r2]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b04      	cmp	r3, #4
 800359c:	d003      	beq.n	80035a6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2251      	movs	r2, #81	; 0x51
 80035a2:	2105      	movs	r1, #5
 80035a4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1cba      	adds	r2, r7, #2
 80035b6:	8812      	ldrh	r2, [r2, #0]
 80035b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1cba      	adds	r2, r7, #2
 80035be:	8812      	ldrh	r2, [r2, #0]
 80035c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	1cba      	adds	r2, r7, #2
 80035cc:	8812      	ldrh	r2, [r2, #0]
 80035ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1cba      	adds	r2, r7, #2
 80035d4:	8812      	ldrh	r2, [r2, #0]
 80035d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2240      	movs	r2, #64	; 0x40
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d007      	beq.n	8003602 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2140      	movs	r1, #64	; 0x40
 80035fe:	430a      	orrs	r2, r1
 8003600:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	429a      	cmp	r2, r3
 800360c:	d000      	beq.n	8003610 <HAL_SPI_TransmitReceive+0x120>
 800360e:	e07a      	b.n	8003706 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d004      	beq.n	8003622 <HAL_SPI_TransmitReceive+0x132>
 8003618:	231a      	movs	r3, #26
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d166      	bne.n	80036f0 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	881a      	ldrh	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	1c9a      	adds	r2, r3, #2
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003646:	e053      	b.n	80036f0 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2202      	movs	r2, #2
 8003650:	4013      	ands	r3, r2
 8003652:	2b02      	cmp	r3, #2
 8003654:	d11b      	bne.n	800368e <HAL_SPI_TransmitReceive+0x19e>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d016      	beq.n	800368e <HAL_SPI_TransmitReceive+0x19e>
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	2b01      	cmp	r3, #1
 8003664:	d113      	bne.n	800368e <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	881a      	ldrh	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	1c9a      	adds	r2, r3, #2
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2201      	movs	r2, #1
 8003696:	4013      	ands	r3, r2
 8003698:	2b01      	cmp	r3, #1
 800369a:	d119      	bne.n	80036d0 <HAL_SPI_TransmitReceive+0x1e0>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d014      	beq.n	80036d0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	b292      	uxth	r2, r2
 80036b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	1c9a      	adds	r2, r3, #2
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036cc:	2301      	movs	r3, #1
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036d0:	f7fd fe3a 	bl	8001348 <HAL_GetTick>
 80036d4:	0002      	movs	r2, r0
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036dc:	429a      	cmp	r2, r3
 80036de:	d807      	bhi.n	80036f0 <HAL_SPI_TransmitReceive+0x200>
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	3301      	adds	r3, #1
 80036e4:	d004      	beq.n	80036f0 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 80036e6:	232b      	movs	r3, #43	; 0x2b
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	2203      	movs	r2, #3
 80036ec:	701a      	strb	r2, [r3, #0]
        goto error;
 80036ee:	e0ab      	b.n	8003848 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1a6      	bne.n	8003648 <HAL_SPI_TransmitReceive+0x158>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1a1      	bne.n	8003648 <HAL_SPI_TransmitReceive+0x158>
 8003704:	e07f      	b.n	8003806 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_SPI_TransmitReceive+0x22a>
 800370e:	231a      	movs	r3, #26
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d000      	beq.n	800371a <HAL_SPI_TransmitReceive+0x22a>
 8003718:	e06b      	b.n	80037f2 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	330c      	adds	r3, #12
 8003724:	7812      	ldrb	r2, [r2, #0]
 8003726:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003740:	e057      	b.n	80037f2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2202      	movs	r2, #2
 800374a:	4013      	ands	r3, r2
 800374c:	2b02      	cmp	r3, #2
 800374e:	d11c      	bne.n	800378a <HAL_SPI_TransmitReceive+0x29a>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d017      	beq.n	800378a <HAL_SPI_TransmitReceive+0x29a>
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d114      	bne.n	800378a <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	330c      	adds	r3, #12
 800376a:	7812      	ldrb	r2, [r2, #0]
 800376c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2201      	movs	r2, #1
 8003792:	4013      	ands	r3, r2
 8003794:	2b01      	cmp	r3, #1
 8003796:	d119      	bne.n	80037cc <HAL_SPI_TransmitReceive+0x2dc>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d014      	beq.n	80037cc <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037c8:	2301      	movs	r3, #1
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037cc:	f7fd fdbc 	bl	8001348 <HAL_GetTick>
 80037d0:	0002      	movs	r2, r0
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037d8:	429a      	cmp	r2, r3
 80037da:	d802      	bhi.n	80037e2 <HAL_SPI_TransmitReceive+0x2f2>
 80037dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037de:	3301      	adds	r3, #1
 80037e0:	d102      	bne.n	80037e8 <HAL_SPI_TransmitReceive+0x2f8>
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d104      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 80037e8:	232b      	movs	r3, #43	; 0x2b
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	2203      	movs	r2, #3
 80037ee:	701a      	strb	r2, [r3, #0]
        goto error;
 80037f0:	e02a      	b.n	8003848 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1a2      	bne.n	8003742 <HAL_SPI_TransmitReceive+0x252>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d19d      	bne.n	8003742 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003808:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	0018      	movs	r0, r3
 800380e:	f000 f8b9 	bl	8003984 <SPI_EndRxTxTransaction>
 8003812:	1e03      	subs	r3, r0, #0
 8003814:	d007      	beq.n	8003826 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8003816:	232b      	movs	r3, #43	; 0x2b
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	2201      	movs	r2, #1
 800381c:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003824:	e010      	b.n	8003848 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10b      	bne.n	8003846 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	e000      	b.n	8003848 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8003846:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2251      	movs	r2, #81	; 0x51
 800384c:	2101      	movs	r1, #1
 800384e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2250      	movs	r2, #80	; 0x50
 8003854:	2100      	movs	r1, #0
 8003856:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003858:	232b      	movs	r3, #43	; 0x2b
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	781b      	ldrb	r3, [r3, #0]
}
 800385e:	0018      	movs	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	b00c      	add	sp, #48	; 0x30
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	1dfb      	adds	r3, r7, #7
 8003876:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003878:	f7fd fd66 	bl	8001348 <HAL_GetTick>
 800387c:	0002      	movs	r2, r0
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	18d3      	adds	r3, r2, r3
 8003886:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003888:	f7fd fd5e 	bl	8001348 <HAL_GetTick>
 800388c:	0003      	movs	r3, r0
 800388e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003890:	4b3a      	ldr	r3, [pc, #232]	; (800397c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	015b      	lsls	r3, r3, #5
 8003896:	0d1b      	lsrs	r3, r3, #20
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	4353      	muls	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800389e:	e058      	b.n	8003952 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	d055      	beq.n	8003952 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038a6:	f7fd fd4f 	bl	8001348 <HAL_GetTick>
 80038aa:	0002      	movs	r2, r0
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d902      	bls.n	80038bc <SPI_WaitFlagStateUntilTimeout+0x54>
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d142      	bne.n	8003942 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	21e0      	movs	r1, #224	; 0xe0
 80038c8:	438a      	bics	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	2382      	movs	r3, #130	; 0x82
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d113      	bne.n	8003900 <SPI_WaitFlagStateUntilTimeout+0x98>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d005      	beq.n	80038f0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d107      	bne.n	8003900 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2140      	movs	r1, #64	; 0x40
 80038fc:	438a      	bics	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	019b      	lsls	r3, r3, #6
 8003908:	429a      	cmp	r2, r3
 800390a:	d110      	bne.n	800392e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	491a      	ldr	r1, [pc, #104]	; (8003980 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003918:	400a      	ands	r2, r1
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2180      	movs	r1, #128	; 0x80
 8003928:	0189      	lsls	r1, r1, #6
 800392a:	430a      	orrs	r2, r1
 800392c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2251      	movs	r2, #81	; 0x51
 8003932:	2101      	movs	r1, #1
 8003934:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2250      	movs	r2, #80	; 0x50
 800393a:	2100      	movs	r1, #0
 800393c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e017      	b.n	8003972 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	3b01      	subs	r3, #1
 8003950:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	4013      	ands	r3, r2
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	425a      	negs	r2, r3
 8003962:	4153      	adcs	r3, r2
 8003964:	b2db      	uxtb	r3, r3
 8003966:	001a      	movs	r2, r3
 8003968:	1dfb      	adds	r3, r7, #7
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d197      	bne.n	80038a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	0018      	movs	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	b008      	add	sp, #32
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	20000000 	.word	0x20000000
 8003980:	ffffdfff 	.word	0xffffdfff

08003984 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003990:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <SPI_EndRxTxTransaction+0x84>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	491d      	ldr	r1, [pc, #116]	; (8003a0c <SPI_EndRxTxTransaction+0x88>)
 8003996:	0018      	movs	r0, r3
 8003998:	f7fc fbc0 	bl	800011c <__udivsi3>
 800399c:	0003      	movs	r3, r0
 800399e:	001a      	movs	r2, r3
 80039a0:	0013      	movs	r3, r2
 80039a2:	015b      	lsls	r3, r3, #5
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	189b      	adds	r3, r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	2382      	movs	r3, #130	; 0x82
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d112      	bne.n	80039e0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	0013      	movs	r3, r2
 80039c4:	2200      	movs	r2, #0
 80039c6:	2180      	movs	r1, #128	; 0x80
 80039c8:	f7ff ff4e 	bl	8003868 <SPI_WaitFlagStateUntilTimeout>
 80039cc:	1e03      	subs	r3, r0, #0
 80039ce:	d016      	beq.n	80039fe <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	2220      	movs	r2, #32
 80039d6:	431a      	orrs	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e00f      	b.n	8003a00 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2280      	movs	r2, #128	; 0x80
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b80      	cmp	r3, #128	; 0x80
 80039f8:	d0f2      	beq.n	80039e0 <SPI_EndRxTxTransaction+0x5c>
 80039fa:	e000      	b.n	80039fe <SPI_EndRxTxTransaction+0x7a>
        break;
 80039fc:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b006      	add	sp, #24
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20000000 	.word	0x20000000
 8003a0c:	016e3600 	.word	0x016e3600

08003a10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e044      	b.n	8003aac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d107      	bne.n	8003a3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2274      	movs	r2, #116	; 0x74
 8003a2e:	2100      	movs	r1, #0
 8003a30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	0018      	movs	r0, r3
 8003a36:	f7fd fb21 	bl	800107c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2224      	movs	r2, #36	; 0x24
 8003a3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	438a      	bics	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 fbce 	bl	80041f4 <UART_SetConfig>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e024      	b.n	8003aac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f000 fe61 	bl	8004734 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	490d      	ldr	r1, [pc, #52]	; (8003ab4 <HAL_UART_Init+0xa4>)
 8003a7e:	400a      	ands	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	212a      	movs	r1, #42	; 0x2a
 8003a8e:	438a      	bics	r2, r1
 8003a90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f000 fef9 	bl	800489c <UART_CheckIdleState>
 8003aaa:	0003      	movs	r3, r0
}
 8003aac:	0018      	movs	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b002      	add	sp, #8
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	ffffb7ff 	.word	0xffffb7ff

08003ab8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08a      	sub	sp, #40	; 0x28
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	1dbb      	adds	r3, r7, #6
 8003ac6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d000      	beq.n	8003ad2 <HAL_UART_Transmit+0x1a>
 8003ad0:	e095      	b.n	8003bfe <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_UART_Transmit+0x28>
 8003ad8:	1dbb      	adds	r3, r7, #6
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e08d      	b.n	8003c00 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	015b      	lsls	r3, r3, #5
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d109      	bne.n	8003b04 <HAL_UART_Transmit+0x4c>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d105      	bne.n	8003b04 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2201      	movs	r2, #1
 8003afc:	4013      	ands	r3, r2
 8003afe:	d001      	beq.n	8003b04 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e07d      	b.n	8003c00 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2274      	movs	r2, #116	; 0x74
 8003b08:	5c9b      	ldrb	r3, [r3, r2]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_UART_Transmit+0x5a>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e076      	b.n	8003c00 <HAL_UART_Transmit+0x148>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2274      	movs	r2, #116	; 0x74
 8003b16:	2101      	movs	r1, #1
 8003b18:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2280      	movs	r2, #128	; 0x80
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2221      	movs	r2, #33	; 0x21
 8003b26:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b28:	f7fd fc0e 	bl	8001348 <HAL_GetTick>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1dba      	adds	r2, r7, #6
 8003b34:	2150      	movs	r1, #80	; 0x50
 8003b36:	8812      	ldrh	r2, [r2, #0]
 8003b38:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1dba      	adds	r2, r7, #6
 8003b3e:	2152      	movs	r1, #82	; 0x52
 8003b40:	8812      	ldrh	r2, [r2, #0]
 8003b42:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	015b      	lsls	r3, r3, #5
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d108      	bne.n	8003b62 <HAL_UART_Transmit+0xaa>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e003      	b.n	8003b6a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2274      	movs	r2, #116	; 0x74
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003b72:	e02c      	b.n	8003bce <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	0013      	movs	r3, r2
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2180      	movs	r1, #128	; 0x80
 8003b82:	f000 fed3 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 8003b86:	1e03      	subs	r3, r0, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e038      	b.n	8003c00 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	001a      	movs	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	05d2      	lsls	r2, r2, #23
 8003ba0:	0dd2      	lsrs	r2, r2, #23
 8003ba2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	e007      	b.n	8003bbc <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	781a      	ldrb	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2252      	movs	r2, #82	; 0x52
 8003bc0:	5a9b      	ldrh	r3, [r3, r2]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b299      	uxth	r1, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2252      	movs	r2, #82	; 0x52
 8003bcc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2252      	movs	r2, #82	; 0x52
 8003bd2:	5a9b      	ldrh	r3, [r3, r2]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1cc      	bne.n	8003b74 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	0013      	movs	r3, r2
 8003be4:	2200      	movs	r2, #0
 8003be6:	2140      	movs	r1, #64	; 0x40
 8003be8:	f000 fea0 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 8003bec:	1e03      	subs	r3, r0, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e005      	b.n	8003c00 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
  }
}
 8003c00:	0018      	movs	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b008      	add	sp, #32
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b0ab      	sub	sp, #172	; 0xac
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	22a4      	movs	r2, #164	; 0xa4
 8003c18:	18b9      	adds	r1, r7, r2
 8003c1a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	20a0      	movs	r0, #160	; 0xa0
 8003c24:	1839      	adds	r1, r7, r0
 8003c26:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	219c      	movs	r1, #156	; 0x9c
 8003c30:	1879      	adds	r1, r7, r1
 8003c32:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c34:	0011      	movs	r1, r2
 8003c36:	18bb      	adds	r3, r7, r2
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a99      	ldr	r2, [pc, #612]	; (8003ea0 <HAL_UART_IRQHandler+0x298>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2298      	movs	r2, #152	; 0x98
 8003c40:	18bc      	adds	r4, r7, r2
 8003c42:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003c44:	18bb      	adds	r3, r7, r2
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d114      	bne.n	8003c76 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c4c:	187b      	adds	r3, r7, r1
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2220      	movs	r2, #32
 8003c52:	4013      	ands	r3, r2
 8003c54:	d00f      	beq.n	8003c76 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c56:	183b      	adds	r3, r7, r0
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d00a      	beq.n	8003c76 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d100      	bne.n	8003c6a <HAL_UART_IRQHandler+0x62>
 8003c68:	e298      	b.n	800419c <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	0010      	movs	r0, r2
 8003c72:	4798      	blx	r3
      }
      return;
 8003c74:	e292      	b.n	800419c <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c76:	2398      	movs	r3, #152	; 0x98
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d100      	bne.n	8003c82 <HAL_UART_IRQHandler+0x7a>
 8003c80:	e114      	b.n	8003eac <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c82:	239c      	movs	r3, #156	; 0x9c
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d106      	bne.n	8003c9c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c8e:	23a0      	movs	r3, #160	; 0xa0
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a83      	ldr	r2, [pc, #524]	; (8003ea4 <HAL_UART_IRQHandler+0x29c>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	d100      	bne.n	8003c9c <HAL_UART_IRQHandler+0x94>
 8003c9a:	e107      	b.n	8003eac <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c9c:	23a4      	movs	r3, #164	; 0xa4
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d012      	beq.n	8003cce <HAL_UART_IRQHandler+0xc6>
 8003ca8:	23a0      	movs	r3, #160	; 0xa0
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	2380      	movs	r3, #128	; 0x80
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d00b      	beq.n	8003cce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2280      	movs	r2, #128	; 0x80
 8003cc2:	589b      	ldr	r3, [r3, r2]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2180      	movs	r1, #128	; 0x80
 8003ccc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cce:	23a4      	movs	r3, #164	; 0xa4
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d011      	beq.n	8003cfe <HAL_UART_IRQHandler+0xf6>
 8003cda:	239c      	movs	r3, #156	; 0x9c
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d00b      	beq.n	8003cfe <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2202      	movs	r2, #2
 8003cec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2280      	movs	r2, #128	; 0x80
 8003cf2:	589b      	ldr	r3, [r3, r2]
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2180      	movs	r1, #128	; 0x80
 8003cfc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cfe:	23a4      	movs	r3, #164	; 0xa4
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2204      	movs	r2, #4
 8003d06:	4013      	ands	r3, r2
 8003d08:	d011      	beq.n	8003d2e <HAL_UART_IRQHandler+0x126>
 8003d0a:	239c      	movs	r3, #156	; 0x9c
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2201      	movs	r2, #1
 8003d12:	4013      	ands	r3, r2
 8003d14:	d00b      	beq.n	8003d2e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2280      	movs	r2, #128	; 0x80
 8003d22:	589b      	ldr	r3, [r3, r2]
 8003d24:	2202      	movs	r2, #2
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2180      	movs	r1, #128	; 0x80
 8003d2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d2e:	23a4      	movs	r3, #164	; 0xa4
 8003d30:	18fb      	adds	r3, r7, r3
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2208      	movs	r2, #8
 8003d36:	4013      	ands	r3, r2
 8003d38:	d017      	beq.n	8003d6a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d3a:	23a0      	movs	r3, #160	; 0xa0
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2220      	movs	r2, #32
 8003d42:	4013      	ands	r3, r2
 8003d44:	d105      	bne.n	8003d52 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d46:	239c      	movs	r3, #156	; 0x9c
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d50:	d00b      	beq.n	8003d6a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2208      	movs	r2, #8
 8003d58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2280      	movs	r2, #128	; 0x80
 8003d5e:	589b      	ldr	r3, [r3, r2]
 8003d60:	2208      	movs	r2, #8
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2180      	movs	r1, #128	; 0x80
 8003d68:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d6a:	23a4      	movs	r3, #164	; 0xa4
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	4013      	ands	r3, r2
 8003d76:	d013      	beq.n	8003da0 <HAL_UART_IRQHandler+0x198>
 8003d78:	23a0      	movs	r3, #160	; 0xa0
 8003d7a:	18fb      	adds	r3, r7, r3
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	2380      	movs	r3, #128	; 0x80
 8003d80:	04db      	lsls	r3, r3, #19
 8003d82:	4013      	ands	r3, r2
 8003d84:	d00c      	beq.n	8003da0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2280      	movs	r2, #128	; 0x80
 8003d8c:	0112      	lsls	r2, r2, #4
 8003d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2280      	movs	r2, #128	; 0x80
 8003d94:	589b      	ldr	r3, [r3, r2]
 8003d96:	2220      	movs	r2, #32
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2180      	movs	r1, #128	; 0x80
 8003d9e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2280      	movs	r2, #128	; 0x80
 8003da4:	589b      	ldr	r3, [r3, r2]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d100      	bne.n	8003dac <HAL_UART_IRQHandler+0x1a4>
 8003daa:	e1f9      	b.n	80041a0 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dac:	23a4      	movs	r3, #164	; 0xa4
 8003dae:	18fb      	adds	r3, r7, r3
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2220      	movs	r2, #32
 8003db4:	4013      	ands	r3, r2
 8003db6:	d00e      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003db8:	23a0      	movs	r3, #160	; 0xa0
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d008      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d004      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	0010      	movs	r0, r2
 8003dd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2280      	movs	r2, #128	; 0x80
 8003dda:	589b      	ldr	r3, [r3, r2]
 8003ddc:	2194      	movs	r1, #148	; 0x94
 8003dde:	187a      	adds	r2, r7, r1
 8003de0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2240      	movs	r2, #64	; 0x40
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b40      	cmp	r3, #64	; 0x40
 8003dee:	d004      	beq.n	8003dfa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003df0:	187b      	adds	r3, r7, r1
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2228      	movs	r2, #40	; 0x28
 8003df6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003df8:	d047      	beq.n	8003e8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f000 fe59 	bl	8004ab4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2240      	movs	r2, #64	; 0x40
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	d137      	bne.n	8003e80 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e10:	f3ef 8310 	mrs	r3, PRIMASK
 8003e14:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e18:	2090      	movs	r0, #144	; 0x90
 8003e1a:	183a      	adds	r2, r7, r0
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	2301      	movs	r3, #1
 8003e20:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e24:	f383 8810 	msr	PRIMASK, r3
}
 8003e28:	46c0      	nop			; (mov r8, r8)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2140      	movs	r1, #64	; 0x40
 8003e36:	438a      	bics	r2, r1
 8003e38:	609a      	str	r2, [r3, #8]
 8003e3a:	183b      	adds	r3, r7, r0
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e42:	f383 8810 	msr	PRIMASK, r3
}
 8003e46:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d012      	beq.n	8003e76 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	4a14      	ldr	r2, [pc, #80]	; (8003ea8 <HAL_UART_IRQHandler+0x2a0>)
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f7fd fbbf 	bl	80015e0 <HAL_DMA_Abort_IT>
 8003e62:	1e03      	subs	r3, r0, #0
 8003e64:	d01a      	beq.n	8003e9c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	0018      	movs	r0, r3
 8003e72:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e74:	e012      	b.n	8003e9c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f000 f9a7 	bl	80041cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e7e:	e00d      	b.n	8003e9c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	0018      	movs	r0, r3
 8003e84:	f000 f9a2 	bl	80041cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e88:	e008      	b.n	8003e9c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f000 f99d 	bl	80041cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2280      	movs	r2, #128	; 0x80
 8003e96:	2100      	movs	r1, #0
 8003e98:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003e9a:	e181      	b.n	80041a0 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e9c:	46c0      	nop			; (mov r8, r8)
    return;
 8003e9e:	e17f      	b.n	80041a0 <HAL_UART_IRQHandler+0x598>
 8003ea0:	0000080f 	.word	0x0000080f
 8003ea4:	04000120 	.word	0x04000120
 8003ea8:	08004b79 	.word	0x08004b79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d000      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x2ae>
 8003eb4:	e133      	b.n	800411e <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003eb6:	23a4      	movs	r3, #164	; 0xa4
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d100      	bne.n	8003ec4 <HAL_UART_IRQHandler+0x2bc>
 8003ec2:	e12c      	b.n	800411e <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ec4:	23a0      	movs	r3, #160	; 0xa0
 8003ec6:	18fb      	adds	r3, r7, r3
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2210      	movs	r2, #16
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d100      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x2ca>
 8003ed0:	e125      	b.n	800411e <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2210      	movs	r2, #16
 8003ed8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2240      	movs	r2, #64	; 0x40
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b40      	cmp	r3, #64	; 0x40
 8003ee6:	d000      	beq.n	8003eea <HAL_UART_IRQHandler+0x2e2>
 8003ee8:	e09d      	b.n	8004026 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	217e      	movs	r1, #126	; 0x7e
 8003ef4:	187b      	adds	r3, r7, r1
 8003ef6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003ef8:	187b      	adds	r3, r7, r1
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d100      	bne.n	8003f02 <HAL_UART_IRQHandler+0x2fa>
 8003f00:	e150      	b.n	80041a4 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2258      	movs	r2, #88	; 0x58
 8003f06:	5a9b      	ldrh	r3, [r3, r2]
 8003f08:	187a      	adds	r2, r7, r1
 8003f0a:	8812      	ldrh	r2, [r2, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d300      	bcc.n	8003f12 <HAL_UART_IRQHandler+0x30a>
 8003f10:	e148      	b.n	80041a4 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	187a      	adds	r2, r7, r1
 8003f16:	215a      	movs	r1, #90	; 0x5a
 8003f18:	8812      	ldrh	r2, [r2, #0]
 8003f1a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2220      	movs	r2, #32
 8003f26:	4013      	ands	r3, r2
 8003f28:	d16e      	bne.n	8004008 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f2e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f32:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f34:	2301      	movs	r3, #1
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3a:	f383 8810 	msr	PRIMASK, r3
}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	499a      	ldr	r1, [pc, #616]	; (80041b4 <HAL_UART_IRQHandler+0x5ac>)
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f52:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	f383 8810 	msr	PRIMASK, r3
}
 8003f5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f60:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f64:	677b      	str	r3, [r7, #116]	; 0x74
 8003f66:	2301      	movs	r3, #1
 8003f68:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f6c:	f383 8810 	msr	PRIMASK, r3
}
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	438a      	bics	r2, r1
 8003f80:	609a      	str	r2, [r3, #8]
 8003f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f84:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f88:	f383 8810 	msr	PRIMASK, r3
}
 8003f8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f92:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f96:	673b      	str	r3, [r7, #112]	; 0x70
 8003f98:	2301      	movs	r3, #1
 8003f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9e:	f383 8810 	msr	PRIMASK, r3
}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2140      	movs	r1, #64	; 0x40
 8003fb0:	438a      	bics	r2, r1
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fb6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fba:	f383 8810 	msr	PRIMASK, r3
}
 8003fbe:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fdc:	f383 8810 	msr	PRIMASK, r3
}
 8003fe0:	46c0      	nop			; (mov r8, r8)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2110      	movs	r1, #16
 8003fee:	438a      	bics	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff8:	f383 8810 	msr	PRIMASK, r3
}
 8003ffc:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	0018      	movs	r0, r3
 8004004:	f7fd faac 	bl	8001560 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2258      	movs	r2, #88	; 0x58
 800400c:	5a9a      	ldrh	r2, [r3, r2]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	215a      	movs	r1, #90	; 0x5a
 8004012:	5a5b      	ldrh	r3, [r3, r1]
 8004014:	b29b      	uxth	r3, r3
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	b29a      	uxth	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0011      	movs	r1, r2
 800401e:	0018      	movs	r0, r3
 8004020:	f000 f8dc 	bl	80041dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004024:	e0be      	b.n	80041a4 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2258      	movs	r2, #88	; 0x58
 800402a:	5a99      	ldrh	r1, [r3, r2]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	225a      	movs	r2, #90	; 0x5a
 8004030:	5a9b      	ldrh	r3, [r3, r2]
 8004032:	b29a      	uxth	r2, r3
 8004034:	208e      	movs	r0, #142	; 0x8e
 8004036:	183b      	adds	r3, r7, r0
 8004038:	1a8a      	subs	r2, r1, r2
 800403a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	225a      	movs	r2, #90	; 0x5a
 8004040:	5a9b      	ldrh	r3, [r3, r2]
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d100      	bne.n	800404a <HAL_UART_IRQHandler+0x442>
 8004048:	e0ae      	b.n	80041a8 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 800404a:	183b      	adds	r3, r7, r0
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d100      	bne.n	8004054 <HAL_UART_IRQHandler+0x44c>
 8004052:	e0a9      	b.n	80041a8 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004054:	f3ef 8310 	mrs	r3, PRIMASK
 8004058:	60fb      	str	r3, [r7, #12]
  return(result);
 800405a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800405c:	2488      	movs	r4, #136	; 0x88
 800405e:	193a      	adds	r2, r7, r4
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	2301      	movs	r3, #1
 8004064:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f383 8810 	msr	PRIMASK, r3
}
 800406c:	46c0      	nop			; (mov r8, r8)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	494f      	ldr	r1, [pc, #316]	; (80041b8 <HAL_UART_IRQHandler+0x5b0>)
 800407a:	400a      	ands	r2, r1
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	193b      	adds	r3, r7, r4
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f383 8810 	msr	PRIMASK, r3
}
 800408a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800408c:	f3ef 8310 	mrs	r3, PRIMASK
 8004090:	61bb      	str	r3, [r7, #24]
  return(result);
 8004092:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004094:	2484      	movs	r4, #132	; 0x84
 8004096:	193a      	adds	r2, r7, r4
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	2301      	movs	r3, #1
 800409c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f383 8810 	msr	PRIMASK, r3
}
 80040a4:	46c0      	nop			; (mov r8, r8)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2101      	movs	r1, #1
 80040b2:	438a      	bics	r2, r1
 80040b4:	609a      	str	r2, [r3, #8]
 80040b6:	193b      	adds	r3, r7, r4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	f383 8810 	msr	PRIMASK, r3
}
 80040c2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d6:	f3ef 8310 	mrs	r3, PRIMASK
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040de:	2480      	movs	r4, #128	; 0x80
 80040e0:	193a      	adds	r2, r7, r4
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	2301      	movs	r3, #1
 80040e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	f383 8810 	msr	PRIMASK, r3
}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2110      	movs	r1, #16
 80040fc:	438a      	bics	r2, r1
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	193b      	adds	r3, r7, r4
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004108:	f383 8810 	msr	PRIMASK, r3
}
 800410c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800410e:	183b      	adds	r3, r7, r0
 8004110:	881a      	ldrh	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	0011      	movs	r1, r2
 8004116:	0018      	movs	r0, r3
 8004118:	f000 f860 	bl	80041dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800411c:	e044      	b.n	80041a8 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800411e:	23a4      	movs	r3, #164	; 0xa4
 8004120:	18fb      	adds	r3, r7, r3
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	035b      	lsls	r3, r3, #13
 8004128:	4013      	ands	r3, r2
 800412a:	d010      	beq.n	800414e <HAL_UART_IRQHandler+0x546>
 800412c:	239c      	movs	r3, #156	; 0x9c
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	03db      	lsls	r3, r3, #15
 8004136:	4013      	ands	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2280      	movs	r2, #128	; 0x80
 8004140:	0352      	lsls	r2, r2, #13
 8004142:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	0018      	movs	r0, r3
 8004148:	f000 fd58 	bl	8004bfc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800414c:	e02f      	b.n	80041ae <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800414e:	23a4      	movs	r3, #164	; 0xa4
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2280      	movs	r2, #128	; 0x80
 8004156:	4013      	ands	r3, r2
 8004158:	d00f      	beq.n	800417a <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800415a:	23a0      	movs	r3, #160	; 0xa0
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2280      	movs	r2, #128	; 0x80
 8004162:	4013      	ands	r3, r2
 8004164:	d009      	beq.n	800417a <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01e      	beq.n	80041ac <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	0010      	movs	r0, r2
 8004176:	4798      	blx	r3
    }
    return;
 8004178:	e018      	b.n	80041ac <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800417a:	23a4      	movs	r3, #164	; 0xa4
 800417c:	18fb      	adds	r3, r7, r3
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2240      	movs	r2, #64	; 0x40
 8004182:	4013      	ands	r3, r2
 8004184:	d013      	beq.n	80041ae <HAL_UART_IRQHandler+0x5a6>
 8004186:	23a0      	movs	r3, #160	; 0xa0
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2240      	movs	r2, #64	; 0x40
 800418e:	4013      	ands	r3, r2
 8004190:	d00d      	beq.n	80041ae <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	0018      	movs	r0, r3
 8004196:	f000 fd06 	bl	8004ba6 <UART_EndTransmit_IT>
    return;
 800419a:	e008      	b.n	80041ae <HAL_UART_IRQHandler+0x5a6>
      return;
 800419c:	46c0      	nop			; (mov r8, r8)
 800419e:	e006      	b.n	80041ae <HAL_UART_IRQHandler+0x5a6>
    return;
 80041a0:	46c0      	nop			; (mov r8, r8)
 80041a2:	e004      	b.n	80041ae <HAL_UART_IRQHandler+0x5a6>
      return;
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	e002      	b.n	80041ae <HAL_UART_IRQHandler+0x5a6>
      return;
 80041a8:	46c0      	nop			; (mov r8, r8)
 80041aa:	e000      	b.n	80041ae <HAL_UART_IRQHandler+0x5a6>
    return;
 80041ac:	46c0      	nop			; (mov r8, r8)
  }

}
 80041ae:	46bd      	mov	sp, r7
 80041b0:	b02b      	add	sp, #172	; 0xac
 80041b2:	bd90      	pop	{r4, r7, pc}
 80041b4:	fffffeff 	.word	0xfffffeff
 80041b8:	fffffedf 	.word	0xfffffedf

080041bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b002      	add	sp, #8
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b002      	add	sp, #8
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	000a      	movs	r2, r1
 80041e6:	1cbb      	adds	r3, r7, #2
 80041e8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b002      	add	sp, #8
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041f4:	b5b0      	push	{r4, r5, r7, lr}
 80041f6:	b08e      	sub	sp, #56	; 0x38
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041fc:	231a      	movs	r3, #26
 80041fe:	2218      	movs	r2, #24
 8004200:	189b      	adds	r3, r3, r2
 8004202:	19db      	adds	r3, r3, r7
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	431a      	orrs	r2, r3
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	431a      	orrs	r2, r3
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	4313      	orrs	r3, r2
 800421e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4ac3      	ldr	r2, [pc, #780]	; (8004534 <UART_SetConfig+0x340>)
 8004228:	4013      	ands	r3, r2
 800422a:	0019      	movs	r1, r3
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004232:	430a      	orrs	r2, r1
 8004234:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4abe      	ldr	r2, [pc, #760]	; (8004538 <UART_SetConfig+0x344>)
 800423e:	4013      	ands	r3, r2
 8004240:	0019      	movs	r1, r3
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4ab8      	ldr	r2, [pc, #736]	; (800453c <UART_SetConfig+0x348>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004264:	4313      	orrs	r3, r2
 8004266:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	4ab4      	ldr	r2, [pc, #720]	; (8004540 <UART_SetConfig+0x34c>)
 8004270:	4013      	ands	r3, r2
 8004272:	0019      	movs	r1, r3
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800427a:	430a      	orrs	r2, r1
 800427c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4ab0      	ldr	r2, [pc, #704]	; (8004544 <UART_SetConfig+0x350>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d131      	bne.n	80042ec <UART_SetConfig+0xf8>
 8004288:	4baf      	ldr	r3, [pc, #700]	; (8004548 <UART_SetConfig+0x354>)
 800428a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428c:	2203      	movs	r2, #3
 800428e:	4013      	ands	r3, r2
 8004290:	2b03      	cmp	r3, #3
 8004292:	d01d      	beq.n	80042d0 <UART_SetConfig+0xdc>
 8004294:	d823      	bhi.n	80042de <UART_SetConfig+0xea>
 8004296:	2b02      	cmp	r3, #2
 8004298:	d00c      	beq.n	80042b4 <UART_SetConfig+0xc0>
 800429a:	d820      	bhi.n	80042de <UART_SetConfig+0xea>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <UART_SetConfig+0xb2>
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d00e      	beq.n	80042c2 <UART_SetConfig+0xce>
 80042a4:	e01b      	b.n	80042de <UART_SetConfig+0xea>
 80042a6:	231b      	movs	r3, #27
 80042a8:	2218      	movs	r2, #24
 80042aa:	189b      	adds	r3, r3, r2
 80042ac:	19db      	adds	r3, r3, r7
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	e0b4      	b.n	800441e <UART_SetConfig+0x22a>
 80042b4:	231b      	movs	r3, #27
 80042b6:	2218      	movs	r2, #24
 80042b8:	189b      	adds	r3, r3, r2
 80042ba:	19db      	adds	r3, r3, r7
 80042bc:	2202      	movs	r2, #2
 80042be:	701a      	strb	r2, [r3, #0]
 80042c0:	e0ad      	b.n	800441e <UART_SetConfig+0x22a>
 80042c2:	231b      	movs	r3, #27
 80042c4:	2218      	movs	r2, #24
 80042c6:	189b      	adds	r3, r3, r2
 80042c8:	19db      	adds	r3, r3, r7
 80042ca:	2204      	movs	r2, #4
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	e0a6      	b.n	800441e <UART_SetConfig+0x22a>
 80042d0:	231b      	movs	r3, #27
 80042d2:	2218      	movs	r2, #24
 80042d4:	189b      	adds	r3, r3, r2
 80042d6:	19db      	adds	r3, r3, r7
 80042d8:	2208      	movs	r2, #8
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	e09f      	b.n	800441e <UART_SetConfig+0x22a>
 80042de:	231b      	movs	r3, #27
 80042e0:	2218      	movs	r2, #24
 80042e2:	189b      	adds	r3, r3, r2
 80042e4:	19db      	adds	r3, r3, r7
 80042e6:	2210      	movs	r2, #16
 80042e8:	701a      	strb	r2, [r3, #0]
 80042ea:	e098      	b.n	800441e <UART_SetConfig+0x22a>
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a96      	ldr	r2, [pc, #600]	; (800454c <UART_SetConfig+0x358>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d131      	bne.n	800435a <UART_SetConfig+0x166>
 80042f6:	4b94      	ldr	r3, [pc, #592]	; (8004548 <UART_SetConfig+0x354>)
 80042f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fa:	220c      	movs	r2, #12
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	d01d      	beq.n	800433e <UART_SetConfig+0x14a>
 8004302:	d823      	bhi.n	800434c <UART_SetConfig+0x158>
 8004304:	2b08      	cmp	r3, #8
 8004306:	d00c      	beq.n	8004322 <UART_SetConfig+0x12e>
 8004308:	d820      	bhi.n	800434c <UART_SetConfig+0x158>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <UART_SetConfig+0x120>
 800430e:	2b04      	cmp	r3, #4
 8004310:	d00e      	beq.n	8004330 <UART_SetConfig+0x13c>
 8004312:	e01b      	b.n	800434c <UART_SetConfig+0x158>
 8004314:	231b      	movs	r3, #27
 8004316:	2218      	movs	r2, #24
 8004318:	189b      	adds	r3, r3, r2
 800431a:	19db      	adds	r3, r3, r7
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e07d      	b.n	800441e <UART_SetConfig+0x22a>
 8004322:	231b      	movs	r3, #27
 8004324:	2218      	movs	r2, #24
 8004326:	189b      	adds	r3, r3, r2
 8004328:	19db      	adds	r3, r3, r7
 800432a:	2202      	movs	r2, #2
 800432c:	701a      	strb	r2, [r3, #0]
 800432e:	e076      	b.n	800441e <UART_SetConfig+0x22a>
 8004330:	231b      	movs	r3, #27
 8004332:	2218      	movs	r2, #24
 8004334:	189b      	adds	r3, r3, r2
 8004336:	19db      	adds	r3, r3, r7
 8004338:	2204      	movs	r2, #4
 800433a:	701a      	strb	r2, [r3, #0]
 800433c:	e06f      	b.n	800441e <UART_SetConfig+0x22a>
 800433e:	231b      	movs	r3, #27
 8004340:	2218      	movs	r2, #24
 8004342:	189b      	adds	r3, r3, r2
 8004344:	19db      	adds	r3, r3, r7
 8004346:	2208      	movs	r2, #8
 8004348:	701a      	strb	r2, [r3, #0]
 800434a:	e068      	b.n	800441e <UART_SetConfig+0x22a>
 800434c:	231b      	movs	r3, #27
 800434e:	2218      	movs	r2, #24
 8004350:	189b      	adds	r3, r3, r2
 8004352:	19db      	adds	r3, r3, r7
 8004354:	2210      	movs	r2, #16
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e061      	b.n	800441e <UART_SetConfig+0x22a>
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a7c      	ldr	r2, [pc, #496]	; (8004550 <UART_SetConfig+0x35c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d106      	bne.n	8004372 <UART_SetConfig+0x17e>
 8004364:	231b      	movs	r3, #27
 8004366:	2218      	movs	r2, #24
 8004368:	189b      	adds	r3, r3, r2
 800436a:	19db      	adds	r3, r3, r7
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
 8004370:	e055      	b.n	800441e <UART_SetConfig+0x22a>
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a77      	ldr	r2, [pc, #476]	; (8004554 <UART_SetConfig+0x360>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d106      	bne.n	800438a <UART_SetConfig+0x196>
 800437c:	231b      	movs	r3, #27
 800437e:	2218      	movs	r2, #24
 8004380:	189b      	adds	r3, r3, r2
 8004382:	19db      	adds	r3, r3, r7
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	e049      	b.n	800441e <UART_SetConfig+0x22a>
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a6b      	ldr	r2, [pc, #428]	; (800453c <UART_SetConfig+0x348>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d13e      	bne.n	8004412 <UART_SetConfig+0x21e>
 8004394:	4b6c      	ldr	r3, [pc, #432]	; (8004548 <UART_SetConfig+0x354>)
 8004396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004398:	23c0      	movs	r3, #192	; 0xc0
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	4013      	ands	r3, r2
 800439e:	22c0      	movs	r2, #192	; 0xc0
 80043a0:	0112      	lsls	r2, r2, #4
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d027      	beq.n	80043f6 <UART_SetConfig+0x202>
 80043a6:	22c0      	movs	r2, #192	; 0xc0
 80043a8:	0112      	lsls	r2, r2, #4
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d82a      	bhi.n	8004404 <UART_SetConfig+0x210>
 80043ae:	2280      	movs	r2, #128	; 0x80
 80043b0:	0112      	lsls	r2, r2, #4
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d011      	beq.n	80043da <UART_SetConfig+0x1e6>
 80043b6:	2280      	movs	r2, #128	; 0x80
 80043b8:	0112      	lsls	r2, r2, #4
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d822      	bhi.n	8004404 <UART_SetConfig+0x210>
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d004      	beq.n	80043cc <UART_SetConfig+0x1d8>
 80043c2:	2280      	movs	r2, #128	; 0x80
 80043c4:	00d2      	lsls	r2, r2, #3
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00e      	beq.n	80043e8 <UART_SetConfig+0x1f4>
 80043ca:	e01b      	b.n	8004404 <UART_SetConfig+0x210>
 80043cc:	231b      	movs	r3, #27
 80043ce:	2218      	movs	r2, #24
 80043d0:	189b      	adds	r3, r3, r2
 80043d2:	19db      	adds	r3, r3, r7
 80043d4:	2200      	movs	r2, #0
 80043d6:	701a      	strb	r2, [r3, #0]
 80043d8:	e021      	b.n	800441e <UART_SetConfig+0x22a>
 80043da:	231b      	movs	r3, #27
 80043dc:	2218      	movs	r2, #24
 80043de:	189b      	adds	r3, r3, r2
 80043e0:	19db      	adds	r3, r3, r7
 80043e2:	2202      	movs	r2, #2
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	e01a      	b.n	800441e <UART_SetConfig+0x22a>
 80043e8:	231b      	movs	r3, #27
 80043ea:	2218      	movs	r2, #24
 80043ec:	189b      	adds	r3, r3, r2
 80043ee:	19db      	adds	r3, r3, r7
 80043f0:	2204      	movs	r2, #4
 80043f2:	701a      	strb	r2, [r3, #0]
 80043f4:	e013      	b.n	800441e <UART_SetConfig+0x22a>
 80043f6:	231b      	movs	r3, #27
 80043f8:	2218      	movs	r2, #24
 80043fa:	189b      	adds	r3, r3, r2
 80043fc:	19db      	adds	r3, r3, r7
 80043fe:	2208      	movs	r2, #8
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	e00c      	b.n	800441e <UART_SetConfig+0x22a>
 8004404:	231b      	movs	r3, #27
 8004406:	2218      	movs	r2, #24
 8004408:	189b      	adds	r3, r3, r2
 800440a:	19db      	adds	r3, r3, r7
 800440c:	2210      	movs	r2, #16
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	e005      	b.n	800441e <UART_SetConfig+0x22a>
 8004412:	231b      	movs	r3, #27
 8004414:	2218      	movs	r2, #24
 8004416:	189b      	adds	r3, r3, r2
 8004418:	19db      	adds	r3, r3, r7
 800441a:	2210      	movs	r2, #16
 800441c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a46      	ldr	r2, [pc, #280]	; (800453c <UART_SetConfig+0x348>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d000      	beq.n	800442a <UART_SetConfig+0x236>
 8004428:	e09a      	b.n	8004560 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800442a:	231b      	movs	r3, #27
 800442c:	2218      	movs	r2, #24
 800442e:	189b      	adds	r3, r3, r2
 8004430:	19db      	adds	r3, r3, r7
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d01d      	beq.n	8004474 <UART_SetConfig+0x280>
 8004438:	dc20      	bgt.n	800447c <UART_SetConfig+0x288>
 800443a:	2b04      	cmp	r3, #4
 800443c:	d015      	beq.n	800446a <UART_SetConfig+0x276>
 800443e:	dc1d      	bgt.n	800447c <UART_SetConfig+0x288>
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <UART_SetConfig+0x256>
 8004444:	2b02      	cmp	r3, #2
 8004446:	d005      	beq.n	8004454 <UART_SetConfig+0x260>
 8004448:	e018      	b.n	800447c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800444a:	f7fe f8b1 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 800444e:	0003      	movs	r3, r0
 8004450:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004452:	e01c      	b.n	800448e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004454:	4b3c      	ldr	r3, [pc, #240]	; (8004548 <UART_SetConfig+0x354>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2210      	movs	r2, #16
 800445a:	4013      	ands	r3, r2
 800445c:	d002      	beq.n	8004464 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800445e:	4b3e      	ldr	r3, [pc, #248]	; (8004558 <UART_SetConfig+0x364>)
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004462:	e014      	b.n	800448e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004464:	4b3d      	ldr	r3, [pc, #244]	; (800455c <UART_SetConfig+0x368>)
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004468:	e011      	b.n	800448e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800446a:	f7fd fff1 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 800446e:	0003      	movs	r3, r0
 8004470:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004472:	e00c      	b.n	800448e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800447a:	e008      	b.n	800448e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004480:	231a      	movs	r3, #26
 8004482:	2218      	movs	r2, #24
 8004484:	189b      	adds	r3, r3, r2
 8004486:	19db      	adds	r3, r3, r7
 8004488:	2201      	movs	r2, #1
 800448a:	701a      	strb	r2, [r3, #0]
        break;
 800448c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800448e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d100      	bne.n	8004496 <UART_SetConfig+0x2a2>
 8004494:	e134      	b.n	8004700 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	0013      	movs	r3, r2
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	189b      	adds	r3, r3, r2
 80044a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d305      	bcc.n	80044b2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d906      	bls.n	80044c0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80044b2:	231a      	movs	r3, #26
 80044b4:	2218      	movs	r2, #24
 80044b6:	189b      	adds	r3, r3, r2
 80044b8:	19db      	adds	r3, r3, r7
 80044ba:	2201      	movs	r2, #1
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	e11f      	b.n	8004700 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	6939      	ldr	r1, [r7, #16]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	000b      	movs	r3, r1
 80044ce:	0e1b      	lsrs	r3, r3, #24
 80044d0:	0010      	movs	r0, r2
 80044d2:	0205      	lsls	r5, r0, #8
 80044d4:	431d      	orrs	r5, r3
 80044d6:	000b      	movs	r3, r1
 80044d8:	021c      	lsls	r4, r3, #8
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	085b      	lsrs	r3, r3, #1
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	68b8      	ldr	r0, [r7, #8]
 80044e8:	68f9      	ldr	r1, [r7, #12]
 80044ea:	1900      	adds	r0, r0, r4
 80044ec:	4169      	adcs	r1, r5
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	2300      	movs	r3, #0
 80044f6:	607b      	str	r3, [r7, #4]
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f7fb fe9a 	bl	8000234 <__aeabi_uldivmod>
 8004500:	0002      	movs	r2, r0
 8004502:	000b      	movs	r3, r1
 8004504:	0013      	movs	r3, r2
 8004506:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800450a:	23c0      	movs	r3, #192	; 0xc0
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	429a      	cmp	r2, r3
 8004510:	d309      	bcc.n	8004526 <UART_SetConfig+0x332>
 8004512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004514:	2380      	movs	r3, #128	; 0x80
 8004516:	035b      	lsls	r3, r3, #13
 8004518:	429a      	cmp	r2, r3
 800451a:	d204      	bcs.n	8004526 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004522:	60da      	str	r2, [r3, #12]
 8004524:	e0ec      	b.n	8004700 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8004526:	231a      	movs	r3, #26
 8004528:	2218      	movs	r2, #24
 800452a:	189b      	adds	r3, r3, r2
 800452c:	19db      	adds	r3, r3, r7
 800452e:	2201      	movs	r2, #1
 8004530:	701a      	strb	r2, [r3, #0]
 8004532:	e0e5      	b.n	8004700 <UART_SetConfig+0x50c>
 8004534:	efff69f3 	.word	0xefff69f3
 8004538:	ffffcfff 	.word	0xffffcfff
 800453c:	40004800 	.word	0x40004800
 8004540:	fffff4ff 	.word	0xfffff4ff
 8004544:	40013800 	.word	0x40013800
 8004548:	40021000 	.word	0x40021000
 800454c:	40004400 	.word	0x40004400
 8004550:	40004c00 	.word	0x40004c00
 8004554:	40005000 	.word	0x40005000
 8004558:	003d0900 	.word	0x003d0900
 800455c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	69da      	ldr	r2, [r3, #28]
 8004564:	2380      	movs	r3, #128	; 0x80
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	429a      	cmp	r2, r3
 800456a:	d000      	beq.n	800456e <UART_SetConfig+0x37a>
 800456c:	e071      	b.n	8004652 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800456e:	231b      	movs	r3, #27
 8004570:	2218      	movs	r2, #24
 8004572:	189b      	adds	r3, r3, r2
 8004574:	19db      	adds	r3, r3, r7
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b08      	cmp	r3, #8
 800457a:	d822      	bhi.n	80045c2 <UART_SetConfig+0x3ce>
 800457c:	009a      	lsls	r2, r3, #2
 800457e:	4b68      	ldr	r3, [pc, #416]	; (8004720 <UART_SetConfig+0x52c>)
 8004580:	18d3      	adds	r3, r2, r3
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004586:	f7fe f813 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 800458a:	0003      	movs	r3, r0
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800458e:	e021      	b.n	80045d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004590:	f7fe f824 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 8004594:	0003      	movs	r3, r0
 8004596:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004598:	e01c      	b.n	80045d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800459a:	4b62      	ldr	r3, [pc, #392]	; (8004724 <UART_SetConfig+0x530>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2210      	movs	r2, #16
 80045a0:	4013      	ands	r3, r2
 80045a2:	d002      	beq.n	80045aa <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80045a4:	4b60      	ldr	r3, [pc, #384]	; (8004728 <UART_SetConfig+0x534>)
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80045a8:	e014      	b.n	80045d4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80045aa:	4b60      	ldr	r3, [pc, #384]	; (800472c <UART_SetConfig+0x538>)
 80045ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045ae:	e011      	b.n	80045d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045b0:	f7fd ff4e 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 80045b4:	0003      	movs	r3, r0
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045b8:	e00c      	b.n	80045d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ba:	2380      	movs	r3, #128	; 0x80
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045c0:	e008      	b.n	80045d4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80045c6:	231a      	movs	r3, #26
 80045c8:	2218      	movs	r2, #24
 80045ca:	189b      	adds	r3, r3, r2
 80045cc:	19db      	adds	r3, r3, r7
 80045ce:	2201      	movs	r2, #1
 80045d0:	701a      	strb	r2, [r3, #0]
        break;
 80045d2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d100      	bne.n	80045dc <UART_SetConfig+0x3e8>
 80045da:	e091      	b.n	8004700 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045de:	005a      	lsls	r2, r3, #1
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	085b      	lsrs	r3, r3, #1
 80045e6:	18d2      	adds	r2, r2, r3
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	0019      	movs	r1, r3
 80045ee:	0010      	movs	r0, r2
 80045f0:	f7fb fd94 	bl	800011c <__udivsi3>
 80045f4:	0003      	movs	r3, r0
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	2b0f      	cmp	r3, #15
 80045fe:	d921      	bls.n	8004644 <UART_SetConfig+0x450>
 8004600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004602:	2380      	movs	r3, #128	; 0x80
 8004604:	025b      	lsls	r3, r3, #9
 8004606:	429a      	cmp	r2, r3
 8004608:	d21c      	bcs.n	8004644 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	b29a      	uxth	r2, r3
 800460e:	200e      	movs	r0, #14
 8004610:	2418      	movs	r4, #24
 8004612:	1903      	adds	r3, r0, r4
 8004614:	19db      	adds	r3, r3, r7
 8004616:	210f      	movs	r1, #15
 8004618:	438a      	bics	r2, r1
 800461a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	085b      	lsrs	r3, r3, #1
 8004620:	b29b      	uxth	r3, r3
 8004622:	2207      	movs	r2, #7
 8004624:	4013      	ands	r3, r2
 8004626:	b299      	uxth	r1, r3
 8004628:	1903      	adds	r3, r0, r4
 800462a:	19db      	adds	r3, r3, r7
 800462c:	1902      	adds	r2, r0, r4
 800462e:	19d2      	adds	r2, r2, r7
 8004630:	8812      	ldrh	r2, [r2, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	1902      	adds	r2, r0, r4
 800463c:	19d2      	adds	r2, r2, r7
 800463e:	8812      	ldrh	r2, [r2, #0]
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	e05d      	b.n	8004700 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8004644:	231a      	movs	r3, #26
 8004646:	2218      	movs	r2, #24
 8004648:	189b      	adds	r3, r3, r2
 800464a:	19db      	adds	r3, r3, r7
 800464c:	2201      	movs	r2, #1
 800464e:	701a      	strb	r2, [r3, #0]
 8004650:	e056      	b.n	8004700 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004652:	231b      	movs	r3, #27
 8004654:	2218      	movs	r2, #24
 8004656:	189b      	adds	r3, r3, r2
 8004658:	19db      	adds	r3, r3, r7
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d822      	bhi.n	80046a6 <UART_SetConfig+0x4b2>
 8004660:	009a      	lsls	r2, r3, #2
 8004662:	4b33      	ldr	r3, [pc, #204]	; (8004730 <UART_SetConfig+0x53c>)
 8004664:	18d3      	adds	r3, r2, r3
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800466a:	f7fd ffa1 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 800466e:	0003      	movs	r3, r0
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004672:	e021      	b.n	80046b8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004674:	f7fd ffb2 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 8004678:	0003      	movs	r3, r0
 800467a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800467c:	e01c      	b.n	80046b8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800467e:	4b29      	ldr	r3, [pc, #164]	; (8004724 <UART_SetConfig+0x530>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2210      	movs	r2, #16
 8004684:	4013      	ands	r3, r2
 8004686:	d002      	beq.n	800468e <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004688:	4b27      	ldr	r3, [pc, #156]	; (8004728 <UART_SetConfig+0x534>)
 800468a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800468c:	e014      	b.n	80046b8 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800468e:	4b27      	ldr	r3, [pc, #156]	; (800472c <UART_SetConfig+0x538>)
 8004690:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004692:	e011      	b.n	80046b8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004694:	f7fd fedc 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 8004698:	0003      	movs	r3, r0
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800469c:	e00c      	b.n	80046b8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046a4:	e008      	b.n	80046b8 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80046aa:	231a      	movs	r3, #26
 80046ac:	2218      	movs	r2, #24
 80046ae:	189b      	adds	r3, r3, r2
 80046b0:	19db      	adds	r3, r3, r7
 80046b2:	2201      	movs	r2, #1
 80046b4:	701a      	strb	r2, [r3, #0]
        break;
 80046b6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80046b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d020      	beq.n	8004700 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	085a      	lsrs	r2, r3, #1
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	18d2      	adds	r2, r2, r3
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	0019      	movs	r1, r3
 80046ce:	0010      	movs	r0, r2
 80046d0:	f7fb fd24 	bl	800011c <__udivsi3>
 80046d4:	0003      	movs	r3, r0
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	2b0f      	cmp	r3, #15
 80046de:	d909      	bls.n	80046f4 <UART_SetConfig+0x500>
 80046e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	025b      	lsls	r3, r3, #9
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d204      	bcs.n	80046f4 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046f0:	60da      	str	r2, [r3, #12]
 80046f2:	e005      	b.n	8004700 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80046f4:	231a      	movs	r3, #26
 80046f6:	2218      	movs	r2, #24
 80046f8:	189b      	adds	r3, r3, r2
 80046fa:	19db      	adds	r3, r3, r7
 80046fc:	2201      	movs	r2, #1
 80046fe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	2200      	movs	r2, #0
 8004704:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	2200      	movs	r2, #0
 800470a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800470c:	231a      	movs	r3, #26
 800470e:	2218      	movs	r2, #24
 8004710:	189b      	adds	r3, r3, r2
 8004712:	19db      	adds	r3, r3, r7
 8004714:	781b      	ldrb	r3, [r3, #0]
}
 8004716:	0018      	movs	r0, r3
 8004718:	46bd      	mov	sp, r7
 800471a:	b00e      	add	sp, #56	; 0x38
 800471c:	bdb0      	pop	{r4, r5, r7, pc}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	08006078 	.word	0x08006078
 8004724:	40021000 	.word	0x40021000
 8004728:	003d0900 	.word	0x003d0900
 800472c:	00f42400 	.word	0x00f42400
 8004730:	0800609c 	.word	0x0800609c

08004734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	2201      	movs	r2, #1
 8004742:	4013      	ands	r3, r2
 8004744:	d00b      	beq.n	800475e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	4a4a      	ldr	r2, [pc, #296]	; (8004878 <UART_AdvFeatureConfig+0x144>)
 800474e:	4013      	ands	r3, r2
 8004750:	0019      	movs	r1, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	2202      	movs	r2, #2
 8004764:	4013      	ands	r3, r2
 8004766:	d00b      	beq.n	8004780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	4a43      	ldr	r2, [pc, #268]	; (800487c <UART_AdvFeatureConfig+0x148>)
 8004770:	4013      	ands	r3, r2
 8004772:	0019      	movs	r1, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	2204      	movs	r2, #4
 8004786:	4013      	ands	r3, r2
 8004788:	d00b      	beq.n	80047a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4a3b      	ldr	r2, [pc, #236]	; (8004880 <UART_AdvFeatureConfig+0x14c>)
 8004792:	4013      	ands	r3, r2
 8004794:	0019      	movs	r1, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	2208      	movs	r2, #8
 80047a8:	4013      	ands	r3, r2
 80047aa:	d00b      	beq.n	80047c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4a34      	ldr	r2, [pc, #208]	; (8004884 <UART_AdvFeatureConfig+0x150>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	0019      	movs	r1, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	2210      	movs	r2, #16
 80047ca:	4013      	ands	r3, r2
 80047cc:	d00b      	beq.n	80047e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4a2c      	ldr	r2, [pc, #176]	; (8004888 <UART_AdvFeatureConfig+0x154>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	0019      	movs	r1, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	2220      	movs	r2, #32
 80047ec:	4013      	ands	r3, r2
 80047ee:	d00b      	beq.n	8004808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	4a25      	ldr	r2, [pc, #148]	; (800488c <UART_AdvFeatureConfig+0x158>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	0019      	movs	r1, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	2240      	movs	r2, #64	; 0x40
 800480e:	4013      	ands	r3, r2
 8004810:	d01d      	beq.n	800484e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a1d      	ldr	r2, [pc, #116]	; (8004890 <UART_AdvFeatureConfig+0x15c>)
 800481a:	4013      	ands	r3, r2
 800481c:	0019      	movs	r1, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800482e:	2380      	movs	r3, #128	; 0x80
 8004830:	035b      	lsls	r3, r3, #13
 8004832:	429a      	cmp	r2, r3
 8004834:	d10b      	bne.n	800484e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4a15      	ldr	r2, [pc, #84]	; (8004894 <UART_AdvFeatureConfig+0x160>)
 800483e:	4013      	ands	r3, r2
 8004840:	0019      	movs	r1, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	2280      	movs	r2, #128	; 0x80
 8004854:	4013      	ands	r3, r2
 8004856:	d00b      	beq.n	8004870 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4a0e      	ldr	r2, [pc, #56]	; (8004898 <UART_AdvFeatureConfig+0x164>)
 8004860:	4013      	ands	r3, r2
 8004862:	0019      	movs	r1, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
  }
}
 8004870:	46c0      	nop			; (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	b002      	add	sp, #8
 8004876:	bd80      	pop	{r7, pc}
 8004878:	fffdffff 	.word	0xfffdffff
 800487c:	fffeffff 	.word	0xfffeffff
 8004880:	fffbffff 	.word	0xfffbffff
 8004884:	ffff7fff 	.word	0xffff7fff
 8004888:	ffffefff 	.word	0xffffefff
 800488c:	ffffdfff 	.word	0xffffdfff
 8004890:	ffefffff 	.word	0xffefffff
 8004894:	ff9fffff 	.word	0xff9fffff
 8004898:	fff7ffff 	.word	0xfff7ffff

0800489c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2280      	movs	r2, #128	; 0x80
 80048a8:	2100      	movs	r1, #0
 80048aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048ac:	f7fc fd4c 	bl	8001348 <HAL_GetTick>
 80048b0:	0003      	movs	r3, r0
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2208      	movs	r2, #8
 80048bc:	4013      	ands	r3, r2
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d10c      	bne.n	80048dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2280      	movs	r2, #128	; 0x80
 80048c6:	0391      	lsls	r1, r2, #14
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	4a17      	ldr	r2, [pc, #92]	; (8004928 <UART_CheckIdleState+0x8c>)
 80048cc:	9200      	str	r2, [sp, #0]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f000 f82c 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 80048d4:	1e03      	subs	r3, r0, #0
 80048d6:	d001      	beq.n	80048dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e021      	b.n	8004920 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2204      	movs	r2, #4
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d10c      	bne.n	8004904 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2280      	movs	r2, #128	; 0x80
 80048ee:	03d1      	lsls	r1, r2, #15
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	4a0d      	ldr	r2, [pc, #52]	; (8004928 <UART_CheckIdleState+0x8c>)
 80048f4:	9200      	str	r2, [sp, #0]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f000 f818 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 80048fc:	1e03      	subs	r3, r0, #0
 80048fe:	d001      	beq.n	8004904 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e00d      	b.n	8004920 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2274      	movs	r2, #116	; 0x74
 800491a:	2100      	movs	r1, #0
 800491c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	0018      	movs	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	b004      	add	sp, #16
 8004926:	bd80      	pop	{r7, pc}
 8004928:	01ffffff 	.word	0x01ffffff

0800492c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b094      	sub	sp, #80	; 0x50
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	1dfb      	adds	r3, r7, #7
 800493a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493c:	e0a3      	b.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004940:	3301      	adds	r3, #1
 8004942:	d100      	bne.n	8004946 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004944:	e09f      	b.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004946:	f7fc fcff 	bl	8001348 <HAL_GetTick>
 800494a:	0002      	movs	r2, r0
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <UART_WaitOnFlagUntilTimeout+0x30>
 8004956:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004958:	2b00      	cmp	r3, #0
 800495a:	d13d      	bne.n	80049d8 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800495c:	f3ef 8310 	mrs	r3, PRIMASK
 8004960:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004964:	647b      	str	r3, [r7, #68]	; 0x44
 8004966:	2301      	movs	r3, #1
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496c:	f383 8810 	msr	PRIMASK, r3
}
 8004970:	46c0      	nop			; (mov r8, r8)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	494c      	ldr	r1, [pc, #304]	; (8004ab0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800497e:	400a      	ands	r2, r1
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004984:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	f383 8810 	msr	PRIMASK, r3
}
 800498c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498e:	f3ef 8310 	mrs	r3, PRIMASK
 8004992:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004996:	643b      	str	r3, [r7, #64]	; 0x40
 8004998:	2301      	movs	r3, #1
 800499a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499e:	f383 8810 	msr	PRIMASK, r3
}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2101      	movs	r1, #1
 80049b0:	438a      	bics	r2, r1
 80049b2:	609a      	str	r2, [r3, #8]
 80049b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ba:	f383 8810 	msr	PRIMASK, r3
}
 80049be:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2220      	movs	r2, #32
 80049ca:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2274      	movs	r2, #116	; 0x74
 80049d0:	2100      	movs	r1, #0
 80049d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e067      	b.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2204      	movs	r2, #4
 80049e0:	4013      	ands	r3, r2
 80049e2:	d050      	beq.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69da      	ldr	r2, [r3, #28]
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	401a      	ands	r2, r3
 80049f0:	2380      	movs	r3, #128	; 0x80
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d146      	bne.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2280      	movs	r2, #128	; 0x80
 80049fe:	0112      	lsls	r2, r2, #4
 8004a00:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a02:	f3ef 8310 	mrs	r3, PRIMASK
 8004a06:	613b      	str	r3, [r7, #16]
  return(result);
 8004a08:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f383 8810 	msr	PRIMASK, r3
}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4923      	ldr	r1, [pc, #140]	; (8004ab0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004a24:	400a      	ands	r2, r1
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	f383 8810 	msr	PRIMASK, r3
}
 8004a32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a34:	f3ef 8310 	mrs	r3, PRIMASK
 8004a38:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a3a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a3e:	2301      	movs	r3, #1
 8004a40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	f383 8810 	msr	PRIMASK, r3
}
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2101      	movs	r1, #1
 8004a56:	438a      	bics	r2, r1
 8004a58:	609a      	str	r2, [r3, #8]
 8004a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	f383 8810 	msr	PRIMASK, r3
}
 8004a64:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2280      	movs	r2, #128	; 0x80
 8004a76:	2120      	movs	r1, #32
 8004a78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2274      	movs	r2, #116	; 0x74
 8004a7e:	2100      	movs	r1, #0
 8004a80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e010      	b.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	425a      	negs	r2, r3
 8004a96:	4153      	adcs	r3, r2
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	001a      	movs	r2, r3
 8004a9c:	1dfb      	adds	r3, r7, #7
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d100      	bne.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004aa4:	e74b      	b.n	800493e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	b014      	add	sp, #80	; 0x50
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	fffffe5f 	.word	0xfffffe5f

08004ab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08e      	sub	sp, #56	; 0x38
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004abc:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac0:	617b      	str	r3, [r7, #20]
  return(result);
 8004ac2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	f383 8810 	msr	PRIMASK, r3
}
 8004ad0:	46c0      	nop			; (mov r8, r8)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4925      	ldr	r1, [pc, #148]	; (8004b74 <UART_EndRxTransfer+0xc0>)
 8004ade:	400a      	ands	r2, r1
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f383 8810 	msr	PRIMASK, r3
}
 8004aec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aee:	f3ef 8310 	mrs	r3, PRIMASK
 8004af2:	623b      	str	r3, [r7, #32]
  return(result);
 8004af4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af6:	633b      	str	r3, [r7, #48]	; 0x30
 8004af8:	2301      	movs	r3, #1
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	f383 8810 	msr	PRIMASK, r3
}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2101      	movs	r1, #1
 8004b10:	438a      	bics	r2, r1
 8004b12:	609a      	str	r2, [r3, #8]
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	f383 8810 	msr	PRIMASK, r3
}
 8004b1e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d118      	bne.n	8004b5a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b28:	f3ef 8310 	mrs	r3, PRIMASK
 8004b2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b2e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b32:	2301      	movs	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f383 8810 	msr	PRIMASK, r3
}
 8004b3c:	46c0      	nop			; (mov r8, r8)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2110      	movs	r1, #16
 8004b4a:	438a      	bics	r2, r1
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f383 8810 	msr	PRIMASK, r3
}
 8004b58:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004b6c:	46c0      	nop			; (mov r8, r8)
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b00e      	add	sp, #56	; 0x38
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	fffffedf 	.word	0xfffffedf

08004b78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	225a      	movs	r2, #90	; 0x5a
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2252      	movs	r2, #82	; 0x52
 8004b92:	2100      	movs	r1, #0
 8004b94:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f7ff fb17 	bl	80041cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	b004      	add	sp, #16
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b086      	sub	sp, #24
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bae:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	2301      	movs	r3, #1
 8004bba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f383 8810 	msr	PRIMASK, r3
}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2140      	movs	r1, #64	; 0x40
 8004bd0:	438a      	bics	r2, r1
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f383 8810 	msr	PRIMASK, r3
}
 8004bde:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f7ff fae4 	bl	80041bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bf4:	46c0      	nop			; (mov r8, r8)
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b006      	add	sp, #24
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c04:	46c0      	nop			; (mov r8, r8)
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b002      	add	sp, #8
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <hal_nrf_init>:

SPI_HandleTypeDef* _hspi_;
uint32_t _Timeout_;

void hal_nrf_init(SPI_HandleTypeDef* hspi, uint32_t Timeout)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
	_hspi_ = hspi;
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <hal_nrf_init+0x20>)
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	601a      	str	r2, [r3, #0]
	_Timeout_ = Timeout;
 8004c1c:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <hal_nrf_init+0x24>)
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	601a      	str	r2, [r3, #0]
}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b002      	add	sp, #8
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	200001f0 	.word	0x200001f0
 8004c30:	200001f4 	.word	0x200001f4

08004c34 <hal_nrf_read_reg>:

uint8_t hal_nrf_read_reg(uint8_t reg)
{
 8004c34:	b5b0      	push	{r4, r5, r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	0002      	movs	r2, r0
 8004c3c:	1dfb      	adds	r3, r7, #7
 8004c3e:	701a      	strb	r2, [r3, #0]
    uint8_t tx_buf[2];
    uint8_t rx_buf[2];
    tx_buf[0] = reg;
 8004c40:	240c      	movs	r4, #12
 8004c42:	193b      	adds	r3, r7, r4
 8004c44:	1dfa      	adds	r2, r7, #7
 8004c46:	7812      	ldrb	r2, [r2, #0]
 8004c48:	701a      	strb	r2, [r3, #0]
    tx_buf[1] = 0xFF;
 8004c4a:	193b      	adds	r3, r7, r4
 8004c4c:	22ff      	movs	r2, #255	; 0xff
 8004c4e:	705a      	strb	r2, [r3, #1]
    cs_enable();
 8004c50:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <hal_nrf_read_reg+0x58>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	2140      	movs	r1, #64	; 0x40
 8004c56:	0018      	movs	r0, r3
 8004c58:	f7fc fea5 	bl	80019a6 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(_hspi_, tx_buf, rx_buf, 2, _Timeout_);
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <hal_nrf_read_reg+0x5c>)
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <hal_nrf_read_reg+0x60>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2508      	movs	r5, #8
 8004c66:	197a      	adds	r2, r7, r5
 8004c68:	1939      	adds	r1, r7, r4
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	f7fe fc3f 	bl	80034f0 <HAL_SPI_TransmitReceive>
    cs_disable();
 8004c72:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <hal_nrf_read_reg+0x58>)
 8004c74:	2201      	movs	r2, #1
 8004c76:	2140      	movs	r1, #64	; 0x40
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f7fc fe94 	bl	80019a6 <HAL_GPIO_WritePin>
    return rx_buf[1];
 8004c7e:	197b      	adds	r3, r7, r5
 8004c80:	785b      	ldrb	r3, [r3, #1]
}
 8004c82:	0018      	movs	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b004      	add	sp, #16
 8004c88:	bdb0      	pop	{r4, r5, r7, pc}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	50000400 	.word	0x50000400
 8004c90:	200001f0 	.word	0x200001f0
 8004c94:	200001f4 	.word	0x200001f4

08004c98 <hal_nrf_read_multibyte_reg>:

uint16_t hal_nrf_read_multibyte_reg(uint8_t reg, uint8_t *pbuf, uint8_t len)
{
 8004c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9a:	b091      	sub	sp, #68	; 0x44
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	6039      	str	r1, [r7, #0]
 8004ca0:	0011      	movs	r1, r2
 8004ca2:	1dfb      	adds	r3, r7, #7
 8004ca4:	1c02      	adds	r2, r0, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	1dbb      	adds	r3, r7, #6
 8004caa:	1c0a      	adds	r2, r1, #0
 8004cac:	701a      	strb	r2, [r3, #0]
    uint8_t length;
    uint8_t buf[NRF_MAX_PL+1];

    switch(reg)
 8004cae:	1dfb      	adds	r3, r7, #7
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d01d      	beq.n	8004cf2 <hal_nrf_read_multibyte_reg+0x5a>
 8004cb6:	dc3d      	bgt.n	8004d34 <hal_nrf_read_multibyte_reg+0x9c>
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	dc02      	bgt.n	8004cc2 <hal_nrf_read_multibyte_reg+0x2a>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	da02      	bge.n	8004cc6 <hal_nrf_read_multibyte_reg+0x2e>
 8004cc0:	e038      	b.n	8004d34 <hal_nrf_read_multibyte_reg+0x9c>
 8004cc2:	2b06      	cmp	r3, #6
 8004cc4:	d136      	bne.n	8004d34 <hal_nrf_read_multibyte_reg+0x9c>
    {
    case HAL_NRF_PIPE0:
    case HAL_NRF_PIPE1:
    case HAL_NRF_TX:
        length = (!len ? hal_nrf_get_address_width() : len);
 8004cc6:	1dbb      	adds	r3, r7, #6
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d104      	bne.n	8004cd8 <hal_nrf_read_multibyte_reg+0x40>
 8004cce:	f000 fb00 	bl	80052d2 <hal_nrf_get_address_width>
 8004cd2:	0003      	movs	r3, r0
 8004cd4:	001a      	movs	r2, r3
 8004cd6:	e001      	b.n	8004cdc <hal_nrf_read_multibyte_reg+0x44>
 8004cd8:	1dbb      	adds	r3, r7, #6
 8004cda:	781a      	ldrb	r2, [r3, #0]
 8004cdc:	2337      	movs	r3, #55	; 0x37
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	701a      	strb	r2, [r3, #0]
        buf[0] = RX_ADDR_P0+reg;
 8004ce2:	1dfb      	adds	r3, r7, #7
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	330a      	adds	r3, #10
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	2314      	movs	r3, #20
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	701a      	strb	r2, [r3, #0]
        break;
 8004cf0:	e025      	b.n	8004d3e <hal_nrf_read_multibyte_reg+0xa6>

    case HAL_NRF_RX_PLOAD:
        reg = hal_nrf_get_rx_data_source();
 8004cf2:	1dfc      	adds	r4, r7, #7
 8004cf4:	f000 f906 	bl	8004f04 <hal_nrf_get_rx_data_source>
 8004cf8:	0003      	movs	r3, r0
 8004cfa:	7023      	strb	r3, [r4, #0]

        if (reg < 7) {
 8004cfc:	1dfb      	adds	r3, r7, #7
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b06      	cmp	r3, #6
 8004d02:	d812      	bhi.n	8004d2a <hal_nrf_read_multibyte_reg+0x92>
            length = (!len ? hal_nrf_read_rx_payload_width() : len);
 8004d04:	1dbb      	adds	r3, r7, #6
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d104      	bne.n	8004d16 <hal_nrf_read_multibyte_reg+0x7e>
 8004d0c:	f000 fc36 	bl	800557c <hal_nrf_read_rx_payload_width>
 8004d10:	0003      	movs	r3, r0
 8004d12:	001a      	movs	r2, r3
 8004d14:	e001      	b.n	8004d1a <hal_nrf_read_multibyte_reg+0x82>
 8004d16:	1dbb      	adds	r3, r7, #6
 8004d18:	781a      	ldrb	r2, [r3, #0]
 8004d1a:	2337      	movs	r3, #55	; 0x37
 8004d1c:	18fb      	adds	r3, r7, r3
 8004d1e:	701a      	strb	r2, [r3, #0]
            buf[0] = R_RX_PAYLOAD;
 8004d20:	2314      	movs	r3, #20
 8004d22:	18fb      	adds	r3, r7, r3
 8004d24:	2261      	movs	r2, #97	; 0x61
 8004d26:	701a      	strb	r2, [r3, #0]
        } else
            length = 0;
        break;
 8004d28:	e009      	b.n	8004d3e <hal_nrf_read_multibyte_reg+0xa6>
            length = 0;
 8004d2a:	2337      	movs	r3, #55	; 0x37
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	2200      	movs	r2, #0
 8004d30:	701a      	strb	r2, [r3, #0]
        break;
 8004d32:	e004      	b.n	8004d3e <hal_nrf_read_multibyte_reg+0xa6>

    default:
        length = 0;
 8004d34:	2337      	movs	r3, #55	; 0x37
 8004d36:	18fb      	adds	r3, r7, r3
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
        break;
 8004d3c:	46c0      	nop			; (mov r8, r8)
    }

    if (length > 0) {
 8004d3e:	2537      	movs	r5, #55	; 0x37
 8004d40:	197b      	adds	r3, r7, r5
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d02d      	beq.n	8004da4 <hal_nrf_read_multibyte_reg+0x10c>
        memset(&buf[1], 0, length);
 8004d48:	197b      	adds	r3, r7, r5
 8004d4a:	781a      	ldrb	r2, [r3, #0]
 8004d4c:	2614      	movs	r6, #20
 8004d4e:	19bb      	adds	r3, r7, r6
 8004d50:	3301      	adds	r3, #1
 8004d52:	2100      	movs	r1, #0
 8004d54:	0018      	movs	r0, r3
 8004d56:	f000 fc60 	bl	800561a <memset>
        uint8_t rx_buf[6];
        cs_enable();
 8004d5a:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <hal_nrf_read_multibyte_reg+0x12c>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2140      	movs	r1, #64	; 0x40
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7fc fe20 	bl	80019a6 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(_hspi_, buf, rx_buf, length+1, _Timeout_);
 8004d66:	4b18      	ldr	r3, [pc, #96]	; (8004dc8 <hal_nrf_read_multibyte_reg+0x130>)
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	197b      	adds	r3, r7, r5
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3301      	adds	r3, #1
 8004d72:	b29c      	uxth	r4, r3
 8004d74:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <hal_nrf_read_multibyte_reg+0x134>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	220c      	movs	r2, #12
 8004d7a:	18ba      	adds	r2, r7, r2
 8004d7c:	19b9      	adds	r1, r7, r6
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	0023      	movs	r3, r4
 8004d82:	f7fe fbb5 	bl	80034f0 <HAL_SPI_TransmitReceive>
        cs_disable();
 8004d86:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <hal_nrf_read_multibyte_reg+0x12c>)
 8004d88:	2201      	movs	r2, #1
 8004d8a:	2140      	movs	r1, #64	; 0x40
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f7fc fe0a 	bl	80019a6 <HAL_GPIO_WritePin>
        memcpy(pbuf, &rx_buf[1], length);
 8004d92:	197b      	adds	r3, r7, r5
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	230c      	movs	r3, #12
 8004d98:	18fb      	adds	r3, r7, r3
 8004d9a:	1c59      	adds	r1, r3, #1
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f000 fc32 	bl	8005608 <memcpy>
    }
    return (((uint16_t)reg << 8) | length);
 8004da4:	1dfb      	adds	r3, r7, #7
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	021b      	lsls	r3, r3, #8
 8004daa:	b21a      	sxth	r2, r3
 8004dac:	2337      	movs	r3, #55	; 0x37
 8004dae:	18fb      	adds	r3, r7, r3
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	b21b      	sxth	r3, r3
 8004db4:	4313      	orrs	r3, r2
 8004db6:	b21b      	sxth	r3, r3
 8004db8:	b29b      	uxth	r3, r3
}
 8004dba:	0018      	movs	r0, r3
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b00f      	add	sp, #60	; 0x3c
 8004dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	50000400 	.word	0x50000400
 8004dc8:	200001f0 	.word	0x200001f0
 8004dcc:	200001f4 	.word	0x200001f4

08004dd0 <hal_nrf_write_reg>:
uint8_t hal_nrf_write_reg(uint8_t reg, uint8_t value)
{
 8004dd0:	b5b0      	push	{r4, r5, r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	0002      	movs	r2, r0
 8004dd8:	1dfb      	adds	r3, r7, #7
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	1dbb      	adds	r3, r7, #6
 8004dde:	1c0a      	adds	r2, r1, #0
 8004de0:	701a      	strb	r2, [r3, #0]
    uint8_t tx_buf[2];
    uint8_t rx_buf[2];
    tx_buf[0] = W_REGISTER+reg;
 8004de2:	1dfb      	adds	r3, r7, #7
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	3320      	adds	r3, #32
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	240c      	movs	r4, #12
 8004dec:	193b      	adds	r3, r7, r4
 8004dee:	701a      	strb	r2, [r3, #0]
    tx_buf[1] = value;
 8004df0:	193b      	adds	r3, r7, r4
 8004df2:	1dba      	adds	r2, r7, #6
 8004df4:	7812      	ldrb	r2, [r2, #0]
 8004df6:	705a      	strb	r2, [r3, #1]
    cs_enable();
 8004df8:	4b0e      	ldr	r3, [pc, #56]	; (8004e34 <hal_nrf_write_reg+0x64>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2140      	movs	r1, #64	; 0x40
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f7fc fdd1 	bl	80019a6 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(_hspi_, tx_buf, rx_buf, 2, _Timeout_);
 8004e04:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <hal_nrf_write_reg+0x68>)
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <hal_nrf_write_reg+0x6c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2508      	movs	r5, #8
 8004e0e:	197a      	adds	r2, r7, r5
 8004e10:	1939      	adds	r1, r7, r4
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	2302      	movs	r3, #2
 8004e16:	f7fe fb6b 	bl	80034f0 <HAL_SPI_TransmitReceive>
    cs_disable();
 8004e1a:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <hal_nrf_write_reg+0x64>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	2140      	movs	r1, #64	; 0x40
 8004e20:	0018      	movs	r0, r3
 8004e22:	f7fc fdc0 	bl	80019a6 <HAL_GPIO_WritePin>
    return rx_buf[0];
 8004e26:	197b      	adds	r3, r7, r5
 8004e28:	781b      	ldrb	r3, [r3, #0]
}
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	b004      	add	sp, #16
 8004e30:	bdb0      	pop	{r4, r5, r7, pc}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	50000400 	.word	0x50000400
 8004e38:	200001f0 	.word	0x200001f0
 8004e3c:	200001f4 	.word	0x200001f4

08004e40 <hal_nrf_write_multibyte_reg>:

void hal_nrf_write_multibyte_reg(uint8_t reg, const uint8_t *pbuf, uint8_t length)
{
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	b08d      	sub	sp, #52	; 0x34
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6039      	str	r1, [r7, #0]
 8004e48:	0011      	movs	r1, r2
 8004e4a:	1dfb      	adds	r3, r7, #7
 8004e4c:	1c02      	adds	r2, r0, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	1dbb      	adds	r3, r7, #6
 8004e52:	1c0a      	adds	r2, r1, #0
 8004e54:	701a      	strb	r2, [r3, #0]
    uint8_t buf[NRF_MAX_PL+1];

    buf[0] = reg;
 8004e56:	240c      	movs	r4, #12
 8004e58:	193b      	adds	r3, r7, r4
 8004e5a:	1dfa      	adds	r2, r7, #7
 8004e5c:	7812      	ldrb	r2, [r2, #0]
 8004e5e:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[1], pbuf, length);
 8004e60:	1dbb      	adds	r3, r7, #6
 8004e62:	781a      	ldrb	r2, [r3, #0]
 8004e64:	6839      	ldr	r1, [r7, #0]
 8004e66:	193b      	adds	r3, r7, r4
 8004e68:	3301      	adds	r3, #1
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	f000 fbcc 	bl	8005608 <memcpy>
    cs_enable();
 8004e70:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <hal_nrf_write_multibyte_reg+0x68>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	2140      	movs	r1, #64	; 0x40
 8004e76:	0018      	movs	r0, r3
 8004e78:	f7fc fd95 	bl	80019a6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(_hspi_, buf, length+1, _Timeout_);
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <hal_nrf_write_multibyte_reg+0x6c>)
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	1dbb      	adds	r3, r7, #6
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3301      	adds	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <hal_nrf_write_multibyte_reg+0x70>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	1939      	adds	r1, r7, r4
 8004e90:	f7fe f9d8 	bl	8003244 <HAL_SPI_Transmit>
    cs_disable();
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <hal_nrf_write_multibyte_reg+0x68>)
 8004e96:	2201      	movs	r2, #1
 8004e98:	2140      	movs	r1, #64	; 0x40
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f7fc fd83 	bl	80019a6 <HAL_GPIO_WritePin>
}
 8004ea0:	46c0      	nop			; (mov r8, r8)
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	b00d      	add	sp, #52	; 0x34
 8004ea6:	bd90      	pop	{r4, r7, pc}
 8004ea8:	50000400 	.word	0x50000400
 8004eac:	200001f0 	.word	0x200001f0
 8004eb0:	200001f4 	.word	0x200001f4

08004eb4 <hal_nrf_nop>:

uint8_t hal_nrf_nop(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af02      	add	r7, sp, #8
    uint8_t status;
    cs_enable();
 8004eba:	4b0f      	ldr	r3, [pc, #60]	; (8004ef8 <hal_nrf_nop+0x44>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2140      	movs	r1, #64	; 0x40
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	f7fc fd70 	bl	80019a6 <HAL_GPIO_WritePin>
    uint8_t data = NOP;
 8004ec6:	1dbb      	adds	r3, r7, #6
 8004ec8:	22ff      	movs	r2, #255	; 0xff
 8004eca:	701a      	strb	r2, [r3, #0]
    HAL_SPI_TransmitReceive(_hspi_, &data, &status, 1, _Timeout_);
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <hal_nrf_nop+0x48>)
 8004ece:	6818      	ldr	r0, [r3, #0]
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <hal_nrf_nop+0x4c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	1dfa      	adds	r2, r7, #7
 8004ed6:	1db9      	adds	r1, r7, #6
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	2301      	movs	r3, #1
 8004edc:	f7fe fb08 	bl	80034f0 <HAL_SPI_TransmitReceive>
    cs_disable();
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <hal_nrf_nop+0x44>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	2140      	movs	r1, #64	; 0x40
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f7fc fd5d 	bl	80019a6 <HAL_GPIO_WritePin>
    return status;
 8004eec:	1dfb      	adds	r3, r7, #7
 8004eee:	781b      	ldrb	r3, [r3, #0]
}
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b002      	add	sp, #8
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	50000400 	.word	0x50000400
 8004efc:	200001f0 	.word	0x200001f0
 8004f00:	200001f4 	.word	0x200001f4

08004f04 <hal_nrf_get_rx_data_source>:

uint8_t hal_nrf_get_rx_data_source(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
    /* read STATUS.RX_P_NO content */
    return ((hal_nrf_nop() & (uint8_t)(_BIT(3)|_BIT(2)|_BIT(1))) >> 1);
 8004f08:	f7ff ffd4 	bl	8004eb4 <hal_nrf_nop>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	105b      	asrs	r3, r3, #1
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2207      	movs	r2, #7
 8004f14:	4013      	ands	r3, r2
 8004f16:	b2db      	uxtb	r3, r3
}
 8004f18:	0018      	movs	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <hal_nrf_flush_rx>:
    HAL_SPI_Transmit(_hspi_, &data, 1, _Timeout_);
    cs_disable();
}

void hal_nrf_flush_rx(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
    cs_enable();
 8004f26:	4b0d      	ldr	r3, [pc, #52]	; (8004f5c <hal_nrf_flush_rx+0x3c>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2140      	movs	r1, #64	; 0x40
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	f7fc fd3a 	bl	80019a6 <HAL_GPIO_WritePin>
    uint8_t data = FLUSH_RX;
 8004f32:	1dfb      	adds	r3, r7, #7
 8004f34:	22e2      	movs	r2, #226	; 0xe2
 8004f36:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(_hspi_, &data, 1, _Timeout_);
 8004f38:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <hal_nrf_flush_rx+0x40>)
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <hal_nrf_flush_rx+0x44>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	1df9      	adds	r1, r7, #7
 8004f42:	2201      	movs	r2, #1
 8004f44:	f7fe f97e 	bl	8003244 <HAL_SPI_Transmit>
    cs_disable();
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <hal_nrf_flush_rx+0x3c>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	2140      	movs	r1, #64	; 0x40
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f7fc fd29 	bl	80019a6 <HAL_GPIO_WritePin>
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b002      	add	sp, #8
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	50000400 	.word	0x50000400
 8004f60:	200001f0 	.word	0x200001f0
 8004f64:	200001f4 	.word	0x200001f4

08004f68 <hal_nrf_flush_tx>:

void hal_nrf_flush_tx(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
    cs_enable();
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <hal_nrf_flush_tx+0x3c>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	2140      	movs	r1, #64	; 0x40
 8004f74:	0018      	movs	r0, r3
 8004f76:	f7fc fd16 	bl	80019a6 <HAL_GPIO_WritePin>
    uint8_t data = FLUSH_TX;
 8004f7a:	1dfb      	adds	r3, r7, #7
 8004f7c:	22e1      	movs	r2, #225	; 0xe1
 8004f7e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(_hspi_, &data, 1, _Timeout_);;
 8004f80:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <hal_nrf_flush_tx+0x40>)
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	4b09      	ldr	r3, [pc, #36]	; (8004fac <hal_nrf_flush_tx+0x44>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	1df9      	adds	r1, r7, #7
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f7fe f95a 	bl	8003244 <HAL_SPI_Transmit>
    cs_disable();
 8004f90:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <hal_nrf_flush_tx+0x3c>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	2140      	movs	r1, #64	; 0x40
 8004f96:	0018      	movs	r0, r3
 8004f98:	f7fc fd05 	bl	80019a6 <HAL_GPIO_WritePin>
}
 8004f9c:	46c0      	nop			; (mov r8, r8)
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b002      	add	sp, #8
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	50000400 	.word	0x50000400
 8004fa8:	200001f0 	.word	0x200001f0
 8004fac:	200001f4 	.word	0x200001f4

08004fb0 <hal_nrf_set_operation_mode>:

void hal_nrf_set_operation_mode(hal_nrf_operation_mode_t op_mode)
{
 8004fb0:	b5b0      	push	{r4, r5, r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	1dfb      	adds	r3, r7, #7
 8004fba:	701a      	strb	r2, [r3, #0]
    uint8_t config = hal_nrf_read_reg(CONFIG);
 8004fbc:	250f      	movs	r5, #15
 8004fbe:	197c      	adds	r4, r7, r5
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	f7ff fe37 	bl	8004c34 <hal_nrf_read_reg>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	7023      	strb	r3, [r4, #0]

    if(op_mode == HAL_NRF_PRX) {
 8004fca:	1dfb      	adds	r3, r7, #7
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d106      	bne.n	8004fe0 <hal_nrf_set_operation_mode+0x30>
        config = (uint8_t)_SET_BIT(config, PRIM_RX);
 8004fd2:	197b      	adds	r3, r7, r5
 8004fd4:	197a      	adds	r2, r7, r5
 8004fd6:	7812      	ldrb	r2, [r2, #0]
 8004fd8:	2101      	movs	r1, #1
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	e006      	b.n	8004fee <hal_nrf_set_operation_mode+0x3e>
    } else {
        config = (uint8_t)_CLR_BIT(config, PRIM_RX);
 8004fe0:	220f      	movs	r2, #15
 8004fe2:	18bb      	adds	r3, r7, r2
 8004fe4:	18ba      	adds	r2, r7, r2
 8004fe6:	7812      	ldrb	r2, [r2, #0]
 8004fe8:	2101      	movs	r1, #1
 8004fea:	438a      	bics	r2, r1
 8004fec:	701a      	strb	r2, [r3, #0]
    }
    hal_nrf_write_reg(CONFIG, config);
 8004fee:	230f      	movs	r3, #15
 8004ff0:	18fb      	adds	r3, r7, r3
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	0019      	movs	r1, r3
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	f7ff feea 	bl	8004dd0 <hal_nrf_write_reg>
}
 8004ffc:	46c0      	nop			; (mov r8, r8)
 8004ffe:	46bd      	mov	sp, r7
 8005000:	b004      	add	sp, #16
 8005002:	bdb0      	pop	{r4, r5, r7, pc}

08005004 <hal_nrf_set_rf_channel>:
{
    hal_nrf_write_multibyte_reg(W_ACK_PAYLOAD | pipe, tx_pload, length);
}

void hal_nrf_set_rf_channel(uint8_t channel)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	0002      	movs	r2, r0
 800500c:	1dfb      	adds	r3, r7, #7
 800500e:	701a      	strb	r2, [r3, #0]
    uint8_t rf_ch = (uint8_t)(channel & 0x7f);
 8005010:	200f      	movs	r0, #15
 8005012:	183b      	adds	r3, r7, r0
 8005014:	1dfa      	adds	r2, r7, #7
 8005016:	7812      	ldrb	r2, [r2, #0]
 8005018:	217f      	movs	r1, #127	; 0x7f
 800501a:	400a      	ands	r2, r1
 800501c:	701a      	strb	r2, [r3, #0]
    hal_nrf_write_reg(RF_CH, rf_ch);
 800501e:	183b      	adds	r3, r7, r0
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	0019      	movs	r1, r3
 8005024:	2005      	movs	r0, #5
 8005026:	f7ff fed3 	bl	8004dd0 <hal_nrf_write_reg>
}
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	46bd      	mov	sp, r7
 800502e:	b004      	add	sp, #16
 8005030:	bd80      	pop	{r7, pc}

08005032 <hal_nrf_set_output_power>:
{
    return (hal_nrf_read_reg(RF_CH) & 0x7f);
}

void hal_nrf_set_output_power(hal_nrf_output_power_t power)
{
 8005032:	b5b0      	push	{r4, r5, r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	0002      	movs	r2, r0
 800503a:	1dfb      	adds	r3, r7, #7
 800503c:	701a      	strb	r2, [r3, #0]
    uint8_t rf_setup = hal_nrf_read_reg(RF_SETUP);
 800503e:	250f      	movs	r5, #15
 8005040:	197c      	adds	r4, r7, r5
 8005042:	2006      	movs	r0, #6
 8005044:	f7ff fdf6 	bl	8004c34 <hal_nrf_read_reg>
 8005048:	0003      	movs	r3, r0
 800504a:	7023      	strb	r3, [r4, #0]

    rf_setup &= (uint8_t)(~(uint8_t)(_BIT(RF_PWR0)|_BIT(RF_PWR1)));
 800504c:	0028      	movs	r0, r5
 800504e:	183b      	adds	r3, r7, r0
 8005050:	183a      	adds	r2, r7, r0
 8005052:	7812      	ldrb	r2, [r2, #0]
 8005054:	2106      	movs	r1, #6
 8005056:	438a      	bics	r2, r1
 8005058:	701a      	strb	r2, [r3, #0]
    rf_setup |= (uint8_t)(((int)power & 0x03)<<RF_PWR0);
 800505a:	1dfb      	adds	r3, r7, #7
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	18db      	adds	r3, r3, r3
 8005060:	b2db      	uxtb	r3, r3
 8005062:	b25b      	sxtb	r3, r3
 8005064:	2206      	movs	r2, #6
 8005066:	4013      	ands	r3, r2
 8005068:	b25a      	sxtb	r2, r3
 800506a:	183b      	adds	r3, r7, r0
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	b25b      	sxtb	r3, r3
 8005070:	4313      	orrs	r3, r2
 8005072:	b25a      	sxtb	r2, r3
 8005074:	183b      	adds	r3, r7, r0
 8005076:	701a      	strb	r2, [r3, #0]
    hal_nrf_write_reg(RF_SETUP, rf_setup);
 8005078:	183b      	adds	r3, r7, r0
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	0019      	movs	r1, r3
 800507e:	2006      	movs	r0, #6
 8005080:	f7ff fea6 	bl	8004dd0 <hal_nrf_write_reg>
}
 8005084:	46c0      	nop			; (mov r8, r8)
 8005086:	46bd      	mov	sp, r7
 8005088:	b004      	add	sp, #16
 800508a:	bdb0      	pop	{r4, r5, r7, pc}

0800508c <hal_nrf_set_datarate>:
    return (hal_nrf_output_power_t)
        ((hal_nrf_read_reg(RF_SETUP)>>RF_PWR0) & 0x03);
}

void hal_nrf_set_datarate(hal_nrf_datarate_t datarate)
{
 800508c:	b5b0      	push	{r4, r5, r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	0002      	movs	r2, r0
 8005094:	1dfb      	adds	r3, r7, #7
 8005096:	701a      	strb	r2, [r3, #0]
    uint8_t rf_setup = hal_nrf_read_reg(RF_SETUP);
 8005098:	250f      	movs	r5, #15
 800509a:	197c      	adds	r4, r7, r5
 800509c:	2006      	movs	r0, #6
 800509e:	f7ff fdc9 	bl	8004c34 <hal_nrf_read_reg>
 80050a2:	0003      	movs	r3, r0
 80050a4:	7023      	strb	r3, [r4, #0]

    switch (datarate)
 80050a6:	1dfb      	adds	r3, r7, #7
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00e      	beq.n	80050cc <hal_nrf_set_datarate+0x40>
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d11a      	bne.n	80050e8 <hal_nrf_set_datarate+0x5c>
    {
    case HAL_NRF_250KBPS:
        rf_setup = (uint8_t)_SET_BIT(rf_setup, RF_DR_LOW);
 80050b2:	197b      	adds	r3, r7, r5
 80050b4:	197a      	adds	r2, r7, r5
 80050b6:	7812      	ldrb	r2, [r2, #0]
 80050b8:	2120      	movs	r1, #32
 80050ba:	430a      	orrs	r2, r1
 80050bc:	701a      	strb	r2, [r3, #0]
        rf_setup = (uint8_t)_CLR_BIT(rf_setup, RF_DR_HIGH);
 80050be:	197b      	adds	r3, r7, r5
 80050c0:	197a      	adds	r2, r7, r5
 80050c2:	7812      	ldrb	r2, [r2, #0]
 80050c4:	2108      	movs	r1, #8
 80050c6:	438a      	bics	r2, r1
 80050c8:	701a      	strb	r2, [r3, #0]
        break;
 80050ca:	e01b      	b.n	8005104 <hal_nrf_set_datarate+0x78>
    case HAL_NRF_1MBPS:
        rf_setup = (uint8_t)_CLR_BIT(rf_setup, RF_DR_LOW);
 80050cc:	200f      	movs	r0, #15
 80050ce:	183b      	adds	r3, r7, r0
 80050d0:	183a      	adds	r2, r7, r0
 80050d2:	7812      	ldrb	r2, [r2, #0]
 80050d4:	2120      	movs	r1, #32
 80050d6:	438a      	bics	r2, r1
 80050d8:	701a      	strb	r2, [r3, #0]
        rf_setup = (uint8_t)_CLR_BIT(rf_setup, RF_DR_HIGH);
 80050da:	183b      	adds	r3, r7, r0
 80050dc:	183a      	adds	r2, r7, r0
 80050de:	7812      	ldrb	r2, [r2, #0]
 80050e0:	2108      	movs	r1, #8
 80050e2:	438a      	bics	r2, r1
 80050e4:	701a      	strb	r2, [r3, #0]
        break;
 80050e6:	e00d      	b.n	8005104 <hal_nrf_set_datarate+0x78>
    case HAL_NRF_2MBPS:
    default:
        rf_setup = (uint8_t)_CLR_BIT(rf_setup, RF_DR_LOW);
 80050e8:	200f      	movs	r0, #15
 80050ea:	183b      	adds	r3, r7, r0
 80050ec:	183a      	adds	r2, r7, r0
 80050ee:	7812      	ldrb	r2, [r2, #0]
 80050f0:	2120      	movs	r1, #32
 80050f2:	438a      	bics	r2, r1
 80050f4:	701a      	strb	r2, [r3, #0]
        rf_setup = (uint8_t)_SET_BIT(rf_setup, RF_DR_HIGH);
 80050f6:	183b      	adds	r3, r7, r0
 80050f8:	183a      	adds	r2, r7, r0
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	2108      	movs	r1, #8
 80050fe:	430a      	orrs	r2, r1
 8005100:	701a      	strb	r2, [r3, #0]
        break;
 8005102:	46c0      	nop			; (mov r8, r8)
    }
    hal_nrf_write_reg(RF_SETUP, rf_setup);
 8005104:	230f      	movs	r3, #15
 8005106:	18fb      	adds	r3, r7, r3
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	0019      	movs	r1, r3
 800510c:	2006      	movs	r0, #6
 800510e:	f7ff fe5f 	bl	8004dd0 <hal_nrf_write_reg>
}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	46bd      	mov	sp, r7
 8005116:	b004      	add	sp, #16
 8005118:	bdb0      	pop	{r4, r5, r7, pc}

0800511a <hal_nrf_set_crc_mode>:
        (((rf_setup & (uint8_t)_BIT(RF_DR_LOW))<<1) |
         (rf_setup & (uint8_t)_BIT(RF_DR_HIGH)));
}

void hal_nrf_set_crc_mode(hal_nrf_crc_mode_t crc_mode)
{
 800511a:	b590      	push	{r4, r7, lr}
 800511c:	b085      	sub	sp, #20
 800511e:	af00      	add	r7, sp, #0
 8005120:	0002      	movs	r2, r0
 8005122:	1dfb      	adds	r3, r7, #7
 8005124:	701a      	strb	r2, [r3, #0]
    uint8_t config = hal_nrf_read_reg(CONFIG);
 8005126:	230f      	movs	r3, #15
 8005128:	18fc      	adds	r4, r7, r3
 800512a:	2000      	movs	r0, #0
 800512c:	f7ff fd82 	bl	8004c34 <hal_nrf_read_reg>
 8005130:	0003      	movs	r3, r0
 8005132:	7023      	strb	r3, [r4, #0]

    switch (crc_mode)
 8005134:	1dfb      	adds	r3, r7, #7
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b02      	cmp	r3, #2
 800513a:	d01b      	beq.n	8005174 <hal_nrf_set_crc_mode+0x5a>
 800513c:	dc28      	bgt.n	8005190 <hal_nrf_set_crc_mode+0x76>
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <hal_nrf_set_crc_mode+0x2e>
 8005142:	2b01      	cmp	r3, #1
 8005144:	d008      	beq.n	8005158 <hal_nrf_set_crc_mode+0x3e>
    case HAL_NRF_CRC_16BIT:
        config = (uint8_t)_SET_BIT(config, EN_CRC);
        config = (uint8_t)_SET_BIT(config, CRCO);
        break;
    default:
        break;
 8005146:	e023      	b.n	8005190 <hal_nrf_set_crc_mode+0x76>
        config = (uint8_t)_CLR_BIT(config, EN_CRC);
 8005148:	220f      	movs	r2, #15
 800514a:	18bb      	adds	r3, r7, r2
 800514c:	18ba      	adds	r2, r7, r2
 800514e:	7812      	ldrb	r2, [r2, #0]
 8005150:	2108      	movs	r1, #8
 8005152:	438a      	bics	r2, r1
 8005154:	701a      	strb	r2, [r3, #0]
        break;
 8005156:	e01c      	b.n	8005192 <hal_nrf_set_crc_mode+0x78>
        config = (uint8_t)_SET_BIT(config, EN_CRC);
 8005158:	200f      	movs	r0, #15
 800515a:	183b      	adds	r3, r7, r0
 800515c:	183a      	adds	r2, r7, r0
 800515e:	7812      	ldrb	r2, [r2, #0]
 8005160:	2108      	movs	r1, #8
 8005162:	430a      	orrs	r2, r1
 8005164:	701a      	strb	r2, [r3, #0]
        config = (uint8_t)_CLR_BIT(config, CRCO);
 8005166:	183b      	adds	r3, r7, r0
 8005168:	183a      	adds	r2, r7, r0
 800516a:	7812      	ldrb	r2, [r2, #0]
 800516c:	2104      	movs	r1, #4
 800516e:	438a      	bics	r2, r1
 8005170:	701a      	strb	r2, [r3, #0]
        break;
 8005172:	e00e      	b.n	8005192 <hal_nrf_set_crc_mode+0x78>
        config = (uint8_t)_SET_BIT(config, EN_CRC);
 8005174:	200f      	movs	r0, #15
 8005176:	183b      	adds	r3, r7, r0
 8005178:	183a      	adds	r2, r7, r0
 800517a:	7812      	ldrb	r2, [r2, #0]
 800517c:	2108      	movs	r1, #8
 800517e:	430a      	orrs	r2, r1
 8005180:	701a      	strb	r2, [r3, #0]
        config = (uint8_t)_SET_BIT(config, CRCO);
 8005182:	183b      	adds	r3, r7, r0
 8005184:	183a      	adds	r2, r7, r0
 8005186:	7812      	ldrb	r2, [r2, #0]
 8005188:	2104      	movs	r1, #4
 800518a:	430a      	orrs	r2, r1
 800518c:	701a      	strb	r2, [r3, #0]
        break;
 800518e:	e000      	b.n	8005192 <hal_nrf_set_crc_mode+0x78>
        break;
 8005190:	46c0      	nop			; (mov r8, r8)
    }
    hal_nrf_write_reg(CONFIG, config);
 8005192:	230f      	movs	r3, #15
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	0019      	movs	r1, r3
 800519a:	2000      	movs	r0, #0
 800519c:	f7ff fe18 	bl	8004dd0 <hal_nrf_write_reg>
}
 80051a0:	46c0      	nop			; (mov r8, r8)
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b005      	add	sp, #20
 80051a6:	bd90      	pop	{r4, r7, pc}

080051a8 <hal_nrf_set_auto_retr>:
    } else
        return HAL_NRF_CRC_OFF;
}

void hal_nrf_set_auto_retr(uint8_t retr, uint16_t delay)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	0002      	movs	r2, r0
 80051b0:	1dfb      	adds	r3, r7, #7
 80051b2:	701a      	strb	r2, [r3, #0]
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	1c0a      	adds	r2, r1, #0
 80051b8:	801a      	strh	r2, [r3, #0]
    uint8_t setup_retr =
        (uint8_t)((((delay>>8) & 0x0f) << 4) | (retr & 0x0f));
 80051ba:	1d3b      	adds	r3, r7, #4
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	0a1b      	lsrs	r3, r3, #8
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	b25a      	sxtb	r2, r3
 80051c6:	1dfb      	adds	r3, r7, #7
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	b25b      	sxtb	r3, r3
 80051cc:	210f      	movs	r1, #15
 80051ce:	400b      	ands	r3, r1
 80051d0:	b25b      	sxtb	r3, r3
 80051d2:	4313      	orrs	r3, r2
 80051d4:	b25a      	sxtb	r2, r3
    uint8_t setup_retr =
 80051d6:	210f      	movs	r1, #15
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	701a      	strb	r2, [r3, #0]
    hal_nrf_write_reg(SETUP_RETR, setup_retr);
 80051dc:	187b      	adds	r3, r7, r1
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	0019      	movs	r1, r3
 80051e2:	2004      	movs	r0, #4
 80051e4:	f7ff fdf4 	bl	8004dd0 <hal_nrf_write_reg>
}
 80051e8:	46c0      	nop			; (mov r8, r8)
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b004      	add	sp, #16
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <hal_nrf_open_pipe>:
{
    return hal_nrf_read_reg(RX_PW_P0+pipe_num);
}

void hal_nrf_open_pipe(hal_nrf_address_t pipe_num, uint8_t auto_ack)
{
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	0002      	movs	r2, r0
 80051f8:	1dfb      	adds	r3, r7, #7
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	1dbb      	adds	r3, r7, #6
 80051fe:	1c0a      	adds	r2, r1, #0
 8005200:	701a      	strb	r2, [r3, #0]
    uint8_t en_rxaddr, en_aa;

    en_rxaddr = hal_nrf_read_reg(EN_RXADDR);
 8005202:	230f      	movs	r3, #15
 8005204:	18fc      	adds	r4, r7, r3
 8005206:	2002      	movs	r0, #2
 8005208:	f7ff fd14 	bl	8004c34 <hal_nrf_read_reg>
 800520c:	0003      	movs	r3, r0
 800520e:	7023      	strb	r3, [r4, #0]
    en_aa = hal_nrf_read_reg(EN_AA);
 8005210:	230e      	movs	r3, #14
 8005212:	18fc      	adds	r4, r7, r3
 8005214:	2001      	movs	r0, #1
 8005216:	f7ff fd0d 	bl	8004c34 <hal_nrf_read_reg>
 800521a:	0003      	movs	r3, r0
 800521c:	7023      	strb	r3, [r4, #0]

    switch(pipe_num)
 800521e:	1dfb      	adds	r3, r7, #7
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b05      	cmp	r3, #5
 8005224:	dc02      	bgt.n	800522c <hal_nrf_open_pipe+0x3c>
 8005226:	2b00      	cmp	r3, #0
 8005228:	da03      	bge.n	8005232 <hal_nrf_open_pipe+0x42>
        }
        break;

    case HAL_NRF_TX:
    default:
        goto finish;
 800522a:	e04e      	b.n	80052ca <hal_nrf_open_pipe+0xda>
    switch(pipe_num)
 800522c:	2bff      	cmp	r3, #255	; 0xff
 800522e:	d02c      	beq.n	800528a <hal_nrf_open_pipe+0x9a>
        goto finish;
 8005230:	e04b      	b.n	80052ca <hal_nrf_open_pipe+0xda>
        en_rxaddr = (uint8_t)_SET_BIT(en_rxaddr, (int)pipe_num);
 8005232:	1dfb      	adds	r3, r7, #7
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2201      	movs	r2, #1
 8005238:	409a      	lsls	r2, r3
 800523a:	0013      	movs	r3, r2
 800523c:	b2d9      	uxtb	r1, r3
 800523e:	220f      	movs	r2, #15
 8005240:	18bb      	adds	r3, r7, r2
 8005242:	18ba      	adds	r2, r7, r2
 8005244:	7812      	ldrb	r2, [r2, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	701a      	strb	r2, [r3, #0]
        if(auto_ack) {
 800524a:	1dbb      	adds	r3, r7, #6
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00c      	beq.n	800526c <hal_nrf_open_pipe+0x7c>
            en_aa = (uint8_t)_SET_BIT(en_aa, (int)pipe_num);
 8005252:	1dfb      	adds	r3, r7, #7
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2201      	movs	r2, #1
 8005258:	409a      	lsls	r2, r3
 800525a:	0013      	movs	r3, r2
 800525c:	b2d9      	uxtb	r1, r3
 800525e:	220e      	movs	r2, #14
 8005260:	18bb      	adds	r3, r7, r2
 8005262:	18ba      	adds	r2, r7, r2
 8005264:	7812      	ldrb	r2, [r2, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	701a      	strb	r2, [r3, #0]
        break;
 800526a:	e020      	b.n	80052ae <hal_nrf_open_pipe+0xbe>
            en_aa = (uint8_t)_CLR_BIT(en_aa, (int)pipe_num);
 800526c:	1dfb      	adds	r3, r7, #7
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2201      	movs	r2, #1
 8005272:	409a      	lsls	r2, r3
 8005274:	0013      	movs	r3, r2
 8005276:	b2db      	uxtb	r3, r3
 8005278:	43db      	mvns	r3, r3
 800527a:	b2da      	uxtb	r2, r3
 800527c:	210e      	movs	r1, #14
 800527e:	187b      	adds	r3, r7, r1
 8005280:	1879      	adds	r1, r7, r1
 8005282:	7809      	ldrb	r1, [r1, #0]
 8005284:	400a      	ands	r2, r1
 8005286:	701a      	strb	r2, [r3, #0]
        break;
 8005288:	e011      	b.n	80052ae <hal_nrf_open_pipe+0xbe>
        en_rxaddr = (uint8_t)(~(_BIT(6)|_BIT(7)));
 800528a:	230f      	movs	r3, #15
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	223f      	movs	r2, #63	; 0x3f
 8005290:	701a      	strb	r2, [r3, #0]
        if(auto_ack) {
 8005292:	1dbb      	adds	r3, r7, #6
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d004      	beq.n	80052a4 <hal_nrf_open_pipe+0xb4>
            en_aa = (uint8_t)(~(_BIT(6)|_BIT(7)));
 800529a:	230e      	movs	r3, #14
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	223f      	movs	r2, #63	; 0x3f
 80052a0:	701a      	strb	r2, [r3, #0]
        break;
 80052a2:	e003      	b.n	80052ac <hal_nrf_open_pipe+0xbc>
            en_aa = 0;
 80052a4:	230e      	movs	r3, #14
 80052a6:	18fb      	adds	r3, r7, r3
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
        break;
 80052ac:	46c0      	nop			; (mov r8, r8)
    }

    hal_nrf_write_reg(EN_RXADDR, en_rxaddr);
 80052ae:	230f      	movs	r3, #15
 80052b0:	18fb      	adds	r3, r7, r3
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	0019      	movs	r1, r3
 80052b6:	2002      	movs	r0, #2
 80052b8:	f7ff fd8a 	bl	8004dd0 <hal_nrf_write_reg>
    hal_nrf_write_reg(EN_AA, en_aa);
 80052bc:	230e      	movs	r3, #14
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	0019      	movs	r1, r3
 80052c4:	2001      	movs	r0, #1
 80052c6:	f7ff fd83 	bl	8004dd0 <hal_nrf_write_reg>
finish:
    return;
 80052ca:	46c0      	nop			; (mov r8, r8)
}
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b005      	add	sp, #20
 80052d0:	bd90      	pop	{r4, r7, pc}

080052d2 <hal_nrf_get_address_width>:
    uint8_t setup_aw = (uint8_t)(((int)address_width-2) & 0x03);
    hal_nrf_write_reg(SETUP_AW, setup_aw);
}

uint8_t hal_nrf_get_address_width(void)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	af00      	add	r7, sp, #0
    return (uint8_t)(hal_nrf_read_reg(SETUP_AW)+2);
 80052d6:	2003      	movs	r0, #3
 80052d8:	f7ff fcac 	bl	8004c34 <hal_nrf_read_reg>
 80052dc:	0003      	movs	r3, r0
 80052de:	3302      	adds	r3, #2
 80052e0:	b2db      	uxtb	r3, r3
}
 80052e2:	0018      	movs	r0, r3
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <hal_nrf_set_address>:

void hal_nrf_set_address(const hal_nrf_address_t address, const uint8_t *addr)
{
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	0002      	movs	r2, r0
 80052f0:	6039      	str	r1, [r7, #0]
 80052f2:	1dfb      	adds	r3, r7, #7
 80052f4:	701a      	strb	r2, [r3, #0]
    switch(address)
 80052f6:	1dfb      	adds	r3, r7, #7
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b06      	cmp	r3, #6
 80052fc:	d009      	beq.n	8005312 <hal_nrf_set_address+0x2a>
 80052fe:	dc21      	bgt.n	8005344 <hal_nrf_set_address+0x5c>
 8005300:	2b01      	cmp	r3, #1
 8005302:	dc02      	bgt.n	800530a <hal_nrf_set_address+0x22>
 8005304:	2b00      	cmp	r3, #0
 8005306:	da04      	bge.n	8005312 <hal_nrf_set_address+0x2a>
        hal_nrf_write_reg(RX_ADDR_P0 + (uint8_t)address, *addr);
        break;

    case HAL_NRF_ALL:
    default:
        break;
 8005308:	e01c      	b.n	8005344 <hal_nrf_set_address+0x5c>
 800530a:	3b02      	subs	r3, #2
    switch(address)
 800530c:	2b03      	cmp	r3, #3
 800530e:	d819      	bhi.n	8005344 <hal_nrf_set_address+0x5c>
 8005310:	e00d      	b.n	800532e <hal_nrf_set_address+0x46>
        hal_nrf_write_multibyte_reg(W_REGISTER+RX_ADDR_P0+
 8005312:	1dfb      	adds	r3, r7, #7
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	332a      	adds	r3, #42	; 0x2a
 8005318:	b2dc      	uxtb	r4, r3
 800531a:	f7ff ffda 	bl	80052d2 <hal_nrf_get_address_width>
 800531e:	0003      	movs	r3, r0
 8005320:	001a      	movs	r2, r3
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	0019      	movs	r1, r3
 8005326:	0020      	movs	r0, r4
 8005328:	f7ff fd8a 	bl	8004e40 <hal_nrf_write_multibyte_reg>
      break;
 800532c:	e00b      	b.n	8005346 <hal_nrf_set_address+0x5e>
        hal_nrf_write_reg(RX_ADDR_P0 + (uint8_t)address, *addr);
 800532e:	1dfb      	adds	r3, r7, #7
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	330a      	adds	r3, #10
 8005334:	b2da      	uxtb	r2, r3
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	0019      	movs	r1, r3
 800533c:	0010      	movs	r0, r2
 800533e:	f7ff fd47 	bl	8004dd0 <hal_nrf_write_reg>
        break;
 8005342:	e000      	b.n	8005346 <hal_nrf_set_address+0x5e>
        break;
 8005344:	46c0      	nop			; (mov r8, r8)
    }
}
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	46bd      	mov	sp, r7
 800534a:	b003      	add	sp, #12
 800534c:	bd90      	pop	{r4, r7, pc}

0800534e <hal_nrf_get_address>:

uint8_t hal_nrf_get_address(uint8_t address, uint8_t *addr)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	0002      	movs	r2, r0
 8005356:	6039      	str	r1, [r7, #0]
 8005358:	1dfb      	adds	r3, r7, #7
 800535a:	701a      	strb	r2, [r3, #0]
    switch (address)
 800535c:	1dfb      	adds	r3, r7, #7
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b01      	cmp	r3, #1
 8005362:	dc02      	bgt.n	800536a <hal_nrf_get_address+0x1c>
 8005364:	2b00      	cmp	r3, #0
 8005366:	da02      	bge.n	800536e <hal_nrf_get_address+0x20>
 8005368:	e00b      	b.n	8005382 <hal_nrf_get_address+0x34>
 800536a:	2b06      	cmp	r3, #6
 800536c:	d109      	bne.n	8005382 <hal_nrf_get_address+0x34>
    {
    case HAL_NRF_PIPE0:
    case HAL_NRF_PIPE1:
    case HAL_NRF_TX:
        return (uint8_t)hal_nrf_read_multibyte_reg(address, addr, 0);
 800536e:	6839      	ldr	r1, [r7, #0]
 8005370:	1dfb      	adds	r3, r7, #7
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2200      	movs	r2, #0
 8005376:	0018      	movs	r0, r3
 8005378:	f7ff fc8e 	bl	8004c98 <hal_nrf_read_multibyte_reg>
 800537c:	0003      	movs	r3, r0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	e00b      	b.n	800539a <hal_nrf_get_address+0x4c>
    default:
        *addr = hal_nrf_read_reg(RX_ADDR_P0 + address);
 8005382:	1dfb      	adds	r3, r7, #7
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	330a      	adds	r3, #10
 8005388:	b2db      	uxtb	r3, r3
 800538a:	0018      	movs	r0, r3
 800538c:	f7ff fc52 	bl	8004c34 <hal_nrf_read_reg>
 8005390:	0003      	movs	r3, r0
 8005392:	001a      	movs	r2, r3
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	701a      	strb	r2, [r3, #0]
        return 1;
 8005398:	2301      	movs	r3, #1
    }
}
 800539a:	0018      	movs	r0, r3
 800539c:	46bd      	mov	sp, r7
 800539e:	b002      	add	sp, #8
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <hal_nrf_config_tx>:
    hal_nrf_set_rx_payload_width((uint8_t)pipe_num, pload_width);
}

void hal_nrf_config_tx(const uint8_t *addr,
    hal_nrf_output_power_t power, uint8_t retr, uint16_t delay)
{
 80053a2:	b590      	push	{r4, r7, lr}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	000c      	movs	r4, r1
 80053ac:	0010      	movs	r0, r2
 80053ae:	0019      	movs	r1, r3
 80053b0:	1cfb      	adds	r3, r7, #3
 80053b2:	1c22      	adds	r2, r4, #0
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	1cbb      	adds	r3, r7, #2
 80053b8:	1c02      	adds	r2, r0, #0
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	003b      	movs	r3, r7
 80053be:	1c0a      	adds	r2, r1, #0
 80053c0:	801a      	strh	r2, [r3, #0]
    hal_nrf_set_output_power(power);
 80053c2:	1cfb      	adds	r3, r7, #3
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	0018      	movs	r0, r3
 80053c8:	f7ff fe33 	bl	8005032 <hal_nrf_set_output_power>

    hal_nrf_set_auto_retr(retr, delay);
 80053cc:	003b      	movs	r3, r7
 80053ce:	881a      	ldrh	r2, [r3, #0]
 80053d0:	1cbb      	adds	r3, r7, #2
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	0011      	movs	r1, r2
 80053d6:	0018      	movs	r0, r3
 80053d8:	f7ff fee6 	bl	80051a8 <hal_nrf_set_auto_retr>

    if (addr) {
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <hal_nrf_config_tx+0x54>
        hal_nrf_set_address(HAL_NRF_TX, addr);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	0019      	movs	r1, r3
 80053e6:	2006      	movs	r0, #6
 80053e8:	f7ff ff7e 	bl	80052e8 <hal_nrf_set_address>
        hal_nrf_set_address(HAL_NRF_PIPE0, addr);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	0019      	movs	r1, r3
 80053f0:	2000      	movs	r0, #0
 80053f2:	f7ff ff79 	bl	80052e8 <hal_nrf_set_address>
    }

    /* open RX pipe 0 for receiving ack */
    hal_nrf_open_pipe(HAL_NRF_PIPE0, true);
 80053f6:	2101      	movs	r1, #1
 80053f8:	2000      	movs	r0, #0
 80053fa:	f7ff fef9 	bl	80051f0 <hal_nrf_open_pipe>
}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	46bd      	mov	sp, r7
 8005402:	b003      	add	sp, #12
 8005404:	bd90      	pop	{r4, r7, pc}

08005406 <hal_nrf_set_irq_mode>:

void hal_nrf_set_irq_mode(hal_nrf_irq_source_t int_source, uint8_t irq_state)
{
 8005406:	b590      	push	{r4, r7, lr}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	0002      	movs	r2, r0
 800540e:	1dfb      	adds	r3, r7, #7
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	1dbb      	adds	r3, r7, #6
 8005414:	1c0a      	adds	r2, r1, #0
 8005416:	701a      	strb	r2, [r3, #0]
    uint8_t config = hal_nrf_read_reg(CONFIG);
 8005418:	230f      	movs	r3, #15
 800541a:	18fc      	adds	r4, r7, r3
 800541c:	2000      	movs	r0, #0
 800541e:	f7ff fc09 	bl	8004c34 <hal_nrf_read_reg>
 8005422:	0003      	movs	r3, r0
 8005424:	7023      	strb	r3, [r4, #0]

    switch (int_source)
 8005426:	1dfb      	adds	r3, r7, #7
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b06      	cmp	r3, #6
 800542c:	d02d      	beq.n	800548a <hal_nrf_set_irq_mode+0x84>
 800542e:	dc40      	bgt.n	80054b2 <hal_nrf_set_irq_mode+0xac>
 8005430:	2b04      	cmp	r3, #4
 8005432:	d002      	beq.n	800543a <hal_nrf_set_irq_mode+0x34>
 8005434:	2b05      	cmp	r3, #5
 8005436:	d014      	beq.n	8005462 <hal_nrf_set_irq_mode+0x5c>
 8005438:	e03b      	b.n	80054b2 <hal_nrf_set_irq_mode+0xac>
    {
    case HAL_NRF_MAX_RT:
        if (irq_state) {
 800543a:	1dbb      	adds	r3, r7, #6
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <hal_nrf_set_irq_mode+0x4c>
            config = (uint8_t)_CLR_BIT(config, MASK_MAX_RT);
 8005442:	220f      	movs	r2, #15
 8005444:	18bb      	adds	r3, r7, r2
 8005446:	18ba      	adds	r2, r7, r2
 8005448:	7812      	ldrb	r2, [r2, #0]
 800544a:	2110      	movs	r1, #16
 800544c:	438a      	bics	r2, r1
 800544e:	701a      	strb	r2, [r3, #0]
        } else {
            config = (uint8_t)_SET_BIT(config, MASK_MAX_RT);
        }
        break;
 8005450:	e02f      	b.n	80054b2 <hal_nrf_set_irq_mode+0xac>
            config = (uint8_t)_SET_BIT(config, MASK_MAX_RT);
 8005452:	220f      	movs	r2, #15
 8005454:	18bb      	adds	r3, r7, r2
 8005456:	18ba      	adds	r2, r7, r2
 8005458:	7812      	ldrb	r2, [r2, #0]
 800545a:	2110      	movs	r1, #16
 800545c:	430a      	orrs	r2, r1
 800545e:	701a      	strb	r2, [r3, #0]
        break;
 8005460:	e027      	b.n	80054b2 <hal_nrf_set_irq_mode+0xac>
    case HAL_NRF_TX_DS:
        if (irq_state) {
 8005462:	1dbb      	adds	r3, r7, #6
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <hal_nrf_set_irq_mode+0x74>
            config = (uint8_t)_CLR_BIT(config, MASK_TX_DS);
 800546a:	220f      	movs	r2, #15
 800546c:	18bb      	adds	r3, r7, r2
 800546e:	18ba      	adds	r2, r7, r2
 8005470:	7812      	ldrb	r2, [r2, #0]
 8005472:	2120      	movs	r1, #32
 8005474:	438a      	bics	r2, r1
 8005476:	701a      	strb	r2, [r3, #0]
        } else {
            config = (uint8_t)_SET_BIT(config, MASK_TX_DS);
        }
        break;
 8005478:	e01b      	b.n	80054b2 <hal_nrf_set_irq_mode+0xac>
            config = (uint8_t)_SET_BIT(config, MASK_TX_DS);
 800547a:	220f      	movs	r2, #15
 800547c:	18bb      	adds	r3, r7, r2
 800547e:	18ba      	adds	r2, r7, r2
 8005480:	7812      	ldrb	r2, [r2, #0]
 8005482:	2120      	movs	r1, #32
 8005484:	430a      	orrs	r2, r1
 8005486:	701a      	strb	r2, [r3, #0]
        break;
 8005488:	e013      	b.n	80054b2 <hal_nrf_set_irq_mode+0xac>
    case HAL_NRF_RX_DR:
        if (irq_state) {
 800548a:	1dbb      	adds	r3, r7, #6
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d007      	beq.n	80054a2 <hal_nrf_set_irq_mode+0x9c>
            config = (uint8_t)_CLR_BIT(config, MASK_RX_DR);
 8005492:	220f      	movs	r2, #15
 8005494:	18bb      	adds	r3, r7, r2
 8005496:	18ba      	adds	r2, r7, r2
 8005498:	7812      	ldrb	r2, [r2, #0]
 800549a:	2140      	movs	r1, #64	; 0x40
 800549c:	438a      	bics	r2, r1
 800549e:	701a      	strb	r2, [r3, #0]
        } else {
            config = (uint8_t)_SET_BIT(config, MASK_RX_DR);
        }
        break;
 80054a0:	e006      	b.n	80054b0 <hal_nrf_set_irq_mode+0xaa>
            config = (uint8_t)_SET_BIT(config, MASK_RX_DR);
 80054a2:	220f      	movs	r2, #15
 80054a4:	18bb      	adds	r3, r7, r2
 80054a6:	18ba      	adds	r2, r7, r2
 80054a8:	7812      	ldrb	r2, [r2, #0]
 80054aa:	2140      	movs	r1, #64	; 0x40
 80054ac:	430a      	orrs	r2, r1
 80054ae:	701a      	strb	r2, [r3, #0]
        break;
 80054b0:	46c0      	nop			; (mov r8, r8)
    }
    hal_nrf_write_reg(CONFIG, config);
 80054b2:	230f      	movs	r3, #15
 80054b4:	18fb      	adds	r3, r7, r3
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	0019      	movs	r1, r3
 80054ba:	2000      	movs	r0, #0
 80054bc:	f7ff fc88 	bl	8004dd0 <hal_nrf_write_reg>
}
 80054c0:	46c0      	nop			; (mov r8, r8)
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b005      	add	sp, #20
 80054c6:	bd90      	pop	{r4, r7, pc}

080054c8 <hal_nrf_get_clear_irq_flags>:
{
    return hal_nrf_get_status() & (uint8_t)(_BIT(MAX_RT)|_BIT(TX_DS)|_BIT(RX_DR));
}

uint8_t hal_nrf_get_clear_irq_flags(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
    return hal_nrf_write_reg(STATUS,
 80054cc:	2170      	movs	r1, #112	; 0x70
 80054ce:	2007      	movs	r0, #7
 80054d0:	f7ff fc7e 	bl	8004dd0 <hal_nrf_write_reg>
 80054d4:	0003      	movs	r3, r0
 80054d6:	001a      	movs	r2, r3
        (uint8_t)(_BIT(MAX_RT)|_BIT(TX_DS)|_BIT(RX_DR))) &
 80054d8:	2370      	movs	r3, #112	; 0x70
 80054da:	4013      	ands	r3, r2
 80054dc:	b2db      	uxtb	r3, r3
        (uint8_t)(_BIT(MAX_RT)|_BIT(TX_DS)|_BIT(RX_DR));
}
 80054de:	0018      	movs	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <hal_nrf_clear_irq_flag>:

    return retval;
}

void hal_nrf_clear_irq_flag(hal_nrf_irq_source_t int_source)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	0002      	movs	r2, r0
 80054ec:	1dfb      	adds	r3, r7, #7
 80054ee:	701a      	strb	r2, [r3, #0]
    hal_nrf_write_reg(STATUS, (uint8_t)_BIT(int_source));
 80054f0:	1dfb      	adds	r3, r7, #7
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2201      	movs	r2, #1
 80054f6:	409a      	lsls	r2, r3
 80054f8:	0013      	movs	r3, r2
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	0019      	movs	r1, r3
 80054fe:	2007      	movs	r0, #7
 8005500:	f7ff fc66 	bl	8004dd0 <hal_nrf_write_reg>
}
 8005504:	46c0      	nop			; (mov r8, r8)
 8005506:	46bd      	mov	sp, r7
 8005508:	b002      	add	sp, #8
 800550a:	bd80      	pop	{r7, pc}

0800550c <hal_nrf_set_power_mode>:

void hal_nrf_set_power_mode(hal_nrf_pwr_mode_t pwr_mode)
{
 800550c:	b5b0      	push	{r4, r5, r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	0002      	movs	r2, r0
 8005514:	1dfb      	adds	r3, r7, #7
 8005516:	701a      	strb	r2, [r3, #0]
    uint8_t config = hal_nrf_read_reg(CONFIG);
 8005518:	250f      	movs	r5, #15
 800551a:	197c      	adds	r4, r7, r5
 800551c:	2000      	movs	r0, #0
 800551e:	f7ff fb89 	bl	8004c34 <hal_nrf_read_reg>
 8005522:	0003      	movs	r3, r0
 8005524:	7023      	strb	r3, [r4, #0]

    if(pwr_mode == HAL_NRF_PWR_UP) {
 8005526:	1dfb      	adds	r3, r7, #7
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d106      	bne.n	800553c <hal_nrf_set_power_mode+0x30>
        config = (uint8_t)_SET_BIT(config, PWR_UP);
 800552e:	197b      	adds	r3, r7, r5
 8005530:	197a      	adds	r2, r7, r5
 8005532:	7812      	ldrb	r2, [r2, #0]
 8005534:	2102      	movs	r1, #2
 8005536:	430a      	orrs	r2, r1
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	e006      	b.n	800554a <hal_nrf_set_power_mode+0x3e>
    } else {
        config = (uint8_t)_CLR_BIT(config, PWR_UP);
 800553c:	220f      	movs	r2, #15
 800553e:	18bb      	adds	r3, r7, r2
 8005540:	18ba      	adds	r2, r7, r2
 8005542:	7812      	ldrb	r2, [r2, #0]
 8005544:	2102      	movs	r1, #2
 8005546:	438a      	bics	r2, r1
 8005548:	701a      	strb	r2, [r3, #0]
    }
    hal_nrf_write_reg(CONFIG, config);
 800554a:	230f      	movs	r3, #15
 800554c:	18fb      	adds	r3, r7, r3
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	0019      	movs	r1, r3
 8005552:	2000      	movs	r0, #0
 8005554:	f7ff fc3c 	bl	8004dd0 <hal_nrf_write_reg>
}
 8005558:	46c0      	nop			; (mov r8, r8)
 800555a:	46bd      	mov	sp, r7
 800555c:	b004      	add	sp, #16
 800555e:	bdb0      	pop	{r4, r5, r7, pc}

08005560 <hal_nrf_get_tx_fifo_status>:
    uint8_t config = hal_nrf_read_reg(CONFIG);
    return ((config & (uint8_t)_BIT(PWR_UP)) ? HAL_NRF_PWR_UP : HAL_NRF_PWR_DOWN);
}

uint8_t hal_nrf_get_tx_fifo_status(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
    return ((hal_nrf_read_reg(FIFO_STATUS) & (uint8_t)(_BIT(TX_FIFO_FULL)|_BIT(TX_EMPTY))) >> 4);
 8005564:	2017      	movs	r0, #23
 8005566:	f7ff fb65 	bl	8004c34 <hal_nrf_read_reg>
 800556a:	0003      	movs	r3, r0
 800556c:	111b      	asrs	r3, r3, #4
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2203      	movs	r2, #3
 8005572:	4013      	ands	r3, r2
 8005574:	b2db      	uxtb	r3, r3
}
 8005576:	0018      	movs	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <hal_nrf_read_rx_payload_width>:
{
    return (uint8_t)(hal_nrf_read_reg(CD) & 0x01);
}

uint8_t hal_nrf_read_rx_payload_width(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
    return hal_nrf_read_reg(R_RX_PL_WID);
 8005580:	2060      	movs	r0, #96	; 0x60
 8005582:	f7ff fb57 	bl	8004c34 <hal_nrf_read_reg>
 8005586:	0003      	movs	r3, r0
}
 8005588:	0018      	movs	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <hal_nrf_write_tx_payload>:
{
    return hal_nrf_read_multibyte_reg((uint8_t)HAL_NRF_RX_PLOAD, rx_pload, 0);
}

void hal_nrf_write_tx_payload(const uint8_t *tx_pload, uint8_t length)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b082      	sub	sp, #8
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	000a      	movs	r2, r1
 8005598:	1cfb      	adds	r3, r7, #3
 800559a:	701a      	strb	r2, [r3, #0]
    hal_nrf_write_multibyte_reg(W_TX_PAYLOAD, tx_pload, length);
 800559c:	1cfb      	adds	r3, r7, #3
 800559e:	781a      	ldrb	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	0019      	movs	r1, r3
 80055a4:	20a0      	movs	r0, #160	; 0xa0
 80055a6:	f7ff fc4b 	bl	8004e40 <hal_nrf_write_multibyte_reg>
}
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	46bd      	mov	sp, r7
 80055ae:	b002      	add	sp, #8
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <__errno>:
 80055b4:	4b01      	ldr	r3, [pc, #4]	; (80055bc <__errno+0x8>)
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	4770      	bx	lr
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	2000000c 	.word	0x2000000c

080055c0 <__libc_init_array>:
 80055c0:	b570      	push	{r4, r5, r6, lr}
 80055c2:	2600      	movs	r6, #0
 80055c4:	4d0c      	ldr	r5, [pc, #48]	; (80055f8 <__libc_init_array+0x38>)
 80055c6:	4c0d      	ldr	r4, [pc, #52]	; (80055fc <__libc_init_array+0x3c>)
 80055c8:	1b64      	subs	r4, r4, r5
 80055ca:	10a4      	asrs	r4, r4, #2
 80055cc:	42a6      	cmp	r6, r4
 80055ce:	d109      	bne.n	80055e4 <__libc_init_array+0x24>
 80055d0:	2600      	movs	r6, #0
 80055d2:	f000 fc8b 	bl	8005eec <_init>
 80055d6:	4d0a      	ldr	r5, [pc, #40]	; (8005600 <__libc_init_array+0x40>)
 80055d8:	4c0a      	ldr	r4, [pc, #40]	; (8005604 <__libc_init_array+0x44>)
 80055da:	1b64      	subs	r4, r4, r5
 80055dc:	10a4      	asrs	r4, r4, #2
 80055de:	42a6      	cmp	r6, r4
 80055e0:	d105      	bne.n	80055ee <__libc_init_array+0x2e>
 80055e2:	bd70      	pop	{r4, r5, r6, pc}
 80055e4:	00b3      	lsls	r3, r6, #2
 80055e6:	58eb      	ldr	r3, [r5, r3]
 80055e8:	4798      	blx	r3
 80055ea:	3601      	adds	r6, #1
 80055ec:	e7ee      	b.n	80055cc <__libc_init_array+0xc>
 80055ee:	00b3      	lsls	r3, r6, #2
 80055f0:	58eb      	ldr	r3, [r5, r3]
 80055f2:	4798      	blx	r3
 80055f4:	3601      	adds	r6, #1
 80055f6:	e7f2      	b.n	80055de <__libc_init_array+0x1e>
 80055f8:	080060fc 	.word	0x080060fc
 80055fc:	080060fc 	.word	0x080060fc
 8005600:	080060fc 	.word	0x080060fc
 8005604:	08006100 	.word	0x08006100

08005608 <memcpy>:
 8005608:	2300      	movs	r3, #0
 800560a:	b510      	push	{r4, lr}
 800560c:	429a      	cmp	r2, r3
 800560e:	d100      	bne.n	8005612 <memcpy+0xa>
 8005610:	bd10      	pop	{r4, pc}
 8005612:	5ccc      	ldrb	r4, [r1, r3]
 8005614:	54c4      	strb	r4, [r0, r3]
 8005616:	3301      	adds	r3, #1
 8005618:	e7f8      	b.n	800560c <memcpy+0x4>

0800561a <memset>:
 800561a:	0003      	movs	r3, r0
 800561c:	1882      	adds	r2, r0, r2
 800561e:	4293      	cmp	r3, r2
 8005620:	d100      	bne.n	8005624 <memset+0xa>
 8005622:	4770      	bx	lr
 8005624:	7019      	strb	r1, [r3, #0]
 8005626:	3301      	adds	r3, #1
 8005628:	e7f9      	b.n	800561e <memset+0x4>
	...

0800562c <siprintf>:
 800562c:	b40e      	push	{r1, r2, r3}
 800562e:	b500      	push	{lr}
 8005630:	490b      	ldr	r1, [pc, #44]	; (8005660 <siprintf+0x34>)
 8005632:	b09c      	sub	sp, #112	; 0x70
 8005634:	ab1d      	add	r3, sp, #116	; 0x74
 8005636:	9002      	str	r0, [sp, #8]
 8005638:	9006      	str	r0, [sp, #24]
 800563a:	9107      	str	r1, [sp, #28]
 800563c:	9104      	str	r1, [sp, #16]
 800563e:	4809      	ldr	r0, [pc, #36]	; (8005664 <siprintf+0x38>)
 8005640:	4909      	ldr	r1, [pc, #36]	; (8005668 <siprintf+0x3c>)
 8005642:	cb04      	ldmia	r3!, {r2}
 8005644:	9105      	str	r1, [sp, #20]
 8005646:	6800      	ldr	r0, [r0, #0]
 8005648:	a902      	add	r1, sp, #8
 800564a:	9301      	str	r3, [sp, #4]
 800564c:	f000 f870 	bl	8005730 <_svfiprintf_r>
 8005650:	2300      	movs	r3, #0
 8005652:	9a02      	ldr	r2, [sp, #8]
 8005654:	7013      	strb	r3, [r2, #0]
 8005656:	b01c      	add	sp, #112	; 0x70
 8005658:	bc08      	pop	{r3}
 800565a:	b003      	add	sp, #12
 800565c:	4718      	bx	r3
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	7fffffff 	.word	0x7fffffff
 8005664:	2000000c 	.word	0x2000000c
 8005668:	ffff0208 	.word	0xffff0208

0800566c <__ssputs_r>:
 800566c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800566e:	688e      	ldr	r6, [r1, #8]
 8005670:	b085      	sub	sp, #20
 8005672:	0007      	movs	r7, r0
 8005674:	000c      	movs	r4, r1
 8005676:	9203      	str	r2, [sp, #12]
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	429e      	cmp	r6, r3
 800567c:	d83c      	bhi.n	80056f8 <__ssputs_r+0x8c>
 800567e:	2390      	movs	r3, #144	; 0x90
 8005680:	898a      	ldrh	r2, [r1, #12]
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	421a      	tst	r2, r3
 8005686:	d034      	beq.n	80056f2 <__ssputs_r+0x86>
 8005688:	6909      	ldr	r1, [r1, #16]
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	6960      	ldr	r0, [r4, #20]
 800568e:	1a5b      	subs	r3, r3, r1
 8005690:	9302      	str	r3, [sp, #8]
 8005692:	2303      	movs	r3, #3
 8005694:	4343      	muls	r3, r0
 8005696:	0fdd      	lsrs	r5, r3, #31
 8005698:	18ed      	adds	r5, r5, r3
 800569a:	9b01      	ldr	r3, [sp, #4]
 800569c:	9802      	ldr	r0, [sp, #8]
 800569e:	3301      	adds	r3, #1
 80056a0:	181b      	adds	r3, r3, r0
 80056a2:	106d      	asrs	r5, r5, #1
 80056a4:	42ab      	cmp	r3, r5
 80056a6:	d900      	bls.n	80056aa <__ssputs_r+0x3e>
 80056a8:	001d      	movs	r5, r3
 80056aa:	0553      	lsls	r3, r2, #21
 80056ac:	d532      	bpl.n	8005714 <__ssputs_r+0xa8>
 80056ae:	0029      	movs	r1, r5
 80056b0:	0038      	movs	r0, r7
 80056b2:	f000 fb49 	bl	8005d48 <_malloc_r>
 80056b6:	1e06      	subs	r6, r0, #0
 80056b8:	d109      	bne.n	80056ce <__ssputs_r+0x62>
 80056ba:	230c      	movs	r3, #12
 80056bc:	603b      	str	r3, [r7, #0]
 80056be:	2340      	movs	r3, #64	; 0x40
 80056c0:	2001      	movs	r0, #1
 80056c2:	89a2      	ldrh	r2, [r4, #12]
 80056c4:	4240      	negs	r0, r0
 80056c6:	4313      	orrs	r3, r2
 80056c8:	81a3      	strh	r3, [r4, #12]
 80056ca:	b005      	add	sp, #20
 80056cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ce:	9a02      	ldr	r2, [sp, #8]
 80056d0:	6921      	ldr	r1, [r4, #16]
 80056d2:	f7ff ff99 	bl	8005608 <memcpy>
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	4a14      	ldr	r2, [pc, #80]	; (800572c <__ssputs_r+0xc0>)
 80056da:	401a      	ands	r2, r3
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	4313      	orrs	r3, r2
 80056e0:	81a3      	strh	r3, [r4, #12]
 80056e2:	9b02      	ldr	r3, [sp, #8]
 80056e4:	6126      	str	r6, [r4, #16]
 80056e6:	18f6      	adds	r6, r6, r3
 80056e8:	6026      	str	r6, [r4, #0]
 80056ea:	6165      	str	r5, [r4, #20]
 80056ec:	9e01      	ldr	r6, [sp, #4]
 80056ee:	1aed      	subs	r5, r5, r3
 80056f0:	60a5      	str	r5, [r4, #8]
 80056f2:	9b01      	ldr	r3, [sp, #4]
 80056f4:	429e      	cmp	r6, r3
 80056f6:	d900      	bls.n	80056fa <__ssputs_r+0x8e>
 80056f8:	9e01      	ldr	r6, [sp, #4]
 80056fa:	0032      	movs	r2, r6
 80056fc:	9903      	ldr	r1, [sp, #12]
 80056fe:	6820      	ldr	r0, [r4, #0]
 8005700:	f000 faa3 	bl	8005c4a <memmove>
 8005704:	68a3      	ldr	r3, [r4, #8]
 8005706:	2000      	movs	r0, #0
 8005708:	1b9b      	subs	r3, r3, r6
 800570a:	60a3      	str	r3, [r4, #8]
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	199e      	adds	r6, r3, r6
 8005710:	6026      	str	r6, [r4, #0]
 8005712:	e7da      	b.n	80056ca <__ssputs_r+0x5e>
 8005714:	002a      	movs	r2, r5
 8005716:	0038      	movs	r0, r7
 8005718:	f000 fb8c 	bl	8005e34 <_realloc_r>
 800571c:	1e06      	subs	r6, r0, #0
 800571e:	d1e0      	bne.n	80056e2 <__ssputs_r+0x76>
 8005720:	0038      	movs	r0, r7
 8005722:	6921      	ldr	r1, [r4, #16]
 8005724:	f000 faa4 	bl	8005c70 <_free_r>
 8005728:	e7c7      	b.n	80056ba <__ssputs_r+0x4e>
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	fffffb7f 	.word	0xfffffb7f

08005730 <_svfiprintf_r>:
 8005730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005732:	b0a1      	sub	sp, #132	; 0x84
 8005734:	9003      	str	r0, [sp, #12]
 8005736:	001d      	movs	r5, r3
 8005738:	898b      	ldrh	r3, [r1, #12]
 800573a:	000f      	movs	r7, r1
 800573c:	0016      	movs	r6, r2
 800573e:	061b      	lsls	r3, r3, #24
 8005740:	d511      	bpl.n	8005766 <_svfiprintf_r+0x36>
 8005742:	690b      	ldr	r3, [r1, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10e      	bne.n	8005766 <_svfiprintf_r+0x36>
 8005748:	2140      	movs	r1, #64	; 0x40
 800574a:	f000 fafd 	bl	8005d48 <_malloc_r>
 800574e:	6038      	str	r0, [r7, #0]
 8005750:	6138      	str	r0, [r7, #16]
 8005752:	2800      	cmp	r0, #0
 8005754:	d105      	bne.n	8005762 <_svfiprintf_r+0x32>
 8005756:	230c      	movs	r3, #12
 8005758:	9a03      	ldr	r2, [sp, #12]
 800575a:	3801      	subs	r0, #1
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	b021      	add	sp, #132	; 0x84
 8005760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005762:	2340      	movs	r3, #64	; 0x40
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	2300      	movs	r3, #0
 8005768:	ac08      	add	r4, sp, #32
 800576a:	6163      	str	r3, [r4, #20]
 800576c:	3320      	adds	r3, #32
 800576e:	7663      	strb	r3, [r4, #25]
 8005770:	3310      	adds	r3, #16
 8005772:	76a3      	strb	r3, [r4, #26]
 8005774:	9507      	str	r5, [sp, #28]
 8005776:	0035      	movs	r5, r6
 8005778:	782b      	ldrb	r3, [r5, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <_svfiprintf_r+0x52>
 800577e:	2b25      	cmp	r3, #37	; 0x25
 8005780:	d147      	bne.n	8005812 <_svfiprintf_r+0xe2>
 8005782:	1bab      	subs	r3, r5, r6
 8005784:	9305      	str	r3, [sp, #20]
 8005786:	42b5      	cmp	r5, r6
 8005788:	d00c      	beq.n	80057a4 <_svfiprintf_r+0x74>
 800578a:	0032      	movs	r2, r6
 800578c:	0039      	movs	r1, r7
 800578e:	9803      	ldr	r0, [sp, #12]
 8005790:	f7ff ff6c 	bl	800566c <__ssputs_r>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d100      	bne.n	800579a <_svfiprintf_r+0x6a>
 8005798:	e0ae      	b.n	80058f8 <_svfiprintf_r+0x1c8>
 800579a:	6962      	ldr	r2, [r4, #20]
 800579c:	9b05      	ldr	r3, [sp, #20]
 800579e:	4694      	mov	ip, r2
 80057a0:	4463      	add	r3, ip
 80057a2:	6163      	str	r3, [r4, #20]
 80057a4:	782b      	ldrb	r3, [r5, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d100      	bne.n	80057ac <_svfiprintf_r+0x7c>
 80057aa:	e0a5      	b.n	80058f8 <_svfiprintf_r+0x1c8>
 80057ac:	2201      	movs	r2, #1
 80057ae:	2300      	movs	r3, #0
 80057b0:	4252      	negs	r2, r2
 80057b2:	6062      	str	r2, [r4, #4]
 80057b4:	a904      	add	r1, sp, #16
 80057b6:	3254      	adds	r2, #84	; 0x54
 80057b8:	1852      	adds	r2, r2, r1
 80057ba:	1c6e      	adds	r6, r5, #1
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	60e3      	str	r3, [r4, #12]
 80057c0:	60a3      	str	r3, [r4, #8]
 80057c2:	7013      	strb	r3, [r2, #0]
 80057c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80057c6:	2205      	movs	r2, #5
 80057c8:	7831      	ldrb	r1, [r6, #0]
 80057ca:	4854      	ldr	r0, [pc, #336]	; (800591c <_svfiprintf_r+0x1ec>)
 80057cc:	f000 fa32 	bl	8005c34 <memchr>
 80057d0:	1c75      	adds	r5, r6, #1
 80057d2:	2800      	cmp	r0, #0
 80057d4:	d11f      	bne.n	8005816 <_svfiprintf_r+0xe6>
 80057d6:	6822      	ldr	r2, [r4, #0]
 80057d8:	06d3      	lsls	r3, r2, #27
 80057da:	d504      	bpl.n	80057e6 <_svfiprintf_r+0xb6>
 80057dc:	2353      	movs	r3, #83	; 0x53
 80057de:	a904      	add	r1, sp, #16
 80057e0:	185b      	adds	r3, r3, r1
 80057e2:	2120      	movs	r1, #32
 80057e4:	7019      	strb	r1, [r3, #0]
 80057e6:	0713      	lsls	r3, r2, #28
 80057e8:	d504      	bpl.n	80057f4 <_svfiprintf_r+0xc4>
 80057ea:	2353      	movs	r3, #83	; 0x53
 80057ec:	a904      	add	r1, sp, #16
 80057ee:	185b      	adds	r3, r3, r1
 80057f0:	212b      	movs	r1, #43	; 0x2b
 80057f2:	7019      	strb	r1, [r3, #0]
 80057f4:	7833      	ldrb	r3, [r6, #0]
 80057f6:	2b2a      	cmp	r3, #42	; 0x2a
 80057f8:	d016      	beq.n	8005828 <_svfiprintf_r+0xf8>
 80057fa:	0035      	movs	r5, r6
 80057fc:	2100      	movs	r1, #0
 80057fe:	200a      	movs	r0, #10
 8005800:	68e3      	ldr	r3, [r4, #12]
 8005802:	782a      	ldrb	r2, [r5, #0]
 8005804:	1c6e      	adds	r6, r5, #1
 8005806:	3a30      	subs	r2, #48	; 0x30
 8005808:	2a09      	cmp	r2, #9
 800580a:	d94e      	bls.n	80058aa <_svfiprintf_r+0x17a>
 800580c:	2900      	cmp	r1, #0
 800580e:	d111      	bne.n	8005834 <_svfiprintf_r+0x104>
 8005810:	e017      	b.n	8005842 <_svfiprintf_r+0x112>
 8005812:	3501      	adds	r5, #1
 8005814:	e7b0      	b.n	8005778 <_svfiprintf_r+0x48>
 8005816:	4b41      	ldr	r3, [pc, #260]	; (800591c <_svfiprintf_r+0x1ec>)
 8005818:	6822      	ldr	r2, [r4, #0]
 800581a:	1ac0      	subs	r0, r0, r3
 800581c:	2301      	movs	r3, #1
 800581e:	4083      	lsls	r3, r0
 8005820:	4313      	orrs	r3, r2
 8005822:	002e      	movs	r6, r5
 8005824:	6023      	str	r3, [r4, #0]
 8005826:	e7ce      	b.n	80057c6 <_svfiprintf_r+0x96>
 8005828:	9b07      	ldr	r3, [sp, #28]
 800582a:	1d19      	adds	r1, r3, #4
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	9107      	str	r1, [sp, #28]
 8005830:	2b00      	cmp	r3, #0
 8005832:	db01      	blt.n	8005838 <_svfiprintf_r+0x108>
 8005834:	930b      	str	r3, [sp, #44]	; 0x2c
 8005836:	e004      	b.n	8005842 <_svfiprintf_r+0x112>
 8005838:	425b      	negs	r3, r3
 800583a:	60e3      	str	r3, [r4, #12]
 800583c:	2302      	movs	r3, #2
 800583e:	4313      	orrs	r3, r2
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	782b      	ldrb	r3, [r5, #0]
 8005844:	2b2e      	cmp	r3, #46	; 0x2e
 8005846:	d10a      	bne.n	800585e <_svfiprintf_r+0x12e>
 8005848:	786b      	ldrb	r3, [r5, #1]
 800584a:	2b2a      	cmp	r3, #42	; 0x2a
 800584c:	d135      	bne.n	80058ba <_svfiprintf_r+0x18a>
 800584e:	9b07      	ldr	r3, [sp, #28]
 8005850:	3502      	adds	r5, #2
 8005852:	1d1a      	adds	r2, r3, #4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	9207      	str	r2, [sp, #28]
 8005858:	2b00      	cmp	r3, #0
 800585a:	db2b      	blt.n	80058b4 <_svfiprintf_r+0x184>
 800585c:	9309      	str	r3, [sp, #36]	; 0x24
 800585e:	4e30      	ldr	r6, [pc, #192]	; (8005920 <_svfiprintf_r+0x1f0>)
 8005860:	2203      	movs	r2, #3
 8005862:	0030      	movs	r0, r6
 8005864:	7829      	ldrb	r1, [r5, #0]
 8005866:	f000 f9e5 	bl	8005c34 <memchr>
 800586a:	2800      	cmp	r0, #0
 800586c:	d006      	beq.n	800587c <_svfiprintf_r+0x14c>
 800586e:	2340      	movs	r3, #64	; 0x40
 8005870:	1b80      	subs	r0, r0, r6
 8005872:	4083      	lsls	r3, r0
 8005874:	6822      	ldr	r2, [r4, #0]
 8005876:	3501      	adds	r5, #1
 8005878:	4313      	orrs	r3, r2
 800587a:	6023      	str	r3, [r4, #0]
 800587c:	7829      	ldrb	r1, [r5, #0]
 800587e:	2206      	movs	r2, #6
 8005880:	4828      	ldr	r0, [pc, #160]	; (8005924 <_svfiprintf_r+0x1f4>)
 8005882:	1c6e      	adds	r6, r5, #1
 8005884:	7621      	strb	r1, [r4, #24]
 8005886:	f000 f9d5 	bl	8005c34 <memchr>
 800588a:	2800      	cmp	r0, #0
 800588c:	d03c      	beq.n	8005908 <_svfiprintf_r+0x1d8>
 800588e:	4b26      	ldr	r3, [pc, #152]	; (8005928 <_svfiprintf_r+0x1f8>)
 8005890:	2b00      	cmp	r3, #0
 8005892:	d125      	bne.n	80058e0 <_svfiprintf_r+0x1b0>
 8005894:	2207      	movs	r2, #7
 8005896:	9b07      	ldr	r3, [sp, #28]
 8005898:	3307      	adds	r3, #7
 800589a:	4393      	bics	r3, r2
 800589c:	3308      	adds	r3, #8
 800589e:	9307      	str	r3, [sp, #28]
 80058a0:	6963      	ldr	r3, [r4, #20]
 80058a2:	9a04      	ldr	r2, [sp, #16]
 80058a4:	189b      	adds	r3, r3, r2
 80058a6:	6163      	str	r3, [r4, #20]
 80058a8:	e765      	b.n	8005776 <_svfiprintf_r+0x46>
 80058aa:	4343      	muls	r3, r0
 80058ac:	0035      	movs	r5, r6
 80058ae:	2101      	movs	r1, #1
 80058b0:	189b      	adds	r3, r3, r2
 80058b2:	e7a6      	b.n	8005802 <_svfiprintf_r+0xd2>
 80058b4:	2301      	movs	r3, #1
 80058b6:	425b      	negs	r3, r3
 80058b8:	e7d0      	b.n	800585c <_svfiprintf_r+0x12c>
 80058ba:	2300      	movs	r3, #0
 80058bc:	200a      	movs	r0, #10
 80058be:	001a      	movs	r2, r3
 80058c0:	3501      	adds	r5, #1
 80058c2:	6063      	str	r3, [r4, #4]
 80058c4:	7829      	ldrb	r1, [r5, #0]
 80058c6:	1c6e      	adds	r6, r5, #1
 80058c8:	3930      	subs	r1, #48	; 0x30
 80058ca:	2909      	cmp	r1, #9
 80058cc:	d903      	bls.n	80058d6 <_svfiprintf_r+0x1a6>
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0c5      	beq.n	800585e <_svfiprintf_r+0x12e>
 80058d2:	9209      	str	r2, [sp, #36]	; 0x24
 80058d4:	e7c3      	b.n	800585e <_svfiprintf_r+0x12e>
 80058d6:	4342      	muls	r2, r0
 80058d8:	0035      	movs	r5, r6
 80058da:	2301      	movs	r3, #1
 80058dc:	1852      	adds	r2, r2, r1
 80058de:	e7f1      	b.n	80058c4 <_svfiprintf_r+0x194>
 80058e0:	ab07      	add	r3, sp, #28
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	003a      	movs	r2, r7
 80058e6:	0021      	movs	r1, r4
 80058e8:	4b10      	ldr	r3, [pc, #64]	; (800592c <_svfiprintf_r+0x1fc>)
 80058ea:	9803      	ldr	r0, [sp, #12]
 80058ec:	e000      	b.n	80058f0 <_svfiprintf_r+0x1c0>
 80058ee:	bf00      	nop
 80058f0:	9004      	str	r0, [sp, #16]
 80058f2:	9b04      	ldr	r3, [sp, #16]
 80058f4:	3301      	adds	r3, #1
 80058f6:	d1d3      	bne.n	80058a0 <_svfiprintf_r+0x170>
 80058f8:	89bb      	ldrh	r3, [r7, #12]
 80058fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80058fc:	065b      	lsls	r3, r3, #25
 80058fe:	d400      	bmi.n	8005902 <_svfiprintf_r+0x1d2>
 8005900:	e72d      	b.n	800575e <_svfiprintf_r+0x2e>
 8005902:	2001      	movs	r0, #1
 8005904:	4240      	negs	r0, r0
 8005906:	e72a      	b.n	800575e <_svfiprintf_r+0x2e>
 8005908:	ab07      	add	r3, sp, #28
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	003a      	movs	r2, r7
 800590e:	0021      	movs	r1, r4
 8005910:	4b06      	ldr	r3, [pc, #24]	; (800592c <_svfiprintf_r+0x1fc>)
 8005912:	9803      	ldr	r0, [sp, #12]
 8005914:	f000 f87c 	bl	8005a10 <_printf_i>
 8005918:	e7ea      	b.n	80058f0 <_svfiprintf_r+0x1c0>
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	080060c0 	.word	0x080060c0
 8005920:	080060c6 	.word	0x080060c6
 8005924:	080060ca 	.word	0x080060ca
 8005928:	00000000 	.word	0x00000000
 800592c:	0800566d 	.word	0x0800566d

08005930 <_printf_common>:
 8005930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005932:	0015      	movs	r5, r2
 8005934:	9301      	str	r3, [sp, #4]
 8005936:	688a      	ldr	r2, [r1, #8]
 8005938:	690b      	ldr	r3, [r1, #16]
 800593a:	000c      	movs	r4, r1
 800593c:	9000      	str	r0, [sp, #0]
 800593e:	4293      	cmp	r3, r2
 8005940:	da00      	bge.n	8005944 <_printf_common+0x14>
 8005942:	0013      	movs	r3, r2
 8005944:	0022      	movs	r2, r4
 8005946:	602b      	str	r3, [r5, #0]
 8005948:	3243      	adds	r2, #67	; 0x43
 800594a:	7812      	ldrb	r2, [r2, #0]
 800594c:	2a00      	cmp	r2, #0
 800594e:	d001      	beq.n	8005954 <_printf_common+0x24>
 8005950:	3301      	adds	r3, #1
 8005952:	602b      	str	r3, [r5, #0]
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	069b      	lsls	r3, r3, #26
 8005958:	d502      	bpl.n	8005960 <_printf_common+0x30>
 800595a:	682b      	ldr	r3, [r5, #0]
 800595c:	3302      	adds	r3, #2
 800595e:	602b      	str	r3, [r5, #0]
 8005960:	6822      	ldr	r2, [r4, #0]
 8005962:	2306      	movs	r3, #6
 8005964:	0017      	movs	r7, r2
 8005966:	401f      	ands	r7, r3
 8005968:	421a      	tst	r2, r3
 800596a:	d027      	beq.n	80059bc <_printf_common+0x8c>
 800596c:	0023      	movs	r3, r4
 800596e:	3343      	adds	r3, #67	; 0x43
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	1e5a      	subs	r2, r3, #1
 8005974:	4193      	sbcs	r3, r2
 8005976:	6822      	ldr	r2, [r4, #0]
 8005978:	0692      	lsls	r2, r2, #26
 800597a:	d430      	bmi.n	80059de <_printf_common+0xae>
 800597c:	0022      	movs	r2, r4
 800597e:	9901      	ldr	r1, [sp, #4]
 8005980:	9800      	ldr	r0, [sp, #0]
 8005982:	9e08      	ldr	r6, [sp, #32]
 8005984:	3243      	adds	r2, #67	; 0x43
 8005986:	47b0      	blx	r6
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d025      	beq.n	80059d8 <_printf_common+0xa8>
 800598c:	2306      	movs	r3, #6
 800598e:	6820      	ldr	r0, [r4, #0]
 8005990:	682a      	ldr	r2, [r5, #0]
 8005992:	68e1      	ldr	r1, [r4, #12]
 8005994:	2500      	movs	r5, #0
 8005996:	4003      	ands	r3, r0
 8005998:	2b04      	cmp	r3, #4
 800599a:	d103      	bne.n	80059a4 <_printf_common+0x74>
 800599c:	1a8d      	subs	r5, r1, r2
 800599e:	43eb      	mvns	r3, r5
 80059a0:	17db      	asrs	r3, r3, #31
 80059a2:	401d      	ands	r5, r3
 80059a4:	68a3      	ldr	r3, [r4, #8]
 80059a6:	6922      	ldr	r2, [r4, #16]
 80059a8:	4293      	cmp	r3, r2
 80059aa:	dd01      	ble.n	80059b0 <_printf_common+0x80>
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	18ed      	adds	r5, r5, r3
 80059b0:	2700      	movs	r7, #0
 80059b2:	42bd      	cmp	r5, r7
 80059b4:	d120      	bne.n	80059f8 <_printf_common+0xc8>
 80059b6:	2000      	movs	r0, #0
 80059b8:	e010      	b.n	80059dc <_printf_common+0xac>
 80059ba:	3701      	adds	r7, #1
 80059bc:	68e3      	ldr	r3, [r4, #12]
 80059be:	682a      	ldr	r2, [r5, #0]
 80059c0:	1a9b      	subs	r3, r3, r2
 80059c2:	42bb      	cmp	r3, r7
 80059c4:	ddd2      	ble.n	800596c <_printf_common+0x3c>
 80059c6:	0022      	movs	r2, r4
 80059c8:	2301      	movs	r3, #1
 80059ca:	9901      	ldr	r1, [sp, #4]
 80059cc:	9800      	ldr	r0, [sp, #0]
 80059ce:	9e08      	ldr	r6, [sp, #32]
 80059d0:	3219      	adds	r2, #25
 80059d2:	47b0      	blx	r6
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d1f0      	bne.n	80059ba <_printf_common+0x8a>
 80059d8:	2001      	movs	r0, #1
 80059da:	4240      	negs	r0, r0
 80059dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059de:	2030      	movs	r0, #48	; 0x30
 80059e0:	18e1      	adds	r1, r4, r3
 80059e2:	3143      	adds	r1, #67	; 0x43
 80059e4:	7008      	strb	r0, [r1, #0]
 80059e6:	0021      	movs	r1, r4
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	3145      	adds	r1, #69	; 0x45
 80059ec:	7809      	ldrb	r1, [r1, #0]
 80059ee:	18a2      	adds	r2, r4, r2
 80059f0:	3243      	adds	r2, #67	; 0x43
 80059f2:	3302      	adds	r3, #2
 80059f4:	7011      	strb	r1, [r2, #0]
 80059f6:	e7c1      	b.n	800597c <_printf_common+0x4c>
 80059f8:	0022      	movs	r2, r4
 80059fa:	2301      	movs	r3, #1
 80059fc:	9901      	ldr	r1, [sp, #4]
 80059fe:	9800      	ldr	r0, [sp, #0]
 8005a00:	9e08      	ldr	r6, [sp, #32]
 8005a02:	321a      	adds	r2, #26
 8005a04:	47b0      	blx	r6
 8005a06:	1c43      	adds	r3, r0, #1
 8005a08:	d0e6      	beq.n	80059d8 <_printf_common+0xa8>
 8005a0a:	3701      	adds	r7, #1
 8005a0c:	e7d1      	b.n	80059b2 <_printf_common+0x82>
	...

08005a10 <_printf_i>:
 8005a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a12:	b08b      	sub	sp, #44	; 0x2c
 8005a14:	9206      	str	r2, [sp, #24]
 8005a16:	000a      	movs	r2, r1
 8005a18:	3243      	adds	r2, #67	; 0x43
 8005a1a:	9307      	str	r3, [sp, #28]
 8005a1c:	9005      	str	r0, [sp, #20]
 8005a1e:	9204      	str	r2, [sp, #16]
 8005a20:	7e0a      	ldrb	r2, [r1, #24]
 8005a22:	000c      	movs	r4, r1
 8005a24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a26:	2a78      	cmp	r2, #120	; 0x78
 8005a28:	d807      	bhi.n	8005a3a <_printf_i+0x2a>
 8005a2a:	2a62      	cmp	r2, #98	; 0x62
 8005a2c:	d809      	bhi.n	8005a42 <_printf_i+0x32>
 8005a2e:	2a00      	cmp	r2, #0
 8005a30:	d100      	bne.n	8005a34 <_printf_i+0x24>
 8005a32:	e0c1      	b.n	8005bb8 <_printf_i+0x1a8>
 8005a34:	2a58      	cmp	r2, #88	; 0x58
 8005a36:	d100      	bne.n	8005a3a <_printf_i+0x2a>
 8005a38:	e08c      	b.n	8005b54 <_printf_i+0x144>
 8005a3a:	0026      	movs	r6, r4
 8005a3c:	3642      	adds	r6, #66	; 0x42
 8005a3e:	7032      	strb	r2, [r6, #0]
 8005a40:	e022      	b.n	8005a88 <_printf_i+0x78>
 8005a42:	0010      	movs	r0, r2
 8005a44:	3863      	subs	r0, #99	; 0x63
 8005a46:	2815      	cmp	r0, #21
 8005a48:	d8f7      	bhi.n	8005a3a <_printf_i+0x2a>
 8005a4a:	f7fa fb5d 	bl	8000108 <__gnu_thumb1_case_shi>
 8005a4e:	0016      	.short	0x0016
 8005a50:	fff6001f 	.word	0xfff6001f
 8005a54:	fff6fff6 	.word	0xfff6fff6
 8005a58:	001ffff6 	.word	0x001ffff6
 8005a5c:	fff6fff6 	.word	0xfff6fff6
 8005a60:	fff6fff6 	.word	0xfff6fff6
 8005a64:	003600a8 	.word	0x003600a8
 8005a68:	fff6009a 	.word	0xfff6009a
 8005a6c:	00b9fff6 	.word	0x00b9fff6
 8005a70:	0036fff6 	.word	0x0036fff6
 8005a74:	fff6fff6 	.word	0xfff6fff6
 8005a78:	009e      	.short	0x009e
 8005a7a:	0026      	movs	r6, r4
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	3642      	adds	r6, #66	; 0x42
 8005a80:	1d11      	adds	r1, r2, #4
 8005a82:	6019      	str	r1, [r3, #0]
 8005a84:	6813      	ldr	r3, [r2, #0]
 8005a86:	7033      	strb	r3, [r6, #0]
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e0a7      	b.n	8005bdc <_printf_i+0x1cc>
 8005a8c:	6808      	ldr	r0, [r1, #0]
 8005a8e:	6819      	ldr	r1, [r3, #0]
 8005a90:	1d0a      	adds	r2, r1, #4
 8005a92:	0605      	lsls	r5, r0, #24
 8005a94:	d50b      	bpl.n	8005aae <_printf_i+0x9e>
 8005a96:	680d      	ldr	r5, [r1, #0]
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	2d00      	cmp	r5, #0
 8005a9c:	da03      	bge.n	8005aa6 <_printf_i+0x96>
 8005a9e:	232d      	movs	r3, #45	; 0x2d
 8005aa0:	9a04      	ldr	r2, [sp, #16]
 8005aa2:	426d      	negs	r5, r5
 8005aa4:	7013      	strb	r3, [r2, #0]
 8005aa6:	4b61      	ldr	r3, [pc, #388]	; (8005c2c <_printf_i+0x21c>)
 8005aa8:	270a      	movs	r7, #10
 8005aaa:	9303      	str	r3, [sp, #12]
 8005aac:	e01b      	b.n	8005ae6 <_printf_i+0xd6>
 8005aae:	680d      	ldr	r5, [r1, #0]
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	0641      	lsls	r1, r0, #25
 8005ab4:	d5f1      	bpl.n	8005a9a <_printf_i+0x8a>
 8005ab6:	b22d      	sxth	r5, r5
 8005ab8:	e7ef      	b.n	8005a9a <_printf_i+0x8a>
 8005aba:	680d      	ldr	r5, [r1, #0]
 8005abc:	6819      	ldr	r1, [r3, #0]
 8005abe:	1d08      	adds	r0, r1, #4
 8005ac0:	6018      	str	r0, [r3, #0]
 8005ac2:	062e      	lsls	r6, r5, #24
 8005ac4:	d501      	bpl.n	8005aca <_printf_i+0xba>
 8005ac6:	680d      	ldr	r5, [r1, #0]
 8005ac8:	e003      	b.n	8005ad2 <_printf_i+0xc2>
 8005aca:	066d      	lsls	r5, r5, #25
 8005acc:	d5fb      	bpl.n	8005ac6 <_printf_i+0xb6>
 8005ace:	680d      	ldr	r5, [r1, #0]
 8005ad0:	b2ad      	uxth	r5, r5
 8005ad2:	4b56      	ldr	r3, [pc, #344]	; (8005c2c <_printf_i+0x21c>)
 8005ad4:	2708      	movs	r7, #8
 8005ad6:	9303      	str	r3, [sp, #12]
 8005ad8:	2a6f      	cmp	r2, #111	; 0x6f
 8005ada:	d000      	beq.n	8005ade <_printf_i+0xce>
 8005adc:	3702      	adds	r7, #2
 8005ade:	0023      	movs	r3, r4
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	3343      	adds	r3, #67	; 0x43
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	6863      	ldr	r3, [r4, #4]
 8005ae8:	60a3      	str	r3, [r4, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	db03      	blt.n	8005af6 <_printf_i+0xe6>
 8005aee:	2204      	movs	r2, #4
 8005af0:	6821      	ldr	r1, [r4, #0]
 8005af2:	4391      	bics	r1, r2
 8005af4:	6021      	str	r1, [r4, #0]
 8005af6:	2d00      	cmp	r5, #0
 8005af8:	d102      	bne.n	8005b00 <_printf_i+0xf0>
 8005afa:	9e04      	ldr	r6, [sp, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00c      	beq.n	8005b1a <_printf_i+0x10a>
 8005b00:	9e04      	ldr	r6, [sp, #16]
 8005b02:	0028      	movs	r0, r5
 8005b04:	0039      	movs	r1, r7
 8005b06:	f7fa fb8f 	bl	8000228 <__aeabi_uidivmod>
 8005b0a:	9b03      	ldr	r3, [sp, #12]
 8005b0c:	3e01      	subs	r6, #1
 8005b0e:	5c5b      	ldrb	r3, [r3, r1]
 8005b10:	7033      	strb	r3, [r6, #0]
 8005b12:	002b      	movs	r3, r5
 8005b14:	0005      	movs	r5, r0
 8005b16:	429f      	cmp	r7, r3
 8005b18:	d9f3      	bls.n	8005b02 <_printf_i+0xf2>
 8005b1a:	2f08      	cmp	r7, #8
 8005b1c:	d109      	bne.n	8005b32 <_printf_i+0x122>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	07db      	lsls	r3, r3, #31
 8005b22:	d506      	bpl.n	8005b32 <_printf_i+0x122>
 8005b24:	6863      	ldr	r3, [r4, #4]
 8005b26:	6922      	ldr	r2, [r4, #16]
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	dc02      	bgt.n	8005b32 <_printf_i+0x122>
 8005b2c:	2330      	movs	r3, #48	; 0x30
 8005b2e:	3e01      	subs	r6, #1
 8005b30:	7033      	strb	r3, [r6, #0]
 8005b32:	9b04      	ldr	r3, [sp, #16]
 8005b34:	1b9b      	subs	r3, r3, r6
 8005b36:	6123      	str	r3, [r4, #16]
 8005b38:	9b07      	ldr	r3, [sp, #28]
 8005b3a:	0021      	movs	r1, r4
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	9805      	ldr	r0, [sp, #20]
 8005b40:	9b06      	ldr	r3, [sp, #24]
 8005b42:	aa09      	add	r2, sp, #36	; 0x24
 8005b44:	f7ff fef4 	bl	8005930 <_printf_common>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	d14c      	bne.n	8005be6 <_printf_i+0x1d6>
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	4240      	negs	r0, r0
 8005b50:	b00b      	add	sp, #44	; 0x2c
 8005b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b54:	3145      	adds	r1, #69	; 0x45
 8005b56:	700a      	strb	r2, [r1, #0]
 8005b58:	4a34      	ldr	r2, [pc, #208]	; (8005c2c <_printf_i+0x21c>)
 8005b5a:	9203      	str	r2, [sp, #12]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	6821      	ldr	r1, [r4, #0]
 8005b60:	ca20      	ldmia	r2!, {r5}
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	0608      	lsls	r0, r1, #24
 8005b66:	d516      	bpl.n	8005b96 <_printf_i+0x186>
 8005b68:	07cb      	lsls	r3, r1, #31
 8005b6a:	d502      	bpl.n	8005b72 <_printf_i+0x162>
 8005b6c:	2320      	movs	r3, #32
 8005b6e:	4319      	orrs	r1, r3
 8005b70:	6021      	str	r1, [r4, #0]
 8005b72:	2710      	movs	r7, #16
 8005b74:	2d00      	cmp	r5, #0
 8005b76:	d1b2      	bne.n	8005ade <_printf_i+0xce>
 8005b78:	2320      	movs	r3, #32
 8005b7a:	6822      	ldr	r2, [r4, #0]
 8005b7c:	439a      	bics	r2, r3
 8005b7e:	6022      	str	r2, [r4, #0]
 8005b80:	e7ad      	b.n	8005ade <_printf_i+0xce>
 8005b82:	2220      	movs	r2, #32
 8005b84:	6809      	ldr	r1, [r1, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	6022      	str	r2, [r4, #0]
 8005b8a:	0022      	movs	r2, r4
 8005b8c:	2178      	movs	r1, #120	; 0x78
 8005b8e:	3245      	adds	r2, #69	; 0x45
 8005b90:	7011      	strb	r1, [r2, #0]
 8005b92:	4a27      	ldr	r2, [pc, #156]	; (8005c30 <_printf_i+0x220>)
 8005b94:	e7e1      	b.n	8005b5a <_printf_i+0x14a>
 8005b96:	0648      	lsls	r0, r1, #25
 8005b98:	d5e6      	bpl.n	8005b68 <_printf_i+0x158>
 8005b9a:	b2ad      	uxth	r5, r5
 8005b9c:	e7e4      	b.n	8005b68 <_printf_i+0x158>
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	680d      	ldr	r5, [r1, #0]
 8005ba2:	1d10      	adds	r0, r2, #4
 8005ba4:	6949      	ldr	r1, [r1, #20]
 8005ba6:	6018      	str	r0, [r3, #0]
 8005ba8:	6813      	ldr	r3, [r2, #0]
 8005baa:	062e      	lsls	r6, r5, #24
 8005bac:	d501      	bpl.n	8005bb2 <_printf_i+0x1a2>
 8005bae:	6019      	str	r1, [r3, #0]
 8005bb0:	e002      	b.n	8005bb8 <_printf_i+0x1a8>
 8005bb2:	066d      	lsls	r5, r5, #25
 8005bb4:	d5fb      	bpl.n	8005bae <_printf_i+0x19e>
 8005bb6:	8019      	strh	r1, [r3, #0]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	9e04      	ldr	r6, [sp, #16]
 8005bbc:	6123      	str	r3, [r4, #16]
 8005bbe:	e7bb      	b.n	8005b38 <_printf_i+0x128>
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	1d11      	adds	r1, r2, #4
 8005bc4:	6019      	str	r1, [r3, #0]
 8005bc6:	6816      	ldr	r6, [r2, #0]
 8005bc8:	2100      	movs	r1, #0
 8005bca:	0030      	movs	r0, r6
 8005bcc:	6862      	ldr	r2, [r4, #4]
 8005bce:	f000 f831 	bl	8005c34 <memchr>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d001      	beq.n	8005bda <_printf_i+0x1ca>
 8005bd6:	1b80      	subs	r0, r0, r6
 8005bd8:	6060      	str	r0, [r4, #4]
 8005bda:	6863      	ldr	r3, [r4, #4]
 8005bdc:	6123      	str	r3, [r4, #16]
 8005bde:	2300      	movs	r3, #0
 8005be0:	9a04      	ldr	r2, [sp, #16]
 8005be2:	7013      	strb	r3, [r2, #0]
 8005be4:	e7a8      	b.n	8005b38 <_printf_i+0x128>
 8005be6:	6923      	ldr	r3, [r4, #16]
 8005be8:	0032      	movs	r2, r6
 8005bea:	9906      	ldr	r1, [sp, #24]
 8005bec:	9805      	ldr	r0, [sp, #20]
 8005bee:	9d07      	ldr	r5, [sp, #28]
 8005bf0:	47a8      	blx	r5
 8005bf2:	1c43      	adds	r3, r0, #1
 8005bf4:	d0aa      	beq.n	8005b4c <_printf_i+0x13c>
 8005bf6:	6823      	ldr	r3, [r4, #0]
 8005bf8:	079b      	lsls	r3, r3, #30
 8005bfa:	d415      	bmi.n	8005c28 <_printf_i+0x218>
 8005bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bfe:	68e0      	ldr	r0, [r4, #12]
 8005c00:	4298      	cmp	r0, r3
 8005c02:	daa5      	bge.n	8005b50 <_printf_i+0x140>
 8005c04:	0018      	movs	r0, r3
 8005c06:	e7a3      	b.n	8005b50 <_printf_i+0x140>
 8005c08:	0022      	movs	r2, r4
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	9906      	ldr	r1, [sp, #24]
 8005c0e:	9805      	ldr	r0, [sp, #20]
 8005c10:	9e07      	ldr	r6, [sp, #28]
 8005c12:	3219      	adds	r2, #25
 8005c14:	47b0      	blx	r6
 8005c16:	1c43      	adds	r3, r0, #1
 8005c18:	d098      	beq.n	8005b4c <_printf_i+0x13c>
 8005c1a:	3501      	adds	r5, #1
 8005c1c:	68e3      	ldr	r3, [r4, #12]
 8005c1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c20:	1a9b      	subs	r3, r3, r2
 8005c22:	42ab      	cmp	r3, r5
 8005c24:	dcf0      	bgt.n	8005c08 <_printf_i+0x1f8>
 8005c26:	e7e9      	b.n	8005bfc <_printf_i+0x1ec>
 8005c28:	2500      	movs	r5, #0
 8005c2a:	e7f7      	b.n	8005c1c <_printf_i+0x20c>
 8005c2c:	080060d1 	.word	0x080060d1
 8005c30:	080060e2 	.word	0x080060e2

08005c34 <memchr>:
 8005c34:	b2c9      	uxtb	r1, r1
 8005c36:	1882      	adds	r2, r0, r2
 8005c38:	4290      	cmp	r0, r2
 8005c3a:	d101      	bne.n	8005c40 <memchr+0xc>
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	4770      	bx	lr
 8005c40:	7803      	ldrb	r3, [r0, #0]
 8005c42:	428b      	cmp	r3, r1
 8005c44:	d0fb      	beq.n	8005c3e <memchr+0xa>
 8005c46:	3001      	adds	r0, #1
 8005c48:	e7f6      	b.n	8005c38 <memchr+0x4>

08005c4a <memmove>:
 8005c4a:	b510      	push	{r4, lr}
 8005c4c:	4288      	cmp	r0, r1
 8005c4e:	d902      	bls.n	8005c56 <memmove+0xc>
 8005c50:	188b      	adds	r3, r1, r2
 8005c52:	4298      	cmp	r0, r3
 8005c54:	d303      	bcc.n	8005c5e <memmove+0x14>
 8005c56:	2300      	movs	r3, #0
 8005c58:	e007      	b.n	8005c6a <memmove+0x20>
 8005c5a:	5c8b      	ldrb	r3, [r1, r2]
 8005c5c:	5483      	strb	r3, [r0, r2]
 8005c5e:	3a01      	subs	r2, #1
 8005c60:	d2fb      	bcs.n	8005c5a <memmove+0x10>
 8005c62:	bd10      	pop	{r4, pc}
 8005c64:	5ccc      	ldrb	r4, [r1, r3]
 8005c66:	54c4      	strb	r4, [r0, r3]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d1fa      	bne.n	8005c64 <memmove+0x1a>
 8005c6e:	e7f8      	b.n	8005c62 <memmove+0x18>

08005c70 <_free_r>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	0005      	movs	r5, r0
 8005c74:	2900      	cmp	r1, #0
 8005c76:	d010      	beq.n	8005c9a <_free_r+0x2a>
 8005c78:	1f0c      	subs	r4, r1, #4
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	da00      	bge.n	8005c82 <_free_r+0x12>
 8005c80:	18e4      	adds	r4, r4, r3
 8005c82:	0028      	movs	r0, r5
 8005c84:	f000 f918 	bl	8005eb8 <__malloc_lock>
 8005c88:	4a1d      	ldr	r2, [pc, #116]	; (8005d00 <_free_r+0x90>)
 8005c8a:	6813      	ldr	r3, [r2, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <_free_r+0x2c>
 8005c90:	6063      	str	r3, [r4, #4]
 8005c92:	6014      	str	r4, [r2, #0]
 8005c94:	0028      	movs	r0, r5
 8005c96:	f000 f917 	bl	8005ec8 <__malloc_unlock>
 8005c9a:	bd70      	pop	{r4, r5, r6, pc}
 8005c9c:	42a3      	cmp	r3, r4
 8005c9e:	d908      	bls.n	8005cb2 <_free_r+0x42>
 8005ca0:	6821      	ldr	r1, [r4, #0]
 8005ca2:	1860      	adds	r0, r4, r1
 8005ca4:	4283      	cmp	r3, r0
 8005ca6:	d1f3      	bne.n	8005c90 <_free_r+0x20>
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	1841      	adds	r1, r0, r1
 8005cae:	6021      	str	r1, [r4, #0]
 8005cb0:	e7ee      	b.n	8005c90 <_free_r+0x20>
 8005cb2:	001a      	movs	r2, r3
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <_free_r+0x4e>
 8005cba:	42a3      	cmp	r3, r4
 8005cbc:	d9f9      	bls.n	8005cb2 <_free_r+0x42>
 8005cbe:	6811      	ldr	r1, [r2, #0]
 8005cc0:	1850      	adds	r0, r2, r1
 8005cc2:	42a0      	cmp	r0, r4
 8005cc4:	d10b      	bne.n	8005cde <_free_r+0x6e>
 8005cc6:	6820      	ldr	r0, [r4, #0]
 8005cc8:	1809      	adds	r1, r1, r0
 8005cca:	1850      	adds	r0, r2, r1
 8005ccc:	6011      	str	r1, [r2, #0]
 8005cce:	4283      	cmp	r3, r0
 8005cd0:	d1e0      	bne.n	8005c94 <_free_r+0x24>
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	1841      	adds	r1, r0, r1
 8005cd8:	6011      	str	r1, [r2, #0]
 8005cda:	6053      	str	r3, [r2, #4]
 8005cdc:	e7da      	b.n	8005c94 <_free_r+0x24>
 8005cde:	42a0      	cmp	r0, r4
 8005ce0:	d902      	bls.n	8005ce8 <_free_r+0x78>
 8005ce2:	230c      	movs	r3, #12
 8005ce4:	602b      	str	r3, [r5, #0]
 8005ce6:	e7d5      	b.n	8005c94 <_free_r+0x24>
 8005ce8:	6821      	ldr	r1, [r4, #0]
 8005cea:	1860      	adds	r0, r4, r1
 8005cec:	4283      	cmp	r3, r0
 8005cee:	d103      	bne.n	8005cf8 <_free_r+0x88>
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	1841      	adds	r1, r0, r1
 8005cf6:	6021      	str	r1, [r4, #0]
 8005cf8:	6063      	str	r3, [r4, #4]
 8005cfa:	6054      	str	r4, [r2, #4]
 8005cfc:	e7ca      	b.n	8005c94 <_free_r+0x24>
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	200001f8 	.word	0x200001f8

08005d04 <sbrk_aligned>:
 8005d04:	b570      	push	{r4, r5, r6, lr}
 8005d06:	4e0f      	ldr	r6, [pc, #60]	; (8005d44 <sbrk_aligned+0x40>)
 8005d08:	000d      	movs	r5, r1
 8005d0a:	6831      	ldr	r1, [r6, #0]
 8005d0c:	0004      	movs	r4, r0
 8005d0e:	2900      	cmp	r1, #0
 8005d10:	d102      	bne.n	8005d18 <sbrk_aligned+0x14>
 8005d12:	f000 f8bf 	bl	8005e94 <_sbrk_r>
 8005d16:	6030      	str	r0, [r6, #0]
 8005d18:	0029      	movs	r1, r5
 8005d1a:	0020      	movs	r0, r4
 8005d1c:	f000 f8ba 	bl	8005e94 <_sbrk_r>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d00a      	beq.n	8005d3a <sbrk_aligned+0x36>
 8005d24:	2303      	movs	r3, #3
 8005d26:	1cc5      	adds	r5, r0, #3
 8005d28:	439d      	bics	r5, r3
 8005d2a:	42a8      	cmp	r0, r5
 8005d2c:	d007      	beq.n	8005d3e <sbrk_aligned+0x3a>
 8005d2e:	1a29      	subs	r1, r5, r0
 8005d30:	0020      	movs	r0, r4
 8005d32:	f000 f8af 	bl	8005e94 <_sbrk_r>
 8005d36:	1c43      	adds	r3, r0, #1
 8005d38:	d101      	bne.n	8005d3e <sbrk_aligned+0x3a>
 8005d3a:	2501      	movs	r5, #1
 8005d3c:	426d      	negs	r5, r5
 8005d3e:	0028      	movs	r0, r5
 8005d40:	bd70      	pop	{r4, r5, r6, pc}
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	200001fc 	.word	0x200001fc

08005d48 <_malloc_r>:
 8005d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d4a:	2203      	movs	r2, #3
 8005d4c:	1ccb      	adds	r3, r1, #3
 8005d4e:	4393      	bics	r3, r2
 8005d50:	3308      	adds	r3, #8
 8005d52:	0006      	movs	r6, r0
 8005d54:	001f      	movs	r7, r3
 8005d56:	2b0c      	cmp	r3, #12
 8005d58:	d232      	bcs.n	8005dc0 <_malloc_r+0x78>
 8005d5a:	270c      	movs	r7, #12
 8005d5c:	42b9      	cmp	r1, r7
 8005d5e:	d831      	bhi.n	8005dc4 <_malloc_r+0x7c>
 8005d60:	0030      	movs	r0, r6
 8005d62:	f000 f8a9 	bl	8005eb8 <__malloc_lock>
 8005d66:	4d32      	ldr	r5, [pc, #200]	; (8005e30 <_malloc_r+0xe8>)
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	001c      	movs	r4, r3
 8005d6c:	2c00      	cmp	r4, #0
 8005d6e:	d12e      	bne.n	8005dce <_malloc_r+0x86>
 8005d70:	0039      	movs	r1, r7
 8005d72:	0030      	movs	r0, r6
 8005d74:	f7ff ffc6 	bl	8005d04 <sbrk_aligned>
 8005d78:	0004      	movs	r4, r0
 8005d7a:	1c43      	adds	r3, r0, #1
 8005d7c:	d11e      	bne.n	8005dbc <_malloc_r+0x74>
 8005d7e:	682c      	ldr	r4, [r5, #0]
 8005d80:	0025      	movs	r5, r4
 8005d82:	2d00      	cmp	r5, #0
 8005d84:	d14a      	bne.n	8005e1c <_malloc_r+0xd4>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	0029      	movs	r1, r5
 8005d8a:	18e3      	adds	r3, r4, r3
 8005d8c:	0030      	movs	r0, r6
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	f000 f880 	bl	8005e94 <_sbrk_r>
 8005d94:	9b01      	ldr	r3, [sp, #4]
 8005d96:	4283      	cmp	r3, r0
 8005d98:	d143      	bne.n	8005e22 <_malloc_r+0xda>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	3703      	adds	r7, #3
 8005d9e:	1aff      	subs	r7, r7, r3
 8005da0:	2303      	movs	r3, #3
 8005da2:	439f      	bics	r7, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	2f0c      	cmp	r7, #12
 8005da8:	d200      	bcs.n	8005dac <_malloc_r+0x64>
 8005daa:	270c      	movs	r7, #12
 8005dac:	0039      	movs	r1, r7
 8005dae:	0030      	movs	r0, r6
 8005db0:	f7ff ffa8 	bl	8005d04 <sbrk_aligned>
 8005db4:	1c43      	adds	r3, r0, #1
 8005db6:	d034      	beq.n	8005e22 <_malloc_r+0xda>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	19df      	adds	r7, r3, r7
 8005dbc:	6027      	str	r7, [r4, #0]
 8005dbe:	e013      	b.n	8005de8 <_malloc_r+0xa0>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	dacb      	bge.n	8005d5c <_malloc_r+0x14>
 8005dc4:	230c      	movs	r3, #12
 8005dc6:	2500      	movs	r5, #0
 8005dc8:	6033      	str	r3, [r6, #0]
 8005dca:	0028      	movs	r0, r5
 8005dcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	1bd1      	subs	r1, r2, r7
 8005dd2:	d420      	bmi.n	8005e16 <_malloc_r+0xce>
 8005dd4:	290b      	cmp	r1, #11
 8005dd6:	d917      	bls.n	8005e08 <_malloc_r+0xc0>
 8005dd8:	19e2      	adds	r2, r4, r7
 8005dda:	6027      	str	r7, [r4, #0]
 8005ddc:	42a3      	cmp	r3, r4
 8005dde:	d111      	bne.n	8005e04 <_malloc_r+0xbc>
 8005de0:	602a      	str	r2, [r5, #0]
 8005de2:	6863      	ldr	r3, [r4, #4]
 8005de4:	6011      	str	r1, [r2, #0]
 8005de6:	6053      	str	r3, [r2, #4]
 8005de8:	0030      	movs	r0, r6
 8005dea:	0025      	movs	r5, r4
 8005dec:	f000 f86c 	bl	8005ec8 <__malloc_unlock>
 8005df0:	2207      	movs	r2, #7
 8005df2:	350b      	adds	r5, #11
 8005df4:	1d23      	adds	r3, r4, #4
 8005df6:	4395      	bics	r5, r2
 8005df8:	1aea      	subs	r2, r5, r3
 8005dfa:	429d      	cmp	r5, r3
 8005dfc:	d0e5      	beq.n	8005dca <_malloc_r+0x82>
 8005dfe:	1b5b      	subs	r3, r3, r5
 8005e00:	50a3      	str	r3, [r4, r2]
 8005e02:	e7e2      	b.n	8005dca <_malloc_r+0x82>
 8005e04:	605a      	str	r2, [r3, #4]
 8005e06:	e7ec      	b.n	8005de2 <_malloc_r+0x9a>
 8005e08:	6862      	ldr	r2, [r4, #4]
 8005e0a:	42a3      	cmp	r3, r4
 8005e0c:	d101      	bne.n	8005e12 <_malloc_r+0xca>
 8005e0e:	602a      	str	r2, [r5, #0]
 8005e10:	e7ea      	b.n	8005de8 <_malloc_r+0xa0>
 8005e12:	605a      	str	r2, [r3, #4]
 8005e14:	e7e8      	b.n	8005de8 <_malloc_r+0xa0>
 8005e16:	0023      	movs	r3, r4
 8005e18:	6864      	ldr	r4, [r4, #4]
 8005e1a:	e7a7      	b.n	8005d6c <_malloc_r+0x24>
 8005e1c:	002c      	movs	r4, r5
 8005e1e:	686d      	ldr	r5, [r5, #4]
 8005e20:	e7af      	b.n	8005d82 <_malloc_r+0x3a>
 8005e22:	230c      	movs	r3, #12
 8005e24:	0030      	movs	r0, r6
 8005e26:	6033      	str	r3, [r6, #0]
 8005e28:	f000 f84e 	bl	8005ec8 <__malloc_unlock>
 8005e2c:	e7cd      	b.n	8005dca <_malloc_r+0x82>
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	200001f8 	.word	0x200001f8

08005e34 <_realloc_r>:
 8005e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e36:	0007      	movs	r7, r0
 8005e38:	000e      	movs	r6, r1
 8005e3a:	0014      	movs	r4, r2
 8005e3c:	2900      	cmp	r1, #0
 8005e3e:	d105      	bne.n	8005e4c <_realloc_r+0x18>
 8005e40:	0011      	movs	r1, r2
 8005e42:	f7ff ff81 	bl	8005d48 <_malloc_r>
 8005e46:	0005      	movs	r5, r0
 8005e48:	0028      	movs	r0, r5
 8005e4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e4c:	2a00      	cmp	r2, #0
 8005e4e:	d103      	bne.n	8005e58 <_realloc_r+0x24>
 8005e50:	f7ff ff0e 	bl	8005c70 <_free_r>
 8005e54:	0025      	movs	r5, r4
 8005e56:	e7f7      	b.n	8005e48 <_realloc_r+0x14>
 8005e58:	f000 f83e 	bl	8005ed8 <_malloc_usable_size_r>
 8005e5c:	9001      	str	r0, [sp, #4]
 8005e5e:	4284      	cmp	r4, r0
 8005e60:	d803      	bhi.n	8005e6a <_realloc_r+0x36>
 8005e62:	0035      	movs	r5, r6
 8005e64:	0843      	lsrs	r3, r0, #1
 8005e66:	42a3      	cmp	r3, r4
 8005e68:	d3ee      	bcc.n	8005e48 <_realloc_r+0x14>
 8005e6a:	0021      	movs	r1, r4
 8005e6c:	0038      	movs	r0, r7
 8005e6e:	f7ff ff6b 	bl	8005d48 <_malloc_r>
 8005e72:	1e05      	subs	r5, r0, #0
 8005e74:	d0e8      	beq.n	8005e48 <_realloc_r+0x14>
 8005e76:	9b01      	ldr	r3, [sp, #4]
 8005e78:	0022      	movs	r2, r4
 8005e7a:	429c      	cmp	r4, r3
 8005e7c:	d900      	bls.n	8005e80 <_realloc_r+0x4c>
 8005e7e:	001a      	movs	r2, r3
 8005e80:	0031      	movs	r1, r6
 8005e82:	0028      	movs	r0, r5
 8005e84:	f7ff fbc0 	bl	8005608 <memcpy>
 8005e88:	0031      	movs	r1, r6
 8005e8a:	0038      	movs	r0, r7
 8005e8c:	f7ff fef0 	bl	8005c70 <_free_r>
 8005e90:	e7da      	b.n	8005e48 <_realloc_r+0x14>
	...

08005e94 <_sbrk_r>:
 8005e94:	2300      	movs	r3, #0
 8005e96:	b570      	push	{r4, r5, r6, lr}
 8005e98:	4d06      	ldr	r5, [pc, #24]	; (8005eb4 <_sbrk_r+0x20>)
 8005e9a:	0004      	movs	r4, r0
 8005e9c:	0008      	movs	r0, r1
 8005e9e:	602b      	str	r3, [r5, #0]
 8005ea0:	f7fb f986 	bl	80011b0 <_sbrk>
 8005ea4:	1c43      	adds	r3, r0, #1
 8005ea6:	d103      	bne.n	8005eb0 <_sbrk_r+0x1c>
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d000      	beq.n	8005eb0 <_sbrk_r+0x1c>
 8005eae:	6023      	str	r3, [r4, #0]
 8005eb0:	bd70      	pop	{r4, r5, r6, pc}
 8005eb2:	46c0      	nop			; (mov r8, r8)
 8005eb4:	20000200 	.word	0x20000200

08005eb8 <__malloc_lock>:
 8005eb8:	b510      	push	{r4, lr}
 8005eba:	4802      	ldr	r0, [pc, #8]	; (8005ec4 <__malloc_lock+0xc>)
 8005ebc:	f000 f814 	bl	8005ee8 <__retarget_lock_acquire_recursive>
 8005ec0:	bd10      	pop	{r4, pc}
 8005ec2:	46c0      	nop			; (mov r8, r8)
 8005ec4:	20000204 	.word	0x20000204

08005ec8 <__malloc_unlock>:
 8005ec8:	b510      	push	{r4, lr}
 8005eca:	4802      	ldr	r0, [pc, #8]	; (8005ed4 <__malloc_unlock+0xc>)
 8005ecc:	f000 f80d 	bl	8005eea <__retarget_lock_release_recursive>
 8005ed0:	bd10      	pop	{r4, pc}
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	20000204 	.word	0x20000204

08005ed8 <_malloc_usable_size_r>:
 8005ed8:	1f0b      	subs	r3, r1, #4
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	1f18      	subs	r0, r3, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	da01      	bge.n	8005ee6 <_malloc_usable_size_r+0xe>
 8005ee2:	580b      	ldr	r3, [r1, r0]
 8005ee4:	18c0      	adds	r0, r0, r3
 8005ee6:	4770      	bx	lr

08005ee8 <__retarget_lock_acquire_recursive>:
 8005ee8:	4770      	bx	lr

08005eea <__retarget_lock_release_recursive>:
 8005eea:	4770      	bx	lr

08005eec <_init>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	46c0      	nop			; (mov r8, r8)
 8005ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef2:	bc08      	pop	{r3}
 8005ef4:	469e      	mov	lr, r3
 8005ef6:	4770      	bx	lr

08005ef8 <_fini>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	46c0      	nop			; (mov r8, r8)
 8005efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efe:	bc08      	pop	{r3}
 8005f00:	469e      	mov	lr, r3
 8005f02:	4770      	bx	lr
